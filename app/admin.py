import osfrom datetime import datetimefrom io import BytesIOfrom aiogram import Router, Ffrom aiogram.filters import Command, Filterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message,    CallbackQuery,    FSInputFile,    InlineKeyboardMarkup,    InlineKeyboardButton,)from openpyxl import Workbookfrom app.database.sqlite_db import (    get_all_waiters,    add_shift,    set_shift_hours,    set_shift_tasks,    get_all_shifts,)from app.utils.calendar import make_calendaradmin = Router()# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ ID –∏ —Ñ–∏–ª—å—Ç—Ä ---ADMIN_ID = [2015462319, 1773695867]def user_is_admin(user_id: int) -> bool:    return user_id in ADMIN_IDclass AdminProtect(Filter):    async def __call__(self, message: Message) -> bool:        return user_is_admin(message.from_user.id)# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---class AdminStates(StatesGroup):    waiting_hours = State()    waiting_tasks = State()# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---@admin.message(Command("admin_menu"), AdminProtect())async def cmd_admin_menu(message: Message):    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton(text="üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- –ü–æ–∫–∞–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–æ–±—â–∏–π) ---def _show_admin_calendar(query: CallbackQuery, mode: str):    year, month = datetime.today().year, datetime.today().month    kb = make_calendar(year, month, set())    query_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤:" if mode == "set_hours" else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:"    return query.message.edit_text(query_text, reply_markup=kb)# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é ---@admin.callback_query(AdminProtect(), F.data == "AM_SET_HOURS")async def admin_set_hours(query: CallbackQuery, state: FSMContext):    await state.update_data(mode="set_hours")    await _show_admin_calendar(query, mode="set_hours")@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def admin_edit_schedule(query: CallbackQuery, state: FSMContext):    await state.update_data(mode="edit_schedule")    await _show_admin_calendar(query, mode="edit_schedule")# --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ---@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"))async def admin_on_day(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    data = await state.get_data()    mode = data.get("mode")    await state.update_data(selected_date=date_str)    if mode == "set_hours":        # –ó–∞–ø—Ä–æ—Å —á–∞—Å–æ–≤        kb = InlineKeyboardMarkup(inline_keyboard=[            [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")]        ])        await query.message.edit_text(            f"<b>–î–∞—Ç–∞:</b> {date_str}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:",            parse_mode="HTML",            reply_markup=kb        )        await state.set_state(AdminStates.waiting_hours)    else:        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç—å/–Ω–∞–∑–∞–¥        kb = InlineKeyboardMarkup(inline_keyboard=[            [InlineKeyboardButton(text="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", callback_data="AM_ASSIGN_WORKER")],            [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")],        ])        await query.message.edit_text(            f"<b>–î–∞—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:</b> {date_str}",            parse_mode="HTML",            reply_markup=kb        )# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤ ---@admin.message(AdminStates.waiting_hours, AdminProtect())async def process_hours(message: Message, state: FSMContext):    text = message.text.replace(",", ".").strip()    try:        hours = float(text)    except ValueError:        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")    data = await state.get_data()    date_str = data.get("selected_date")    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ –≤—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º? –ò–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞? –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ–Ω–∏–º –∫ –¥–∞—Ç–µ –¥–ª—è –≤—Å–µ—Ö?    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –Ω–æ –ø–æ –∑–∞–¥–∞–Ω–∏—é ‚Äî –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ä–∞–Ω–µ–µ –≤—ã–±—Ä–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π –ø–æ—Ç–æ–∫.    # –°–æ—Ö—Ä–∞–Ω–∏–º —á–∞—Å—ã:    add_shift(0, date_str)  # –∑–∞–º–µ–Ω–∏—Ç—å 0 –Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ    set_shift_hours(0, date_str, hours)    await message.answer(f"–ß–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {hours} —á. –Ω–∞ {date_str}.")    await state.clear()# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ---@admin.callback_query(AdminProtect(), F.data == "AM_ASSIGN_WORKER")async def admin_assign_worker(query: CallbackQuery, state: FSMContext):    waiters = get_all_waiters()    buttons = [InlineKeyboardButton(text=str(tg), callback_data=f"AM_WORKER|{tg}") for tg in waiters]    kb = InlineKeyboardMarkup(row_width=2)    kb.add(*buttons)    kb.add(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_DATE"))    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:", reply_markup=kb)# --- –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: –∑–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á ---@admin.callback_query(AdminProtect(), F.data.startswith("AM_WORKER|"))async def admin_capture_worker(query: CallbackQuery, state: FSMContext):    _, tg_id = query.data.split("|",1)    await state.update_data(chosen_worker=int(tg_id))    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚úîÔ∏è –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="AM_NO_TASKS")],        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_ASSIGN")],    ])    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±–µ–∑ –∑–∞–¥–∞—á):", reply_markup=kb)    await state.set_state(AdminStates.waiting_tasks)# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á —Ç–µ–∫—Å—Ç–æ–º ---@admin.message(AdminStates.waiting_tasks, AdminProtect())async def process_tasks(message: Message, state: FSMContext):    tasks = message.text.strip()    data = await state.get_data()    tg_id = data.get("chosen_worker")    date_str = data.get("selected_date")    # –ü—Ä–∏–≤—è–∂–µ–º shift –∏ tasks    add_shift(tg_id, date_str)    set_shift_tasks(tg_id, date_str, tasks)    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")    await state.clear()# --- –ë–µ–∑ –∑–∞–¥–∞—á ---@admin.callback_query(AdminProtect(), F.data == "AM_NO_TASKS")async def process_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    tg_id = data.get("chosen_worker")    date_str = data.get("selected_date")    add_shift(tg_id, date_str)    set_shift_tasks(tg_id, date_str, "")    await query.message.edit_text("–°–º–µ–Ω–∞ –±–µ–∑ –∑–∞–¥–∞—á –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.")    await state.clear()# --- –ö–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" ---@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def back_to_menu(query: CallbackQuery):    await cmd_admin_menu(query.message)@admin.callback_query(AdminProtect(), F.data == "AM_BACK_DATE")async def back_to_date(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    mode = data.get("mode")    await _show_admin_calendar(query, mode)@admin.callback_query(AdminProtect(), F.data == "AM_BACK_ASSIGN")async def back_to_assign(query: CallbackQuery, state: FSMContext):    date_str = (await state.get_data()).get("selected_date")    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", callback_data="AM_ASSIGN_WORKER")],        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")],    ])    await query.message.edit_text(f"<b>–î–∞—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:</b> {date_str}", parse_mode="HTML", reply_markup=kb)# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (—Ä–∞—Å—á–µ—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —ç–∫—Å–ø–æ—Ä—Ç) ---@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    rows = get_all_shifts()    text = "<b>–†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    total = 0    for name, date, hrs, _ in rows:        pay = hrs * rate        total += pay        text += f"{name} {date}: {hrs}—á x {rate} = {pay:.2f}\n"    text += f"\n<b>–í—Å–µ–≥–æ: {total:.2f}</b>"    await query.message.edit_text(text, parse_mode="HTML")@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify_waiters(query: CallbackQuery):    # –∑–¥–µ—Å—å –º–æ–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É    await query.message.edit_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def export_excel(query: CallbackQuery):    rows = get_all_shifts()    wb = Workbook()    ws = wb.active    ws.append(["–û—Ñ–∏—Ü–∏–∞–Ω—Ç","–î–∞—Ç–∞","–ß–∞—Å—ã","–ó–∞–¥–∞—á–∏"])    for name, date, hrs, tasks in rows:        ws.append([name, date, hrs, tasks])    bio = BytesIO()    wb.save(bio)    bio.seek(0)    await query.message.edit_document(FSInputFile(bio, filename="schedule.xlsx"))