import osfrom datetime import datetimefrom io import BytesIOfrom aiogram import Router, Ffrom aiogram.filters import Command, Filterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message,    CallbackQuery,    FSInputFile,    InlineKeyboardMarkup,    InlineKeyboardButton,)from openpyxl import Workbookfrom app.database.sqlite_db import (    get_all_waiters,    add_shift,    set_shift_hours,    set_shift_tasks,    get_all_shifts,)from app.utils.calendar import make_calendaradmin = Router()# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–µ ID –∏ —Ñ–∏–ª—å—Ç—Ä ---ADMIN_ID = [2015462319, 1773695867]def user_is_admin(user_id: int) -> bool:    return user_id in ADMIN_IDclass AdminProtect(Filter):    async def __call__(self, message: Message) -> bool:        return user_is_admin(message.from_user.id)# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---class AdminStates(StatesGroup):    choose_date = State()    waiting_hours = State()    waiting_assign = State()    waiting_tasks = State()# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---@admin.message(Command("admin_menu"), AdminProtect())async def cmd_admin_menu(message: Message, state: FSMContext):    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º FSM –∏ –¥–∞–Ω–Ω—ã–µ    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton(text="üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- –ü–æ–∫–∞–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ —Ä–µ–∂–∏–º–µ ---async def _show_admin_calendar(query: CallbackQuery, mode: str, state: FSMContext):    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã    await state.update_data(mode=mode)    year, month = datetime.today().year, datetime.today().month    calendar_kb = make_calendar(year, month, set())    # –î–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"    if mode == "edit_schedule":        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º        calendar_kb.inline_keyboard.append([            InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")        ])    prompt = (        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤:" if mode == "set_hours"        else "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:"    )    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥–µ–º –¥–∞—Ç—É    await state.set_state(AdminStates.choose_date)    await query.message.edit_text(prompt, reply_markup=calendar_kb)# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é ---@admin.callback_query(AdminProtect(), F.data == "AM_SET_HOURS")async def on_set_hours(query: CallbackQuery, state: FSMContext):    await _show_admin_calendar(query, "set_hours", state)@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def on_edit_schedule(query: CallbackQuery, state: FSMContext):    await _show_admin_calendar(query, "edit_schedule", state)# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã ---@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"), F.state == AdminStates.choose_date)async def on_calendar_date(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    data = await state.get_data()    mode = data.get("mode")    await state.update_data(selected_date=date_str)    if mode == "edit_schedule":        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞        kb = InlineKeyboardMarkup(inline_keyboard=[            [InlineKeyboardButton(text="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", callback_data="AM_ASSIGN_WORKER")],            [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")],        ])        await state.set_state(AdminStates.waiting_assign)        await query.message.edit_text(            f"<b>–î–∞—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:</b> {date_str}",            parse_mode="HTML",            reply_markup=kb        )    else:        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —á–∞—Å–æ–≤        kb = InlineKeyboardMarkup(inline_keyboard=[            [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="AM_BACK_MENU")]        ])        await state.set_state(AdminStates.waiting_hours)        await query.message.edit_text(            f"–î–∞—Ç–∞: {date_str}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:",            reply_markup=kb        )# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤ ---@admin.message(AdminStates.waiting_hours, AdminProtect())async def on_input_hours(message: Message, state: FSMContext):    text = message.text.replace(",", ".").strip()    try:        hours = float(text)    except ValueError:        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")    data = await state.get_data()    date_str = data.get("selected_date")    waiter_tg = data.get("chosen_worker")    # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–∞—Å—ã    add_shift(waiter_tg or 0, date_str)    set_shift_hours(waiter_tg or 0, date_str, hours)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="AM_BACK_MENU")]    ])    await message.answer(f"–ß–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {hours} —á. –Ω–∞ {date_str}.", reply_markup=kb)    await state.clear()# --- –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ ---@admin.callback_query(AdminProtect(), F.data == "AM_ASSIGN_WORKER", F.state == AdminStates.waiting_assign)async def on_assign_worker(query: CallbackQuery, state: FSMContext):    waiters = get_all_waiters()    buttons = [InlineKeyboardButton(text=str(tg), callback_data=f"AM_WORKER|{tg}") for tg in waiters]    kb = InlineKeyboardMarkup(row_width=2)    kb.add(*buttons)    kb.add(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU"))    await state.set_state(AdminStates.waiting_tasks)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:", reply_markup=kb)# --- –í—ã–±–æ—Ä —Ä–∞–±–æ—Ç–Ω–∏–∫–∞: –≤–≤–æ–¥ –∑–∞–¥–∞—á ---@admin.callback_query(AdminProtect(), F.data.startswith("AM_WORKER|"), F.state == AdminStates.waiting_tasks)async def on_worker_selected(query: CallbackQuery, state: FSMContext):    _, tg_id = query.data.split("|", 1)    await state.update_data(chosen_worker=int(tg_id))    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚úîÔ∏è –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="AM_NO_TASKS")],        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")],    ])    await query.message.edit_text(        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ –¥–ª—è —Å–º–µ–Ω—ã –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±–µ–∑ –∑–∞–¥–∞—á:",        reply_markup=kb    )# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á —Ç–µ–∫—Å—Ç–æ–º ---@admin.message(AdminStates.waiting_tasks, AdminProtect())async def on_tasks_input(message: Message, state: FSMContext):    tasks = message.text.strip()    data = await state.get_data()    tg_id = data.get("chosen_worker")    date_str = data.get("selected_date")    add_shift(tg_id, date_str)    set_shift_tasks(tg_id, date_str, tasks)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="AM_BACK_MENU")]    ])    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb)    await state.clear()# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∑–∞–¥–∞—á ---@admin.callback_query(AdminProtect(), F.data == "AM_NO_TASKS", F.state == AdminStates.waiting_tasks)async def on_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    tg_id = data.get("chosen_worker")    date_str = data.get("selected_date")    add_shift(tg_id, date_str)    set_shift_tasks(tg_id, date_str, "")    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="AM_BACK_MENU")]    ])    await query.message.edit_text("–°–º–µ–Ω–∞ –±–µ–∑ –∑–∞–¥–∞—á –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.", reply_markup=kb)    await state.clear()# --- –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def on_back_menu(query: CallbackQuery, state: FSMContext):    await cmd_admin_menu(query.message, state)# --- –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —ç–∫—Å–ø–æ—Ä—Ç ---@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def on_calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    rows = get_all_shifts()    text = "<b>–†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    total = 0    for name, date, hrs, tasks in rows:        pay = hrs * rate        total += pay        text += f"{name} {date}: {hrs}—á √ó {rate} = {pay:.2f}\n"    text += f"\n<b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {total:.2f}</b>"    await query.message.edit_text(text, parse_mode="HTML")@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def on_notify(query: CallbackQuery):    await query.message.edit_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def on_export(query: CallbackQuery):    rows = get_all_shifts()    wb = Workbook()    ws = wb.active    ws.append(["–û—Ñ–∏—Ü–∏–∞–Ω—Ç", "–î–∞—Ç–∞", "–ß–∞—Å—ã", "–ó–∞–¥–∞—á–∏"])    for name, date, hrs, tasks in rows:        ws.append([name, date, hrs, tasks])    buf = BytesIO()    wb.save(buf)    buf.seek(0)    await query.message.edit_document(FSInputFile(buf, filename="schedule.xlsx"))