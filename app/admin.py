import calendarimport osfrom datetime import datetime, timedeltafrom io import BytesIOfrom aiogram import Router, Ffrom aiogram.filters import Command, Filter, StateFilterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message,    CallbackQuery,    InlineKeyboardButton,    InlineKeyboardMarkup,    FSInputFile,)from openpyxl import Workbookfrom app.database.sqlite_db import (    get_all_waiters,    get_waiter_by_tg,    add_shift,    set_shift_hours,    set_shift_tasks,    get_all_shifts,    base,    cur,)# --- Router & access guard -------------------------------------------------------------------admin = Router()ADMIN_IDS = [2015462319, 1773695867]class AdminProtect(Filter):    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∞–ø–¥–µ–π—Ç—ã —Ç–æ–ª—å–∫–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""    async def __call__(self, event) -> bool:  # noqa: D401        user = getattr(event, "from_user", None)        return bool(user and user.id in ADMIN_IDS)# --- –û–±—â–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç—ã ------------------------------------------------------------------------KB_BACK_MENU = InlineKeyboardMarkup(    inline_keyboard=[[InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")]])def make_calendar(year: int, month: int, marked: set[str]) -> InlineKeyboardMarkup:    """–°—Ç—Ä–æ–∏—Ç inline‚Äë–∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏."""    kb: list[list[InlineKeyboardButton]] = []    # –ù–∞–≤–∏–≥–∞—Ü–∏—è (–º–µ—Å—è—Ü –≤–ø–µ—Ä—ë–¥ / –Ω–∞–∑–∞–¥)    kb.append(        [            InlineKeyboardButton(text="‚Äπ", callback_data=f"CAL_PREV|{year}|{month}"),            InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="IGNORE"),            InlineKeyboardButton(text="‚Ä∫", callback_data=f"CAL_NEXT|{year}|{month}"),        ]    )    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏    kb.append(        [InlineKeyboardButton(text=d, callback_data="IGNORE") for d in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]]    )    # –î–Ω–∏ –º–µ—Å—è—Ü–∞    for week in calendar.Calendar(firstweekday=0).monthdayscalendar(year, month):        row: list[InlineKeyboardButton] = []        for day in week:            if day == 0:                row.append(InlineKeyboardButton(text=" ", callback_data="IGNORE"))            else:                ds = f"{year:04d}-{month:02d}-{day:02d}"                mark = "‚úì" if ds in marked else ""                row.append(InlineKeyboardButton(text=f"{day}{mark}", callback_data=f"CAL_DAY|{ds}"))        kb.append(row)    # –û—Ç–º–µ–Ω–∞ –∏ –æ—á–∏—Å—Ç–∫–∞    kb.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")])    kb.append([InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")])    return InlineKeyboardMarkup(inline_keyboard=kb)# --- FSM‚Äë—Å–æ—Å—Ç–æ—è–Ω–∏—è ---------------------------------------------------------------------------class EditSchedStates(StatesGroup):    ChooseDate = State()    ChooseWaiter = State()    ChooseTaskAction = State()    InputPersonalTasks = State()class SetHoursStates(StatesGroup):    ChooseWaiter = State()    ChooseDate = State()    InputStartTime = State()    InputEndTime = State()# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ -------------------------------------------------------------------------async def _safe_delete_message(bot, chat_id: int, msg_id: int):    """–ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –ø–∞–¥–∞–µ–º –Ω–∞ 404."""    try:        await bot.delete_message(chat_id, msg_id)    except Exception:        # —É–∂–µ —É–¥–∞–ª–µ–Ω–æ / –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äì –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º        pass# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -----------------------------------------------------------------------------# 1. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏@admin.callback_query(F.data == "IGNORE")async def _ignore_callback(query: CallbackQuery):  # noqa: D401 ‚Äì aiogram‚Äësignature    await query.answer()# ---------------------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---------------------------------------------------------@admin.message(Command("admin_menu"), AdminProtect())async def admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(        inline_keyboard=[            [InlineKeyboardButton(text="üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],            [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã", callback_data="AM_SET_HOURS")],            [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],            [InlineKeyboardButton(text="üì¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="AM_NOTIFY")],            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],        ]    )    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# ---------------------- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤ ------------------------------------------------------@admin.callback_query(AdminProtect(), F.data == "AM_SET_HOURS")async def start_set_hours(query: CallbackQuery, state: FSMContext):    await state.clear()    buttons = [        [            InlineKeyboardButton(text=get_waiter_by_tg(tg)[1] or str(tg), callback_data=f"SH_WAITER|{tg}")        ]        for tg in get_all_waiters()    ]    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(SetHoursStates.ChooseWaiter)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤:", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseWaiter), F.data.startswith("SH_WAITER|"))async def sh_choose_waiter(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    today = datetime.today()    kb = make_calendar(today.year, today.month, set())    await state.set_state(SetHoursStates.ChooseDate)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ–Ω—ã:", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def sh_choose_date(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    await state.update_data(shift_date=date_str)    await state.set_state(SetHoursStates.InputStartTime)    prompt_msg = await query.message.edit_text(        f"–î–∞—Ç–∞: {date_str}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (HH:MM):"    )    await state.update_data(prompt_msg_id=prompt_msg.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputStartTime))async def sh_input_start(message: Message, state: FSMContext):    data = await state.get_data()    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª—É–∂–µ–±–Ω—ã–π –ø—Ä–æ–º–ø—Ç    if "prompt_msg_id" in data:        await _safe_delete_message(message.bot, message.chat.id, data["prompt_msg_id"])    text = message.text.strip()    try:        start_t = datetime.strptime(text, "%H:%M").time()    except ValueError:        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")        return    await state.update_data(start_time=start_t, user_msg_id=message.message_id)    await state.set_state(SetHoursStates.InputEndTime)    prompt_msg = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã (HH:MM):")    await state.update_data(prompt_msg_id=prompt_msg.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputEndTime))async def sh_input_end(message: Message, state: FSMContext):    data = await state.get_data()    bot = message.bot    chat_id = message.chat.id    # –ß–∏—Å—Ç–∏–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è    for key in ("prompt_msg_id", "user_msg_id"):        if key in data:            await _safe_delete_message(bot, chat_id, data[key])    text = message.text.strip()    try:        end_t = datetime.strptime(text, "%H:%M").time()    except ValueError:        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")        return    dt0 = datetime.combine(datetime.today(), data["start_time"])    dt1 = datetime.combine(datetime.today(), end_t)    if dt1 < dt0:        dt1 += timedelta(days=1)    hrs = (dt1 - dt0).total_seconds() / 3600    waiter_id = get_waiter_by_tg(data["selected_tg"])[0]    add_shift(waiter_id, data["shift_date"])    set_shift_hours(waiter_id, data["shift_date"], hrs)    await message.answer(        f"–°–º–µ–Ω–∞ {data['shift_date']}: {hrs:.2f} —á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",        reply_markup=KB_BACK_MENU,    )    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ü–æ–º —Å–º–µ–Ω—ã    await _safe_delete_message(bot, chat_id, message.message_id)    await state.clear()# ---------------------- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ -----------------------------------------------@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def es_start(query: CallbackQuery, state: FSMContext):    await state.clear()    today = datetime.today()    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(today.year, today.month, marked)    await state.set_state(EditSchedStates.ChooseDate)    await state.update_data(edit_year=today.year, edit_month=today.month)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_PREV|"))async def es_prev_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    y, m = data["edit_year"], data["edit_month"] - 1    if m == 0:        y, m = y - 1, 12    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_NEXT|"))async def es_next_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    y, m = data["edit_year"], data["edit_month"] + 1    if m == 13:        y, m = y + 1, 1    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data == "AM_CLEAR_SCHEDULE")async def es_clear_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    y, m = data["edit_year"], data["edit_month"]    cur.execute("DELETE FROM shifts WHERE date LIKE ?", (f"{y:04d}-{m:02d}-%",))    base.commit()    await query.answer(f"–ì—Ä–∞—Ñ–∏–∫ –∑–∞ {y}-{m:02d} –æ—á–∏—â–µ–Ω", show_alert=True)    kb = make_calendar(y, m, set())    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def es_choose_date(query: CallbackQuery, state: FSMContext):    _, selected = query.data.split("|", 1)    await state.update_data(edit_date=selected)    buttons = [        [InlineKeyboardButton(text=get_waiter_by_tg(t)[1] or str(t), callback_data=f"ES_WAITER|{t}")]        for t in get_all_waiters()    ]    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(EditSchedStates.ChooseWaiter)    await query.message.edit_text(f"–î–∞—Ç–∞: {selected}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data == "CAL_CANCEL")async def es_cancel_edit(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)@admin.callback_query(AdminProtect(), F.data.startswith("ES_WAITER|"))async def es_select_waiter(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    kb = InlineKeyboardMarkup(        inline_keyboard=[            [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="ES_TASKS")],            [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="ES_NO_TASKS")],        ]    )    date = (await state.get_data())["edit_date"]    await state.set_state(EditSchedStates.ChooseTaskAction)    await query.message.edit_text(f"{date} ‚Äî {get_waiter_by_tg(int(tg))[1]}", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data == "ES_NO_TASKS")async def es_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    add_shift(get_waiter_by_tg(data["selected_tg"])[0], data["edit_date"])    await query.message.edit_text("–ó–∞–¥–∞—á –Ω–µ—Ç. –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=KB_BACK_MENU)    await state.clear()@admin.callback_query(AdminProtect(), F.data == "ES_TASKS")async def es_enter_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(EditSchedStates.InputPersonalTasks)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —Å–º–µ–Ω—ã:")@admin.message(AdminProtect(), StateFilter(EditSchedStates.InputPersonalTasks))async def es_save_tasks(message: Message, state: FSMContext):    data = await state.get_data()    wid = get_waiter_by_tg(data["selected_tg"])[0]    add_shift(wid, data["edit_date"])    set_shift_tasks(wid, data["edit_date"], message.text.strip())    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=KB_BACK_MENU)    await state.clear()@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def es_back(query: CallbackQuery, state: FSMContext):    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ),    # –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ (—É—Å–ø–µ—à–Ω–æ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "–°–º–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞" –∏–ª–∏ "–ó–∞–¥–∞—á –Ω–µ—Ç".    await admin_menu(query.message, state)    await _safe_delete_message(query.bot, query.message.chat.id, query.message.message_id):    await admin_menu(query.message, state)# ---------------------- –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞ ------------------------------------------------------@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    total = 0.0    text = "<b>–†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    for name, date, hrs, _ in get_all_shifts():        pay = hrs * rate        total += pay        text += f"{name} {date}: {hrs} —á √ó {rate} = {pay:.2f}\n"    text += f"\n<b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {total:.2f}</b>"    await query.message.edit_text(text, parse_mode="HTML", reply_markup=KB_BACK_MENU)# ---------------------- –û–ø–æ–≤–µ—â–µ–Ω–∏–µ ------------------------------------------------------------@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify(query: CallbackQuery):    await query.message.edit_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=KB_BACK_MENU)# ---------------------- –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel -------------------------------------------------------@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def export_schedule(query: CallbackQuery):    wb = Workbook()    ws = wb.active    ws.append(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–î–∞—Ç–∞", "–ß–∞—Å—ã", "–ó–∞–¥–∞—á–∏"])    for name, date, hrs, tasks in get_all_shifts():        ws.append([name, date, hrs, tasks])    buf = BytesIO()    wb.save(buf)    buf.seek(0)    await query.message.edit_document(FSInputFile(buf, filename="schedule.xlsx"))