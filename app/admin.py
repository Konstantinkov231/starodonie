import calendarimport osfrom datetime import datetime, timedeltafrom io import BytesIOfrom typing import Setfrom aiogram import Router, Ffrom aiogram.filters import Command, Filter, StateFilterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    CallbackQuery,    FSInputFile,    InlineKeyboardButton,    InlineKeyboardMarkup,    Message,)from openpyxl import Workbook# База данных — функции-обёрткиfrom app.database.sqlite_db import (    add_shift,    base,    cur,    get_all_shifts,    get_all_waiters,    get_waiter_by_tg,    set_shift_hours,    set_shift_tasks,)# ==============================================================================#   Router & Admin guard# ==============================================================================admin = Router()ADMIN_IDS = [2015462319, 1773695867]class AdminProtect(Filter):    """Пропускает события только от администраторов."""    async def __call__(self, event) -> bool:  # noqa: D401 – aiogram‑signature        user = getattr(event, "from_user", None)        return bool(user and user.id in ADMIN_IDS)# ==============================================================================#   Общие UI‑элементы# ==============================================================================KB_BACK_MENU = InlineKeyboardMarkup(    inline_keyboard=[[InlineKeyboardButton("⏪ В меню админа", callback_data="AM_BACK_MENU")]])def make_calendar(year: int, month: int, marked: Set[str]) -> InlineKeyboardMarkup:    """Генерирует inline‑календарь для указанного месяца."""    kb: list[list[InlineKeyboardButton]] = []    # ── Заголовок ────────────────────────────────────────────────────────────    kb.append(        [            InlineKeyboardButton("‹", callback_data=f"CAL_PREV|{year}|{month}"),            InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data="IGNORE"),            InlineKeyboardButton("›", callback_data=f"CAL_NEXT|{year}|{month}"),        ]    )    # ── Дни недели ──────────────────────────────────────────────────────────    kb.append([InlineKeyboardButton(d, callback_data="IGNORE") for d in ["Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"]])    # ── Дни месяца ──────────────────────────────────────────────────────────    for week in calendar.Calendar(firstweekday=0).monthdayscalendar(year, month):        row: list[InlineKeyboardButton] = []        for day in week:            if day == 0:                row.append(InlineKeyboardButton(" ", callback_data="IGNORE"))            else:                ds = f"{year:04d}-{month:02d}-{day:02d}"                mark = "✓" if ds in marked else ""                row.append(InlineKeyboardButton(f"{day}{mark}", callback_data=f"CAL_DAY|{ds}"))        kb.append(row)    # ── Низ ─────────────────────────────────────────────────────────────────    kb.append([InlineKeyboardButton("❌ Отмена", callback_data="CAL_CANCEL")])    kb.append([InlineKeyboardButton("🧹 Очистить месяц", callback_data="AM_CLEAR_SCHEDULE")])    return InlineKeyboardMarkup(inline_keyboard=kb)# ==============================================================================#   FSM‑состояния# ==============================================================================class EditSchedStates(StatesGroup):    ChooseDate = State()    ChooseWaiter = State()    ChooseTaskAction = State()    InputPersonalTasks = State()class SetHoursStates(StatesGroup):    ChooseWaiter = State()    ChooseDate = State()    InputStartTime = State()    InputEndTime = State()# ==============================================================================#   Вспомогательные функции# ==============================================================================async def _safe_delete_message(bot, chat_id: int, msg_id: int):    """Пытаемся удалить сообщение; игнорируем любые Telegram‑исключения."""    try:        await bot.delete_message(chat_id, msg_id)    except Exception:        pass# ==============================================================================#   IGNORE – для пустых callback'ов# ==============================================================================@admin.callback_query(F.data == "IGNORE")async def _ignore_callback(query: CallbackQuery):    await query.answer()# ==============================================================================#   Главное меню# ==============================================================================@admin.message(Command("admin_menu"), AdminProtect())async def admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(        inline_keyboard=[            [InlineKeyboardButton("🗓 Изменить график", callback_data="AM_EDIT_SCHEDULE")],            [InlineKeyboardButton("🕒 Установить часы", callback_data="AM_SET_HOURS")],            [InlineKeyboardButton("💰 Рассчитать зарплату", callback_data="AM_CALC_SALARY")],            [InlineKeyboardButton("📢 Информировать", callback_data="AM_NOTIFY")],            [InlineKeyboardButton("📥 Скачать Excel", callback_data="AM_EXPORT")],        ]    )    await message.answer("<b>Меню администратора</b>", parse_mode="HTML", reply_markup=kb)# ==============================================================================#   БЛОК: УСТАНОВКА ЧАСОВ# ==============================================================================@admin.callback_query(AdminProtect(), F.data == "AM_SET_HOURS")async def sh_start(query: CallbackQuery, state: FSMContext):    await state.clear()    buttons = [        [InlineKeyboardButton(get_waiter_by_tg(tg)[1] or str(tg), callback_data=f"SH_WAITER|{tg}")]        for tg in get_all_waiters()    ]    await state.set_state(SetHoursStates.ChooseWaiter)    await query.message.edit_text(        "Выберите сотрудника для установки часов:",        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),    )@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseWaiter), F.data.startswith("SH_WAITER|"))async def sh_choose_waiter(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    today = datetime.today()    kb = make_calendar(today.year, today.month, set())    await state.set_state(SetHoursStates.ChooseDate)    await query.message.edit_text("Выберите дату смены:", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def sh_choose_date(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    await state.update_data(shift_date=date_str)    await state.set_state(SetHoursStates.InputStartTime)    prompt = await query.message.edit_text(f"Дата: {date_str}\nВведите время начала смены (HH:MM):")    await state.update_data(prompt_id=prompt.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputStartTime))async def sh_input_start(message: Message, state: FSMContext):    data = await state.get_data()    if pid := data.get("prompt_id"):        await _safe_delete_message(message.bot, message.chat.id, pid)    try:        start_t = datetime.strptime(message.text.strip(), "%H:%M").time()    except ValueError:        await message.reply("Неверный формат, используйте ЧЧ:ММ")        return    await state.update_data(start_time=start_t, user_msg_id=message.message_id)    await state.set_state(SetHoursStates.InputEndTime)    prompt = await message.answer("Введите время окончания смены (HH:MM):")    await state.update_data(prompt_id=prompt.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputEndTime))async def sh_input_end(message: Message, state: FSMContext):    data = await state.get_data()    # Удаляем промежуточные сообщения    for mid in (data.get("prompt_id"), data.get("user_msg_id")):        if mid:            await _safe_delete_message(message.bot, message.chat.id, mid)    try:        end_t = datetime.strptime(message.text.strip(), "%H:%M").time()    except ValueError:        await message.reply("Неверный формат, используйте ЧЧ:ММ")        return    dt_start = datetime.combine(datetime.today(), data["start_time"])    dt_end = datetime.combine(datetime.today(), end_t)    if dt_end < dt_start:        dt_end += timedelta(days=1)    hours = (dt_end - dt_start).total_seconds() / 3600    waiter_id = get_waiter_by_tg(data["selected_tg"])[0]    add_shift(waiter_id, data["shift_date"])    set_shift_hours(waiter_id, data["shift_date"], hours)    await message.answer(        f"Смена {data['shift_date']}: {hours:.2f} ч сохранена.", reply_markup=KB_BACK_MENU    )    await state.clear()# ==============================================================================#   БЛОК: РЕДАКТИРОВАНИЕ ГРАФИКА# ==============================================================================@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def es_start(query: CallbackQuery, state: FSMContext):    await state.clear()    today = datetime.today()    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(today.year, today.month, marked)    await state.set_state(EditSchedStates.ChooseDate)    await state.update_data(cal_year=today.year, cal_month=today.month)    await query.message.edit_text("Изменить график: выберите дату", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_PREV|"))async def es_prev_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    y, m = data["cal_year"], data["cal_month"] - 1    if m == 0:        y, m = y - 1, 12    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    await state.update_data(cal_year=y, cal_month=m)    await query.message.edit_text("Изменить график: выберите дату", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_NEXT|"))async def es_next_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    y, m = data["cal_year"], data["cal_month"] + 1    if m == 13:        y, m = y + 1, 1    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    await state.update_data(cal_year=y, cal_month=m)    await query.message.edit_text("Изменить график: выберите дату", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data == "AM_CLEAR_SCHEDULE")async def es_clear_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    y, m = data["cal_year"], data["cal_month"]    cur.execute("DELETE FROM shifts WHERE date LIKE ?", (f"{y:04d}-{m:02d}-%",))    base.commit()    await query.answer(f"График за {y}-{m:02d} очищен", show_alert=True)    kb = make_calendar(y, m, set())    await query.message.edit_text("Изменить график: выберите дату", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def es_choose_date(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    await state.update_data(edit_date=date_str)    buttons = [        [InlineKeyboardButton(get_waiter_by_tg(tg)[1] or str(tg), callback_data=f"ES_WAITER|{tg}")]        for tg in get_all_waiters()    ]    await state.set_state(EditSchedStates.ChooseWaiter)    await query.message.edit_text(        f"Дата: {date_str}\nВыберите сотрудника:",        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),    )@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data == "CAL_CANCEL")async def es_cancel(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)# ─────────────────────────────────────────────────────────────────────────────#   После выбора официанта# ─────────────────────────────────────────────────────────────────────────────@admin.callback_query(AdminProtect(), F.data.startswith("ES_WAITER|"))async def es_ask_tasks(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    date_str = (await state.get_data())["edit_date"]    kb = InlineKeyboardMarkup(        inline_keyboard=[            [InlineKeyboardButton("📝 Прописать задачи", callback_data="ES_TASKS")],            [InlineKeyboardButton("❌ Без задач", callback_data="ES_NO_TASKS")],        ]    )    await state.set_state(EditSchedStates.ChooseTaskAction)    await query.message.edit_text(        f"{date_str} — {(get_waiter_by_tg(int(tg))[1] or tg)}", reply_markup=kb    )@admin.callback_query(AdminProtect(), F.data == "ES_NO_TASKS")async def es_save_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    waiter_id = get_waiter_by_tg(data["selected_tg"])[0]    add_shift(waiter_id, data["edit_date"])    await query.message.edit_text("Задач нет. График обновлен.", reply_markup=KB_BACK_MENU)    await state.clear()@admin.callback_query(AdminProtect(), F.data == "ES_TASKS")async def es_ask_personal_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(EditSchedStates.InputPersonalTasks)    prompt = await query.message.edit_text("Введите список задач для смены:")    await state.update_data(prompt_id=prompt.message_id)@admin.message(AdminProtect(), StateFilter(EditSchedStates.InputPersonalTasks))async def es_save_tasks(message: Message, state: FSMContext):    data = await state.get_data()    if pid := data.get("prompt_id"):        await _safe_delete_message(message.bot, message.chat.id, pid)    waiter_id = get_waiter_by_tg(data["selected_tg"])[0]    add_shift(waiter_id, data["edit_date"])    set_shift_tasks(waiter_id, data["edit_date"], message.text.strip())    await message.answer("Задачи сохранены.", reply_markup=KB_BACK_MENU)    await state.clear()# ==============================================================================#   ВОЗВРАТ В МЕНЮ АДМИНА (универсальный)# ==============================================================================@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def back_to_menu(query: CallbackQuery, state: FSMContext):    await admin_menu(query.message, state)    # Удаляем сообщение, вызвавшее возврат    await _safe_delete_message(query.bot, query.message.chat.id, query.message.message_id)# ==============================================================================#   БЛОК: РАСЧЁТ ЗАРПЛАТЫ# ==============================================================================def _make_salary_keyboard(year: int, month: int) -> InlineKeyboardMarkup:    return InlineKeyboardMarkup(        inline_keyboard=[            [InlineKeyboardButton("🧹 Очистить выплаты за месяц", callback_data=f"AM_CLEAR_PAY|{year}|{month:02d}")],            [InlineKeyboardButton("⏪ В меню админа", callback_data="AM_BACK_MENU")],        ]    )@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    total = 0.0    today = datetime.today()    ym_year, ym_month = today.year, today.month    text = "<b>Расчёт зарплаты</b>\n"    for name, date_str, hrs, _ in get_all_shifts():        if hrs is None:            continue        pay = hrs * rate        total += pay        text += f"{name} {date_str}: {hrs:.2f} ч × {rate} = {pay:.2f}\n"    text += f"\n<b>Всего выплатить: {total:.2f}</b>"    await query.message.edit_text(        text,        parse_mode="HTML",        reply_markup=_make_salary_keyboard(ym_year, ym_month),    )# ─────────────────────────────────────────────────────────────────────────────#   Очистка выплат# ─────────────────────────────────────────────────────────────────────────────@admin.callback_query(AdminProtect(), F.data.startswith("AM_CLEAR_PAY|"))async def clear_payments(query: CallbackQuery, state: FSMContext):    _, y_str, m_str = query.data.split("|", 2)    cur.execute("UPDATE shifts SET hours=NULL WHERE date LIKE ?", (f"{y_str}-{m_str}-%",))    base.commit()    await query.answer("Часы за месяц обнулены!", show_alert=True)    await admin_menu(query.message, state)# ==============================================================================#   БЛОК: ИНФОРМИРОВАНИЕ# ==============================================================================@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify_staff(query: CallbackQuery):    await query.message.edit_text("Оповещение отправлено.", reply_markup=KB_BACK_MENU)# ==============================================================================#   БЛОК: ЭКСПОРТ В EXCEL# ==============================================================================@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def export_excel(query: CallbackQuery):    wb = Workbook()    ws = wb.active    ws.append(["Сотрудник", "Дата", "Часы", "Задачи"])    for name, date_str, hrs, tasks in get_all_shifts():        ws.append([name, date_str, hrs, tasks])    buf = BytesIO()    wb.save(buf)    buf.seek(0)    await query.message.edit_document(FSInputFile(buf, filename="schedule.xlsx"))# ==============================================================================#   КОНЕЦ ФАЙЛА# ==============================================================================