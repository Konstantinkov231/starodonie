# app/admin.pyimport osfrom datetime import datetimefrom io import BytesIOfrom aiogram import Router, Ffrom aiogram.filters import Command, Filterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFilefrom openpyxl import Workbookfrom app.database.sqlite_db import (    get_all_waiters,    get_waiter_by_tg,    add_shift,    set_shift_tasks,    get_all_shifts,    base,    cur,)from app.utils.calendar import make_calendaradmin = Router()ADMIN_IDS = [2015462319, 1773695867]class AdminProtect(Filter):    async def __call__(self, message: Message) -> bool:        return message.from_user.id in ADMIN_IDSclass SetHoursStates(StatesGroup):    ChooseWaiter   = State()    ChooseDate     = State()    InputStartTime = State()    InputEndTime   = State()class EditSchedStates(StatesGroup):    ChooseDate         = State()    ChooseWaiter       = State()    ChooseTaskAction   = State()    InputPersonalTasks = State()# 1) –ò–≥–Ω–æ—Ä-–∫–Ω–æ–ø–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è@admin.callback_query(F.data == "IGNORE")async def _ignore_callback(query: CallbackQuery):    await query.answer()# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é@admin.message(Command("admin_menu"), AdminProtect())async def admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton("üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton("üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton("üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton("üì¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤@admin.callback_query(AdminProtect(), F.data == "AM_SET_HOURS")async def start_set_hours(query: CallbackQuery, state: FSMContext):    await state.clear()    buttons = [        [InlineKeyboardButton(            text=get_waiter_by_tg(tg)[1] or str(tg),            callback_data=f"SH_WAITER|{tg}"        )]        for tg in get_all_waiters()    ]    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(SetHoursStates.ChooseWaiter)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤:", reply_markup=kb)@admin.callback_query(    AdminProtect(),    F.state == SetHoursStates.ChooseWaiter,    F.data.startswith("SH_WAITER|"))async def sh_choose_waiter(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    today = datetime.today()    kb = make_calendar(today.year, today.month, set())    await state.set_state(SetHoursStates.ChooseDate)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ–Ω—ã:", reply_markup=kb)@admin.callback_query(    AdminProtect(),    F.state == SetHoursStates.ChooseDate,    F.data.startswith("CAL_DAY|"))async def sh_choose_date(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    await state.update_data(shift_date=date_str)    await state.set_state(SetHoursStates.InputStartTime)    await query.message.edit_text(f"–î–∞—Ç–∞: {date_str}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (HH:MM):")# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫: –∑–∞–ø—É—Å–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def es_start(query: CallbackQuery, state: FSMContext):    await state.clear()    today = datetime.today()    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(today.year, today.month, marked)    # –æ—Ç–º–µ–Ω–∞ –∏ –æ—á–∏—Å—Ç–∏—Ç—å    kb.inline_keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")])    kb.inline_keyboard.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")])    await state.update_data(edit_year=today.year, edit_month=today.month)    await state.set_state(EditSchedStates.ChooseDate)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# Prev –º–µ—Å—è—Ü@admin.callback_query(    AdminProtect(),    F.state == EditSchedStates.ChooseDate,    F.data.startswith("CAL_PREV|"))async def es_prev_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    year, month = data["edit_year"], data["edit_month"] - 1    if month == 0:        year, month = year - 1, 12    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(year, month, marked)    kb.inline_keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")])    kb.inline_keyboard.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")])    await state.update_data(edit_year=year, edit_month=month)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# Next –º–µ—Å—è—Ü@admin.callback_query(    AdminProtect(),    F.state == EditSchedStates.ChooseDate,    F.data.startswith("CAL_NEXT|"))async def es_next_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    year, month = data["edit_year"], data["edit_month"] + 1    if month == 13:        year, month = year + 1, 1    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(year, month, marked)    kb.inline_keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")])    kb.inline_keyboard.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")])    await state.update_data(edit_year=year, edit_month=month)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü@admin.callback_query(    AdminProtect(),    F.state == EditSchedStates.ChooseDate,    F.data == "AM_CLEAR_SCHEDULE")async def es_clear_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    y, m = data["edit_year"], data["edit_month"]    cur.execute("DELETE FROM shifts WHERE date LIKE ?", (f"{y:04d}-{m:02d}-%",))    base.commit()    await query.answer(f"–ì—Ä–∞—Ñ–∏–∫ –∑–∞ {y}-{m:02d} –æ—á–∏—â–µ–Ω", show_alert=True)    kb = make_calendar(y, m, set())    kb.inline_keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")])    kb.inline_keyboard.append([InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")])    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# –í—ã–±–æ—Ä –¥–Ω—è@admin.callback_query(    AdminProtect(),    F.state == EditSchedStates.ChooseDate,    F.data.startswith("CAL_DAY|"))async def es_choose_date(query: CallbackQuery, state: FSMContext):    _, ds = query.data.split("|", 1)    await state.update_data(edit_date=ds)    buttons = [        [InlineKeyboardButton(text=get_waiter_by_tg(t)[1] or str(t), callback_data=f"ES_WAITER|{t}")]        for t in get_all_waiters()    ]    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(EditSchedStates.ChooseWaiter)    await query.message.edit_text(f"–î–∞—Ç–∞: {ds}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=kb)# –û—Ç–º–µ–Ω–∞@admin.callback_query(    AdminProtect(),    F.state == EditSchedStates.ChooseDate,    F.data == "CAL_CANCEL")async def es_cancel_edit(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)# (–¥–∞–ª—å–Ω–µ–π—à–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ES_WAITER, ES_TASKS –∏ —Ç.–ø. –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∑–∞–¥–∞—á–∏ –∏ —Ç. –¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π@admin.callback_query(AdminProtect(), F.data.startswith("ES_WAITER|"))async def es_select_waiter(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="ES_TASKS")],        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="ES_NO_TASKS")],    ])    date = (await state.get_data())['edit_date']    await state.set_state(EditSchedStates.ChooseTaskAction)    await query.message.edit_text(f"{date} ‚Äî {get_waiter_by_tg(int(tg))[1]}", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data == "ES_NO_TASKS")async def es_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    add_shift(get_waiter_by_tg(data['selected_tg'])[0], data['edit_date'])    await query.message.edit_text("–ó–∞–¥–∞—á –Ω–µ—Ç. –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.")    await state.clear()@admin.callback_query(AdminProtect(), F.data == "ES_TASKS")async def es_enter_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(EditSchedStates.InputPersonalTasks)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —Å–º–µ–Ω—ã:")@admin.message(AdminProtect(), F.state == EditSchedStates.InputPersonalTasks)async def es_save_tasks(message: Message, state: FSMContext):    data = await state.get_data()    wid = get_waiter_by_tg(data['selected_tg'])[0]    add_shift(wid, data['edit_date'])    set_shift_tasks(wid, data['edit_date'], message.text.strip())    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")]    ])    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb)    await state.clear()@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def es_back(query: CallbackQuery, state: FSMContext):    await admin_menu(query.message, state)@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    total = 0.0    text = "<b>–†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    for name, date, hrs, _ in get_all_shifts():        pay = hrs * rate        total += pay        text += f"{name} {date}: {hrs} —á √ó {rate} = {pay:.2f}\n"    text += f"\n<b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {total:.2f}</b>"    await query.message.edit_text(text, parse_mode="HTML")@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify(query: CallbackQuery):    await query.message.edit_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def export_schedule(query: CallbackQuery):    wb = Workbook()    ws = wb.active    ws.append(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–î–∞—Ç–∞", "–ß–∞—Å—ã", "–ó–∞–¥–∞—á–∏"])    for name, date, hrs, tasks in get_all_shifts():        ws.append([name, date, hrs, tasks])    buf = BytesIO()    wb.save(buf)    buf.seek(0)    await query.message.edit_document(FSInputFile(buf, filename="schedule.xlsx"))