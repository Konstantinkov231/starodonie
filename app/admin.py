import osfrom datetime import datetime, timedeltafrom io import BytesIOfrom aiogram import Router, Ffrom aiogram.filters import Command, Filterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message,    CallbackQuery,    InlineKeyboardButton,    InlineKeyboardMarkup,    FSInputFile,)from openpyxl import Workbookfrom app.database.sqlite_db import (    get_all_waiters,    get_waiter_by_tg,    add_shift,    set_shift_hours,    get_all_shifts,)admin = Router()# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –∑–∞—â–∏—Ç–∞ ---ADMIN_IDS = [2015462319, 1773695867]def is_admin(user_id: int) -> bool:    return user_id in ADMIN_IDSclass AdminProtect(Filter):    async def __call__(self, message: Message) -> bool:        return is_admin(message.from_user.id)# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã ---class AdminSetHoursStates(StatesGroup):    ChooseWaiter    = State()    ChooseDate      = State()    InputStartTime  = State()    InputEndTime    = State()# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---@admin.message(Command("admin_menu"), AdminProtect())async def cmd_admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã –≤—Å–µ–º", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton(text="üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü) ---@admin.callback_query(AdminProtect(), F.data == "AM_SET_HOURS")async def cmd_set_hours_start(query: CallbackQuery, state: FSMContext):    await state.clear()    # –®–∞–≥ 1: –≤—ã–±–æ—Ä –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞    buttons = [        InlineKeyboardButton(            text=get_waiter_by_tg(tg)[1] or str(tg),            callback_data=f"AH_SELECT_W|{tg}"        )        for tg in get_all_waiters()    ]    kb = InlineKeyboardMarkup(inline_keyboard=[[b] for b in buttons])    await state.set_state(AdminSetHoursStates.ChooseWaiter)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã:", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("AH_SELECT_W|"), F.state == AdminSetHoursStates.ChooseWaiter)async def cmd_set_hours_date(query: CallbackQuery, state: FSMContext):    # –®–∞–≥ 2: –≤—ã–±–æ—Ä –¥–∞—Ç—ã    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    from app.utils.calendar import make_calendar    today = datetime.today()    cal = make_calendar(today.year, today.month, set())    await state.set_state(AdminSetHoursStates.ChooseDate)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ–Ω—ã:", reply_markup=cal)@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"), F.state == AdminSetHoursStates.ChooseDate)async def cmd_set_hours_input_start(query: CallbackQuery, state: FSMContext):    # –®–∞–≥ 3: –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞    _, date_str = query.data.split("|", 1)    await state.update_data(shift_date=date_str)    await state.set_state(AdminSetHoursStates.InputStartTime)    await query.message.edit_text(f"–î–∞—Ç–∞: {date_str}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (HH:MM):")@admin.message(AdminProtect(), F.state == AdminSetHoursStates.InputStartTime)async def cmd_set_hours_received_start(message: Message, state: FSMContext):    # –®–∞–≥ 4: –ø–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª–æ    text = message.text.strip()    try:        t_start = datetime.strptime(text, "%H:%M").time()    except ValueError:        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ 14:30")    await state.update_data(start_time=t_start)    await state.set_state(AdminSetHoursStates.InputEndTime)    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã (HH:MM):")@admin.message(AdminProtect(), F.state == AdminSetHoursStates.InputEndTime)async def cmd_set_hours_received_end(message: Message, state: FSMContext):    # –®–∞–≥ 5: –ø–∞—Ä—Å–∏–º –∫–æ–Ω–µ—Ü, –≤—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º    text = message.text.strip()    data = await state.get_data()    try:        t_end = datetime.strptime(text, "%H:%M").time()    except ValueError:        return await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–∫ 22:15")    t_start = data['start_time']    date_str = data['shift_date']    waiter_tg = data['selected_tg']    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å    dt0 = datetime.combine(datetime.today(), t_start)    dt1 = datetime.combine(datetime.today(), t_end)    if dt1 < dt0:        dt1 += timedelta(days=1)    hours = (dt1 - dt0).total_seconds() / 3600    # –ó–∞–ø–∏—Å—å –≤ –ë–î    waiter_id = get_waiter_by_tg(waiter_tg)[0]    add_shift(waiter_id, date_str)    set_shift_hours(waiter_id, date_str, hours)    await message.answer(        f"‚úÖ –°–º–µ–Ω–∞ {date_str} –¥–ª—è {waiter_tg}: {t_start.strftime('%H:%M')}‚Äì{t_end.strftime('%H:%M')} "        f"({hours:.2f} —á) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."    )    await state.clear()# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---# ‚Ä¶ (–≤–µ—Å—å –±–ª–æ–∫ AM_EDIT_SCHEDULE –∏ –¥–∞–ª–µ–µ –∏–∑ –≤–∞—à–µ–≥–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ admin.py) ‚Ä¶# --- –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã ---@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    rows = get_all_shifts()    text = "<b>–†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    total = 0    for name, date, hrs, _ in rows:        pay = hrs * rate        total += pay        text += f"{name} {date}: {hrs}—á √ó {rate} = {pay:.2f}\n"    text += f"\n<b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {total:.2f}</b>"    await query.message.edit_text(text, parse_mode="HTML")# --- –û–ø–æ–≤–µ—â–µ–Ω–∏–µ ---@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify_waiters(query: CallbackQuery):    await query.message.edit_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")  # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏# --- –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel ---@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def export_schedule(query: CallbackQuery):    rows = get_all_shifts()    wb = Workbook()    ws = wb.active    ws.append(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–î–∞—Ç–∞", "–ß–∞—Å—ã", "–ó–∞–¥–∞—á–∏"])    for name, date, hrs, tasks in rows:        ws.append([name, date, hrs, tasks])    buf = BytesIO()    wb.save(buf)    buf.seek(0)    await query.message.edit_document(document=FSInputFile(buf, filename="schedule.xlsx"))