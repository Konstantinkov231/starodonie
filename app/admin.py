import calendarimport osfrom datetime import datetime, timedeltafrom io import BytesIOfrom typing import Setfrom aiogram import Router, Ffrom aiogram.filters import Command, Filter, StateFilterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    CallbackQuery,    FSInputFile,    InlineKeyboardButton,    InlineKeyboardMarkup,    Message,)from openpyxl import Workbookfrom app.database.sqlite_db import (    add_shift,    base,    cur,    get_all_shifts,    get_all_waiters,    get_waiter_by_tg,    set_shift_hours,    set_shift_tasks,)# --------------------------------------------------------------------------------------#   Router & Admin guard# --------------------------------------------------------------------------------------admin = Router()ADMIN_IDS = [2015462319, 1773695867]class AdminProtect(Filter):    """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (–ø–æ ID Telegram)."""    async def __call__(self, event) -> bool:  # noqa: D401 ‚Äì aiogram‚Äësignature        user = getattr(event, "from_user", None)        return bool(user and user.id in ADMIN_IDS)# --------------------------------------------------------------------------------------#   –û–±—â–∏–µ UI‚Äë—ç–ª–µ–º–µ–Ω—Ç—ã# --------------------------------------------------------------------------------------# –ö–Ω–æ–ø–∫–∞ ¬´–Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é¬ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–æ –º–Ω–æ–≥–∏—Ö –º–µ—Å—Ç–∞—ÖKB_BACK_MENU = InlineKeyboardMarkup(    inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")]    ])def make_calendar(year: int, month: int, marked: Set[str]) -> InlineKeyboardMarkup:    """–°—Ç—Ä–æ–∏–º inline‚Äë–∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ —Å–º–µ–Ω."""    kb: list[list[InlineKeyboardButton]] = []    # --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π ---    kb.append(        [            InlineKeyboardButton(text="‚Äπ", callback_data=f"CAL_PREV|{year}|{month}"),            InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="IGNORE"),            InlineKeyboardButton(text="‚Ä∫", callback_data=f"CAL_NEXT|{year}|{month}"),        ]    )    # --- –°—Ç—Ä–æ–∫–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ ---    kb.append([        InlineKeyboardButton(text=d, callback_data="IGNORE")        for d in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]    ])    # --- –°–∞–º–∏ –¥–Ω–∏ ---    for week in calendar.Calendar(firstweekday=0).monthdayscalendar(year, month):        row: list[InlineKeyboardButton] = []        for day in week:            if day == 0:                row.append(InlineKeyboardButton(text=" ", callback_data="IGNORE"))            else:                ds = f"{year:04d}-{month:02d}-{day:02d}"                mark = "‚úì" if ds in marked else ""                row.append(InlineKeyboardButton(text=f"{day}{mark}", callback_data=f"CAL_DAY|{ds}"))        kb.append(row)    # --- –ù–∏–∂–Ω–∏–π —Ä—è–¥ ---    kb.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")])    kb.append([InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")])    return InlineKeyboardMarkup(inline_keyboard=kb)# --------------------------------------------------------------------------------------#   FSM‚Äë—Å–æ—Å—Ç–æ—è–Ω–∏—è# --------------------------------------------------------------------------------------class EditSchedStates(StatesGroup):    ChooseDate = State()    ChooseWaiter = State()    ChooseTaskAction = State()    InputPersonalTasks = State()class SetHoursStates(StatesGroup):    ChooseWaiter = State()    ChooseDate = State()    InputStartTime = State()    InputEndTime = State()# --------------------------------------------------------------------------------------#   –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏# --------------------------------------------------------------------------------------async def _safe_delete_message(bot, chat_id: int, msg_id: int):    """–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è Telegram‚Äë–∏—Å–∫–ª—é—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ)."""    try:        await bot.delete_message(chat_id, msg_id)    except Exception:        pass# --------------------------------------------------------------------------------------#   –û–±—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã# --------------------------------------------------------------------------------------@admin.callback_query(F.data == "IGNORE")async def _ignore_callback(query: CallbackQuery):    """–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º (–Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã Telegram –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª ¬´–∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç¬ª)."""    await query.answer()# --------------------------------------------------------------------------------------#   –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é# --------------------------------------------------------------------------------------@admin.message(Command("admin_menu"), AdminProtect())async def admin_menu(message: Message, state: FSMContext):    """–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""    await state.clear()    kb = InlineKeyboardMarkup(        inline_keyboard=[            [InlineKeyboardButton(text="üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],            [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã", callback_data="AM_SET_HOURS")],            [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],            [InlineKeyboardButton(text="üì¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="AM_NOTIFY")],            [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],        ]    )    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# ======================================================================================#   –ë–õ–û–ö: –£–°–¢–ê–ù–û–í–ö–ê –ß–ê–°–û–í (AM_SET_HOURS)# ======================================================================================@admin.callback_query(AdminProtect(), F.data == "AM_SET_HOURS")async def sh_start(query: CallbackQuery, state: FSMContext):    """–®–∞–≥ 0: –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""    await state.clear()    buttons = [        [InlineKeyboardButton(text=get_waiter_by_tg(tg)[1] or str(tg), callback_data=f"SH_WAITER|{tg}")]        for tg in get_all_waiters()    ]    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(SetHoursStates.ChooseWaiter)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤:", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseWaiter), F.data.startswith("SH_WAITER|"))async def sh_choose_waiter(query: CallbackQuery, state: FSMContext):    """–®–∞–≥ 1: –≤—ã–±—Ä–∞–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å."""    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    today = datetime.today()    kb = make_calendar(today.year, today.month, set())    await state.set_state(SetHoursStates.ChooseDate)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ–Ω—ã:", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def sh_choose_date(query: CallbackQuery, state: FSMContext):    """–®–∞–≥ 2: –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É ‚Äî –ø—Ä–æ—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞."""    _, date_str = query.data.split("|", 1)    await state.update_data(shift_date=date_str)    await state.set_state(SetHoursStates.InputStartTime)    prompt = await query.message.edit_text(f"–î–∞—Ç–∞: {date_str}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (HH:MM):")    await state.update_data(prompt_id=prompt.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputStartTime))async def sh_input_start(message: Message, state: FSMContext):    """–®–∞–≥ 3: –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞."""    data = await state.get_data()    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π prompt    if prompt_id := data.get("prompt_id"):        await _safe_delete_message(message.bot, message.chat.id, prompt_id)    text = message.text.strip()    try:        start_t = datetime.strptime(text, "%H:%M").time()    except ValueError:        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")        return    await state.update_data(start_time=start_t, user_msg_id=message.message_id)    await state.set_state(SetHoursStates.InputEndTime)    prompt = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã (HH:MM):")    await state.update_data(prompt_id=prompt.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputEndTime))async def sh_input_end(message: Message, state: FSMContext):    """–®–∞–≥ 4: –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–º–µ–Ω—É."""    data = await state.get_data()    bot, chat_id = message.bot, message.chat.id    # –£–¥–∞–ª—è–µ–º prompt –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞    for mid in (data.get("prompt_id"), data.get("user_msg_id")):        if mid:            await _safe_delete_message(bot, chat_id, mid)    text = message.text.strip()    try:        end_t = datetime.strptime(text, "%H:%M").time()    except ValueError:        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")        return    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—ã    dt_start = datetime.combine(datetime.today(), data["start_time"])    dt_end = datetime.combine(datetime.today(), end_t)    if dt_end < dt_start:        dt_end += timedelta(days=1)  # —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å    hours = (dt_end - dt_start).total_seconds() / 3600    waiter_id = get_waiter_by_tg(data["selected_tg"])[0]    add_shift(waiter_id, data["shift_date"])    set_shift_hours(waiter_id, data["shift_date"], hours)    confirm = await message.answer(        f"–°–º–µ–Ω–∞ {data['shift_date']}: {hours:.2f} —á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",        reply_markup=KB_BACK_MENU,    )    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –º–µ–Ω—é    await state.update_data(confirm_id=confirm.message_id)    await state.clear()# ======================================================================================#   –ë–õ–û–ö: –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ì–†–ê–§–ò–ö–ê (AM_EDIT_SCHEDULE)# ======================================================================================@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def es_start(query: CallbackQuery, state: FSMContext):    """–°—Ç–∞—Ä—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞."""    await state.clear()    today = datetime.today()    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(today.year, today.month, marked)    await state.set_state(EditSchedStates.ChooseDate)    await state.update_data(cal_year=today.year, cal_month=today.month)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# --- –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –º–µ—Å—è—Ü–∞–º ---@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_PREV|"))async def es_prev_month(query: CallbackQuery, state: FSMContext):    y, m = (await state.get_data()).values()    m -= 1    if m == 0:        y, m = y - 1, 12    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    await state.update_data(cal_year=y, cal_month=m)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_NEXT|"))async def es_next_month(query: CallbackQuery, state: FSMContext):    y, m = (await state.get_data()).values()    m += 1    if m == 13:        y, m = y + 1, 1    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    await state.update_data(cal_year=y, cal_month=m)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# --- –æ—á–∏—Å—Ç–∫–∞ –º–µ—Å—è—Ü–∞ ---@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data == "AM_CLEAR_SCHEDULE")async def es_clear_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    y, m = data["cal_year"], data["cal_month"]    cur.execute("DELETE FROM shifts WHERE date LIKE ?", (f"{y:04d}-{m:02d}-%",))    base.commit()    await query.answer(f"–ì—Ä–∞—Ñ–∏–∫ –∑–∞ {y}-{m:02d} –æ—á–∏—â–µ–Ω", show_alert=True)    kb = make_calendar(y, m, set())    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# --- –≤—ã–±–æ—Ä –¥–∞—Ç—ã ---@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def es_choose_date(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    await state.update_data(edit_date=date_str)    buttons = [        [InlineKeyboardButton(text=get_waiter_by_tg(t)[1] or str(t), callback_data=f"ES_WAITER|{t}")]        for t in get_all_waiters()    ]    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(EditSchedStates.ChooseWaiter)    await query.message.edit_text(f"–î–∞—Ç–∞: {date_str}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=kb)# --- –æ—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data == "CAL_CANCEL")async def es_cancel_edit(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)# --- –≤—ã–±–æ—Ä –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ ---@admin.callback_query(AdminProtect(), F.data.startswith("ES_WAITER|"))async def es_select_waiter(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    kb = InlineKeyboardMarkup(        inline_keyboard=[            [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="ES_TASKS")],            [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="ES_NO_TASKS")],        ]    )    date_str = (await state.get_data())["edit_date"]    await state.set_state(EditSchedStates.ChooseTaskAction)    await query.message.edit_text(f"{date_str} ‚Äî {get_waiter_by_tg(int(tg))[1]}", reply_markup=kb)# --- –±–µ–∑ –∑–∞–¥–∞—á ---@admin.callback_query(AdminProtect(), F.data == "ES_NO_TASKS")async def es_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    wid = get_waiter_by_tg(data["selected_tg"])[0]    add_shift(wid, data["edit_date"])    confirm = await query.message.edit_text("–ó–∞–¥–∞—á –Ω–µ—Ç. –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.", reply_markup=KB_BACK_MENU)    await state.update_data(confirm_id=confirm.message_id)    await state.clear()# --- –≤–≤–æ–¥ –∑–∞–¥–∞—á ---@admin.callback_query(AdminProtect(), F.data == "ES_TASKS")async def es_enter_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(EditSchedStates.InputPersonalTasks)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —Å–º–µ–Ω—ã:")@admin.message(AdminProtect(), StateFilter(EditSchedStates.InputPersonalTasks))async def es_save_tasks(message: Message, state: FSMContext):    data = await state.get_data()    wid = get_waiter_by_tg(data["selected_tg"])[0]    add_shift(wid, data["edit_date"])    set_shift_tasks(wid, data["edit_date"], message.text.strip())    confirm = await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=KB_BACK_MENU)    await state.update_data(confirm_id=confirm.message_id)    await state.clear()# --- –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def es_back(query: CallbackQuery, state: FSMContext):    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ‚Äë–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω    data = await state.get_data()    if cid := data.get("confirm_id"):        await _safe_delete_message(query.bot, query.message.chat.id, cid)    await admin_menu(query.message, state)# ======================================================================================#   –ë–õ–û–ö: –ü–†–û–ß–ï–ï –ú–ï–ù–Æ# ======================================================================================# --- —Ä–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã ---@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    total = 0.0    text = "<b>–†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    for name, date, hrs, _ in get_all_shifts():        pay = hrs * rate        total += pay        text += f"{name} {date}: {hrs} —á √ó {rate} = {pay:.2f}\n"    text += f"\n<b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {total:.2f}</b>"    await query.message.edit_text(text, parse_mode="HTML", reply_markup=KB_BACK_MENU)# --- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞) ---@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify(query: CallbackQuery):    await query.message.edit_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=KB_BACK_MENU)# --- —ç–∫—Å–ø–æ—Ä—Ç –≤ Excel ---@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def export_schedule(query: CallbackQuery):    wb = Workbook()    ws = wb.active    ws.append(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–î–∞—Ç–∞", "–ß–∞—Å—ã", "–ó–∞–¥–∞—á–∏"])    for name, date, hrs, tasks in get_all_shifts():        ws.append([name, date, hrs, tasks])    buf = BytesIO()    wb.save(buf)    buf.seek(0)    await query.message.answer_document(FSInputFile(buf, filename="schedule.xlsx"), reply_markup=KB_BACK_MENU)