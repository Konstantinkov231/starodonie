# admin.pyfrom datetime import datetimefrom aiogram import Router, Ffrom aiogram.filters import Commandfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message,    CallbackQuery,    InlineKeyboardMarkup,    InlineKeyboardButton,)from app.database.sqlite_db import (    get_all_waiters,    get_waiter_by_tg,    add_shift,    set_shift_hours,    set_shift_tasks,    get_shifts_for,)from app.utils.calendar import make_calendaradmin = Router()# --- Admin IDs ---ADMIN_ID = {2015462319, 1773695867}# --- FSM states ---class AdminStates(StatesGroup):    SET_HOURS_CAL = State()    WAIT_HOURS = State()    EDIT_SELECT_W = State()    EDIT_CAL = State()    WAIT_TASKS = State()# --- Helper ---def is_admin(tg_id: int) -> bool:    return tg_id in ADMIN_ID# --- Main admin menu ---@admin.message(Command("admin_menu"))async def cmd_admin_menu(message: Message, state: FSMContext):    if not is_admin(message.from_user.id):        return    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã –≤—Å–µ–º", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton(text="üóì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì¢ –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- Global hours calendar ---@admin.callback_query(F.data == "AM_SET_HOURS")async def set_hours_start(query: CallbackQuery, state: FSMContext):    if not is_admin(query.from_user.id): return    year, month = datetime.today().year, datetime.today().month    cal = make_calendar(year, month, set())    cal.inline_keyboard.append([        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")    ])    await state.set_state(AdminStates.SET_HOURS_CAL)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —á–∞—Å–æ–≤ –≤—Å–µ–º:", reply_markup=cal)@admin.callback_query(F.data.startswith("CAL_DAY|"), F.state(AdminStates.SET_HOURS_CAL))async def set_hours_date(query: CallbackQuery, state: FSMContext):    _, date = query.data.split("|",1)    await state.update_data(date=date)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")]    ])    await state.set_state(AdminStates.WAIT_HOURS)    await query.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—ã –¥–ª—è –≤—Å–µ—Ö –Ω–∞ {date}:", reply_markup=kb)@admin.message(F.state(AdminStates.WAIT_HOURS))async def set_hours_input(message: Message, state: FSMContext):    data = await state.get_data()    date = data.get("date")    try:        hours = float(message.text.replace(",","."))    except ValueError:        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")    for tg in get_all_waiters():        add_shift(tg, date)        set_shift_hours(tg, date, hours)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")]    ])    await message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {hours} —á. –≤—Å–µ–º –Ω–∞ {date}", reply_markup=kb)    await state.clear()# --- Personal schedule edit ---@admin.callback_query(F.data == "AM_EDIT_SCHEDULE")async def edit_schedule_start(query: CallbackQuery, state: FSMContext):    if not is_admin(query.from_user.id): return    waiters = get_all_waiters()    buttons = []    for tg in waiters:        wid, name = get_waiter_by_tg(tg)        label = name or str(tg)        buttons.append([InlineKeyboardButton(text=label, callback_data=f"AM_SEL_W|{tg}")])    buttons.append([InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")])    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(AdminStates.EDIT_SELECT_W)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:", reply_markup=kb)@admin.callback_query(F.data.startswith("AM_SEL_W|"), F.state(AdminStates.EDIT_SELECT_W))async def edit_schedule_waiter(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|",1)    wid, name = get_waiter_by_tg(int(tg))    shifts = get_shifts_for(int(tg))    year, month = datetime.today().year, datetime.today().month    cal = make_calendar(year, month, set(shifts.keys()))    new_kb = []    for row in cal.inline_keyboard:        new_row = []        for btn in row:            cd = btn.callback_data or ""            if cd.startswith("CAL_DAY|"):                _, d = cd.split("|",1)                new_row.append(InlineKeyboardButton(text=btn.text, callback_data=f"AM_WDAY|{tg}|{d}"))            else:                new_row.append(btn)        new_kb.append(new_row)    new_kb.append([InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_EDIT_SCHEDULE")])    kb2 = InlineKeyboardMarkup(inline_keyboard=new_kb)    await state.set_state(AdminStates.EDIT_CAL)    await query.message.edit_text(f"–ì—Ä–∞—Ñ–∏–∫ {label}:", reply_markup=kb2)@admin.callback_query(F.data.startswith("AM_WDAY|"), F.state(AdminStates.EDIT_CAL))async def edit_schedule_day(query: CallbackQuery, state: FSMContext):    _, tg, date = query.data.split("|",2)    await state.update_data(tg=int(tg), date=date)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üìù –ó–∞–¥–∞—á–∏", callback_data="AM_TASKS")],        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç –∑–∞–¥–∞—á", callback_data="AM_NO_TASKS")],        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f"AM_SEL_W|{tg}")],    ])    await state.set_state(AdminStates.WAIT_TASKS)    await query.message.edit_text(f"{date}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {label}", reply_markup=kb)@admin.callback_query(F.data == "AM_TASKS", F.state(AdminStates.WAIT_TASKS))async def edit_schedule_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(AdminStates.WAIT_HOURS)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏:")@admin.message(F.state(AdminStates.WAIT_HOURS))async def edit_schedule_tasks_input(message: Message, state: FSMContext):    data = await state.get_data()    tg = data.get("tg")    date = data.get("date")    tasks = message.text.strip()    add_shift(tg, date)    set_shift_tasks(tg, date, tasks)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data=f"AM_SEL_W|{tg}")]    ])    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb)    await state.clear()@admin.callback_query(F.data == "AM_NO_TASKS", F.state(AdminStates.WAIT_TASKS))async def edit_schedule_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    tg = data.get("tg")    date = data.get("date")    add_shift(tg, date)    set_shift_tasks(tg, date, "")    await edit_schedule_waiter(query, state)@admin.callback_query(F.data == "AM_BACK_MENU")async def back_menu(query: CallbackQuery, state: FSMContext):    await cmd_admin_menu(query.message, state)