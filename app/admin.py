# admin.pyfrom aiogram import Router, Ffrom aiogram.filters import Command, Filterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message,    CallbackQuery,    InlineKeyboardMarkup,    InlineKeyboardButton,)from app.database.sqlite_db import (    get_all_waiters,    add_shift,    set_shift_tasks,)admin = Router()# --- Admin IDs and filter ---ADMIN_ID = {2015462319, 1773695867}def is_admin(tg_id: int) -> bool:    return tg_id in ADMIN_IDclass AdminProtect(Filter):    async def __call__(self, query: CallbackQuery | Message) -> bool:        user_id = query.from_user.id        return is_admin(user_id)# --- FSM states ---class AdminStates(StatesGroup):    SET_GLOBAL_HOURS = State()    WAIT_GLOBAL_INPUT = State()    EDIT_DATE = State()    SELECT_WORKER = State()    ENTER_TASKS = State()    WAIT_TASKS_INPUT = State()# --- Main admin menu ---@admin.message(Command("admin_menu"), AdminProtect())async def cmd_admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã –≤—Å–µ–º", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton(text="üóì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì¢ –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- Set hours for all staff ---@admin.callback_query(AdminProtect(), F.data == "AM_SET_HOURS")async def start_global_hours(query: CallbackQuery, state: FSMContext):    year, month = datetime.today().year, datetime.today().month    cal = make_calendar(year, month, set())    cal.inline_keyboard.append([        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")    ])    await state.set_state(AdminStates.SET_GLOBAL_HOURS)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤ –≤—Å–µ–º:", reply_markup=cal)@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"), F.state(AdminStates.SET_GLOBAL_HOURS))async def global_hours_date(query: CallbackQuery, state: FSMContext):    _, date = query.data.split("|",1)    await state.update_data(date=date)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")]    ])    await state.set_state(AdminStates.WAIT_GLOBAL_INPUT)    await query.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –Ω–∞ {date}:", reply_markup=kb)@admin.message(AdminProtect(), F.state(AdminStates.WAIT_GLOBAL_INPUT))async def global_hours_input(message: Message, state: FSMContext):    data = await state.get_data()    date = data.get("date")    try:        hours = float(message.text.replace(",","."))    except ValueError:        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")    for tg in get_all_waiters():        add_shift(tg, date)        set_shift_tasks(tg, date, "")    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="AM_BACK_MENU")]    ])    await message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {hours} —á. –≤—Å–µ–º –Ω–∞ {date}.", reply_markup=kb)    await state.clear()# --- Edit personal schedule ---@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def edit_schedule_start(query: CallbackQuery, state: FSMContext):    year, month = datetime.today().year, datetime.today().month    cal = make_calendar(year, month, set())    cal.inline_keyboard.append([        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")    ])    await state.set_state(AdminStates.EDIT_DATE)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=cal)@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"), F.state(AdminStates.EDIT_DATE))async def edit_select_date(query: CallbackQuery, state: FSMContext):    _, date = query.data.split("|",1)    await state.update_data(date=date)    buttons = []    for tg in get_all_waiters():        wid, name = get_waiter_by_tg(tg)        label = name or f"ID:{tg}"        buttons.append([            InlineKeyboardButton(text=label, callback_data=f"AM_SEL_W|{tg}")        ])    buttons.append([        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–µ", callback_data="AM_EDIT_SCHEDULE")    ])    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(AdminStates.SELECT_WORKER)    await query.message.edit_text(f"–î–∞—Ç–∞: {date}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("AM_SEL_W|"), F.state(AdminStates.SELECT_WORKER))async def edit_select_worker(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|",1)    await state.update_data(tg=int(tg))    data = await state.get_data()    date = data.get("date")    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="AM_ENTER_TASKS")],        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="AM_NO_TASKS")],        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data=f"CAL_DAY|{date}")],    ])    await state.set_state(AdminStates.ENTER_TASKS)    await query.message.edit_text(f"{date}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {tg}. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏?", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data == "AM_ENTER_TASKS", F.state(AdminStates.ENTER_TASKS))async def enter_tasks_start(query: CallbackQuery, state: FSMContext):    await state.set_state(AdminStates.WAIT_TASKS_INPUT)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:")@admin.message(AdminProtect(), F.state(AdminStates.WAIT_TASKS_INPUT))async def tasks_input(message: Message, state: FSMContext):    data = await state.get_data()    tg = data.get("tg")    date = data.get("date")    tasks = message.text.strip()    add_shift(tg, date)    set_shift_tasks(tg, date, tasks)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="AM_BACK_MENU")]    ])    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb)    await state.clear()@admin.callback_query(AdminProtect(), F.data == "AM_NO_TASKS", F.state(AdminStates.ENTER_TASKS))async def no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    tg = data.get("tg")    date = data.get("date")    add_shift(tg, date)    set_shift_tasks(tg, date, "")    await back_menu(query, state)@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def back_menu(query: CallbackQuery, state: FSMContext):    await state.clear()    await cmd_admin_menu(query.message, state)# calendar_router.pyfrom aiogram import Routerfrom aiogram.filters import Commandfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import CallbackQuery, Messagefrom app.admin import is_admincalendar_router = Router()class FillName(StatesGroup):    waiting_for_name = State()@calendar_router.message(Command("calendar"))async def cmd_calendar(message: Message, state: FSMContext):    waiter = get_waiter_by_tg(message.from_user.id)    if not waiter:        add_waiter(message.from_user.id)        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")        await state.set_state(FillName.waiting_for_name)        return    waiter_id, name = waiter    if not name:        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")        await state.set_state(FillName.waiting_for_name)        return    await _show_calendar(message, waiter_id)@calendar_router.message(F.state(FillName.waiting_for_name))async def process_name(message: Message, state: FSMContext):    from app.database.sqlite_db import cur, base    cur.execute("UPDATE waiters SET name = ? WHERE tg_id = ?", (message.text.strip(), message.from_user.id))    base.commit()    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text.strip()}! –í–æ—Ç –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å:")    waiter_id = get_waiter_id_by_tg(message.from_user.id)    await state.clear()    await _show_calendar(message, waiter_id)async def _show_calendar(event_source, waiter_id: int, year: int=None, month: int=None):    today = datetime.today()    year = year or today.year    month = month or today.month    shifts = get_shifts_for(waiter_id)    kb = make_calendar(year, month, set(shifts.keys()))    await event_source.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)@calendar_router.callback_query(lambda q: not is_admin(q.from_user.id) and q.data.startswith("CAL_"))async def calendar_navigation(query: CallbackQuery, state: FSMContext):    parts = query.data.split("|")    action = parts[0]    waiter_id = get_waiter_id_by_tg(query.from_user.id)    if action == "CAL_CANCEL":        await query.message.delete()        return    if action in ("CAL_PREV","CAL_NEXT"):        year, month = map(int, parts[1:])        if action == "CAL_PREV":            month -= 1            if month < 1:                month = 12                year -= 1        else:            month += 1            if month > 12:                month = 1                year += 1        shifts = get_shifts_for(waiter_id)        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=make_calendar(year, month, set(shifts.keys())))        return    if action == "CAL_DAY":        date = parts[1]        info = get_shifts_for(waiter_id).get(date)        if info:            hours = info.get("hours", 0)            tasks = info.get("tasks", "")                        text = f"–°–º–µ–Ω–∞ –Ω–∞ {date}: {hours}—á–ó–∞–¥–∞—á–∏:{tasks or '–Ω–µ—Ç'}"        else:            text = "–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–º–µ–Ω –∏ –∑–∞–¥–∞—á."        await query.message.delete()        await query.message.answer(text)from datetime import datetimefrom aiogram import Routerfrom aiogram.filters import Commandfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import CallbackQuery, Messagefrom app.database.sqlite_db import (    get_waiter_by_tg,    get_waiter_id_by_tg,    add_waiter,    get_shifts_for,)from app.utils.calendar import make_calendarcalendar_router = Router()class FillName(StatesGroup):    waiting_for_name = State()@calendar_router.message(Command("calendar"))async def cmd_calendar(message: Message, state: FSMContext):    waiter = get_waiter_by_tg(message.from_user.id)    if not waiter:        add_waiter(message.from_user.id)        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")        await state.set_state(FillName.waiting_for_name)        return    waiter_id, name = waiter    if not name:        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")        await state.set_state(FillName.waiting_for_name)        return    await _show_calendar(message, waiter_id)@calendar_router.message(F.state(FillName.waiting_for_name))async def process_name(message: Message, state: FSMContext):    from app.database.sqlite_db import cur, base    cur.execute("UPDATE waiters SET name = ? WHERE tg_id = ?", (message.text.strip(), message.from_user.id))    base.commit()    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {message.text.strip()}! –í–æ—Ç –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å:")    waiter_id = get_waiter_id_by_tg(message.from_user.id)    await state.clear()    await _show_calendar(message, waiter_id)async def _show_calendar(event_source, waiter_id: int, year: int=None, month: int=None):    today = datetime.today()    year = year or today.year    month = month or today.month    shifts = get_shifts_for(waiter_id)    kb = make_calendar(year, month, set(shifts.keys()))    await event_source.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)@calendar_router.callback_query(F.data.startswith("CAL_"))async def calendar_navigation(query: CallbackQuery, state: FSMContext):    parts = query.data.split("|")    action = parts[0]    waiter_id = get_waiter_id_by_tg(query.from_user.id)    if action == "CAL_CANCEL":        await query.message.delete()        return    if action in ("CAL_PREV","CAL_NEXT"):        year, month = map(int, parts[1:])        if action == "CAL_PREV":            month -= 1            if month < 1:                month = 12                year -= 1        else:            month += 1            if month > 12:                month = 1                year += 1        shifts = get_shifts_for(waiter_id)        await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=make_calendar(year, month, set(shifts.keys())))        return    if action == "CAL_DAY":        date = parts[1]        info = get_shifts_for(waiter_id).get(date)        if info:            hours = info.get("hours", 0)            tasks = info.get("tasks", "")            text = f"–°–º–µ–Ω–∞ –Ω–∞ {date}: {hours}—á\n–ó–∞–¥–∞—á–∏:\n{tasks or '–Ω–µ—Ç'}"        else:            text = "–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–º–µ–Ω –∏ –∑–∞–¥–∞—á."        await query.message.delete()        await query.message.answer(text)