import osfrom datetime import datetimefrom io import BytesIOfrom aiogram import Router, Ffrom aiogram.filters import Command, Filterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message,    CallbackQuery,    FSInputFile,    InlineKeyboardMarkup,    InlineKeyboardButton,)from openpyxl import Workbookfrom app.database.sqlite_db import (    get_all_waiters,    add_shift,    set_shift_hours,    set_shift_tasks,    get_all_shifts,)from app.utils.calendar import make_calendaradmin = Router()# --- Admin IDs and filter ---ADMIN_ID = [2015462319, 1773695867]def user_is_admin(user_id: int) -> bool:    return user_id in ADMIN_IDclass AdminProtect(Filter):    async def __call__(self, message: Message) -> bool:        return user_is_admin(message.from_user.id)# --- FSM states ---class AdminStates(StatesGroup):    choose_hours_date = State()    choose_edit_date = State()    waiting_hours = State()    waiting_assign = State()    waiting_tasks = State()    enter_tasks = State()# --- Main admin menu ---@admin.message(Command("admin_menu"), AdminProtect())async def cmd_admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton(text="üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await message.answer(text="<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- Calendar for setting hours ---@admin.callback_query(AdminProtect(), F.data == "AM_SET_HOURS")async def on_set_hours(query: CallbackQuery, state: FSMContext):    await state.clear()    year, month = datetime.today().year, datetime.today().month    cal = make_calendar(year, month, set())    cal.inline_keyboard.append([        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")    ])    await state.set_state(AdminStates.choose_hours_date)    await query.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Å–æ–≤:", reply_markup=cal)# --- Calendar for editing schedule ---@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def on_edit_schedule(query: CallbackQuery, state: FSMContext):    await state.clear()    year, month = datetime.today().year, datetime.today().month    cal = make_calendar(year, month, set())    cal.inline_keyboard.append([        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")    ])    await state.set_state(AdminStates.choose_edit_date)    await query.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=cal)# --- Handle date for hours ---@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"), F.state(AdminStates.choose_hours_date))async def on_hours_date(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    await state.update_data(selected_date=date_str)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="AM_BACK_MENU")]    ])    await state.set_state(AdminStates.waiting_hours)    await query.message.edit_text(text=f"–î–∞—Ç–∞: {date_str}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤:", reply_markup=kb)# --- Handle date for edit schedule ---@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"), F.state(AdminStates.choose_edit_date))async def on_edit_date(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    await state.update_data(selected_date=date_str)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="AM_ASSIGN_WORKER")],        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="AM_BACK_MENU")],    ])    await state.set_state(AdminStates.waiting_assign)    await query.message.edit_text(text=f"<b>–î–∞—Ç–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞: {date_str}</b>", parse_mode="HTML", reply_markup=kb)# --- Input hours ---@admin.message(AdminStates.waiting_hours, AdminProtect())async def on_input_hours(message: Message, state: FSMContext):    text = message.text.replace(",", ".").strip()    try:        hours = float(text)    except ValueError:        return await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")    data = await state.get_data()    date_str = data.get("selected_date")    add_shift(0, date_str)    set_shift_hours(0, date_str, hours)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="AM_BACK_MENU")]    ])    await message.answer(text=f"–ß–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {hours} —á. –Ω–∞ {date_str}.", reply_markup=kb)    await state.clear()# --- Assign worker selection ---@admin.callback_query(AdminProtect(), F.data == "AM_ASSIGN_WORKER", F.state(AdminStates.waiting_assign))async def on_assign_worker(query: CallbackQuery, state: FSMContext):    waiters = get_all_waiters()    buttons = [InlineKeyboardButton(text=str(tg), callback_data=f"AM_CHOOSE_WORKER|{tg}") for tg in waiters]    kb = InlineKeyboardMarkup(row_width=2)    kb.add(*buttons)    kb.add(InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU"))    await state.set_state(AdminStates.waiting_tasks)    await query.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=kb)# --- Confirm tasks ---@admin.callback_query(AdminProtect(), F.data.startswith("AM_CHOOSE_WORKER|"), F.state(AdminStates.waiting_tasks))async def on_worker_chosen(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|", 1)    await state.update_data(chosen_worker=int(tg))    date_str = (await state.get_data()).get("selected_date")    text = f"{date_str}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {tg} –Ω–∞–∑–Ω–∞—á–µ–Ω, –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏?"    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üìù To-do", callback_data="AM_ENTER_TASKS")],        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="AM_RETURN_CALENDAR")],    ])    await state.set_state(AdminStates.enter_tasks)    await query.message.edit_text(text=text, reply_markup=kb)# --- Enter tasks ---@admin.callback_query(AdminProtect(), F.data == "AM_ENTER_TASKS", F.state(AdminStates.enter_tasks))async def on_enter_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(AdminStates.waiting_tasks)    await query.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:")@admin.message(AdminStates.waiting_tasks, AdminProtect())async def on_tasks_input(message: Message, state: FSMContext):    tasks = message.text.strip()    data = await state.get_data()    tg = data.get("chosen_worker")    date_str = data.get("selected_date")    add_shift(tg, date_str)    set_shift_tasks(tg, date_str, tasks)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")]    ])    await message.answer(text="–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb)    await state.clear()# --- Return to calendar (no tasks) ---@admin.callback_query(AdminProtect(), F.data == "AM_RETURN_CALENDAR")async def on_return_calendar(query: CallbackQuery, state: FSMContext):    year, month = datetime.today().year, datetime.today().month    cal = make_calendar(year, month, set())    cal.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")])    await state.set_state(AdminStates.choose_edit_date)    await query.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=cal)# --- Back to menu ---@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def on_back_menu(query: CallbackQuery, state: FSMContext):    await cmd_admin_menu(query.message, state)# --- Other actions ---@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def on_calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    rows = get_all_shifts()    text = "<b>–†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    total = 0    for name, date, hrs, tasks in rows:        pay = hrs * rate        total += pay        text += f"{name} {date}: {hrs}—á √ó {rate} = {pay:.2f}\n"    text += f"\n<b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {total:.2f}</b>"    await query.message.edit_text(text=text, parse_mode="HTML")@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def on_notify(query: CallbackQuery):    await query.message.edit_text(text="–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def on_export(query: CallbackQuery):    rows = get_all_shifts()    wb = Workbook()    ws = wb.active    ws.append(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–î–∞—Ç–∞", "–ß–∞—Å—ã", "–ó–∞–¥–∞—á–∏"])    for name, date, hrs, tasks in rows:        ws.append([name, date, hrs, tasks])    buf = BytesIO()    wb.save(buf)    buf.seek(0)    await query.message.edit_document(document=FSInputFile(buf, filename="schedule.xlsx"))