# app/admin.pyimport calendarimport osfrom datetime import datetimefrom io import BytesIOfrom aiogram import Router, Ffrom aiogram.filters import Command, Filterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message,    CallbackQuery,    InlineKeyboardButton,    InlineKeyboardMarkup,    FSInputFile,)from openpyxl import Workbookfrom app.database.sqlite_db import (    get_all_waiters,    get_waiter_by_tg,    add_shift,    set_shift_tasks,    get_all_shifts,    base,    cur,)admin = Router()ADMIN_IDS = [2015462319, 1773695867]class AdminProtect(Filter):    async def __call__(self, message: Message) -> bool:        return message.from_user.id in ADMIN_IDS# === Inline calendar builder ===def make_calendar(year: int, month: int, marked: set[str]) -> InlineKeyboardMarkup:    kb: list[list[InlineKeyboardButton]] = []    # header navigation    kb.append([        InlineKeyboardButton(text="‚Äπ", callback_data=f"CAL_PREV|{year}|{month}"),        InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="IGNORE"),        InlineKeyboardButton(text="‚Ä∫", callback_data=f"CAL_NEXT|{year}|{month}"),    ])    # weekdays row    kb.append([        InlineKeyboardButton(text=d, callback_data="IGNORE")        for d in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]    ])    # days    for week in calendar.Calendar(firstweekday=0).monthdayscalendar(year, month):        row: list[InlineKeyboardButton] = []        for day in week:            if day == 0:                row.append(InlineKeyboardButton(text=" ", callback_data="IGNORE"))            else:                ds = f"{year:04d}-{month:02d}-{day:02d}"                mark = "‚úì" if ds in marked else ""                row.append(                    InlineKeyboardButton(text=f"{day}{mark}", callback_data=f"CAL_DAY|{ds}")                )        kb.append(row)    # cancel button    kb.append([        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")    ])    return InlineKeyboardMarkup(inline_keyboard=kb)# 1) IGNORE unhandled clicks@admin.callback_query(F.data == "IGNORE")async def _ignore_callback(query: CallbackQuery):    await query.answer()# FSM states for editing scheduleclass EditSchedStates(StatesGroup):    ChooseDate = State()    ChooseWaiter = State()    ChooseTaskAction = State()    InputPersonalTasks = State()# --- MAIN MENU ---@admin.message(Command("admin_menu"), AdminProtect())async def admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- EDIT SCHEDULE: OPEN CALENDAR ---@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def es_start(query: CallbackQuery, state: FSMContext):    await state.clear()    today = datetime.today()    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(today.year, today.month, marked)    # –¥–æ–±–∞–≤–ª—è–µ–º —Å–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã    kb.inline_keyboard.append([        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")    ])    # –ø–æ—Ç–æ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏    kb.inline_keyboard.append([        InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")    ])    await state.update_data(edit_year=today.year, edit_month=today.month)    await state.set_state(EditSchedStates.ChooseDate)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# --- Prev month ---@admin.callback_query(    AdminProtect(),    F.state == EditSchedStates.ChooseDate,    F.data.startswith("CAL_PREV|"))async def es_prev_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    year, month = data["edit_year"], data["edit_month"] - 1    if month == 0:        year, month = year - 1, 12    # –°–Ω–æ–≤–∞ –æ—Ç–º–µ—á–∞–µ–º —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Å–º–µ–Ω—ã    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(year, month, marked)    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∏ –æ—á–∏—Å—Ç–∫–∏    kb.inline_keyboard.append([        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")    ])    kb.inline_keyboard.append([        InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")    ])    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –≥–æ–¥/–º–µ—Å—è—Ü    await state.update_data(edit_year=year, edit_month=month)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# --- Next month ---@admin.callback_query(    AdminProtect(),    F.state == EditSchedStates.ChooseDate,    F.data.startswith("CAL_NEXT|"))async def es_next_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    year, month = data["edit_year"], data["edit_month"] + 1    if month == 13:        year, month = year + 1, 1    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(year, month, marked)    # –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –∏ –æ—á–∏—Å—Ç–∫–∏    kb.inline_keyboard.append([        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")    ])    kb.inline_keyboard.append([        InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")    ])    await state.update_data(edit_year=year, edit_month=month)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# --- Clear month ---@admin.callback_query(    AdminProtect(),    F.state == EditSchedStates.ChooseDate,    F.data == "AM_CLEAR_SCHEDULE")async def es_clear_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    y, m = data["edit_year"], data["edit_month"]    cur.execute("DELETE FROM shifts WHERE date LIKE ?", (f"{y:04d}-{m:02d}-%",))    base.commit()    await query.answer(f"–ì—Ä–∞—Ñ–∏–∫ –∑–∞ {y}-{m:02d} –æ—á–∏—â–µ–Ω", show_alert=True)    kb = make_calendar(y, m, set())    kb.inline_keyboard.append([        InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")    ])    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)# --- Select a day ---@admin.callback_query(    AdminProtect(),    F.state == EditSchedStates.ChooseDate,    F.data.startswith("CAL_DAY|"))async def es_choose_date(query: CallbackQuery, state: FSMContext):    _, selected_date = query.data.split("|", 1)    await state.update_data(edit_date=selected_date)    buttons = [        [InlineKeyboardButton(text=get_waiter_by_tg(t)[1] or str(t), callback_data=f"ES_WAITER|{t}")]        for t in get_all_waiters()    ]    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(EditSchedStates.ChooseWaiter)    await query.message.edit_text(        f"–î–∞—Ç–∞: {selected_date}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",        reply_markup=kb    )# --- Cancel editing ---@admin.callback_query(    AdminProtect(),    F.state == EditSchedStates.ChooseDate,    F.data == "CAL_CANCEL")async def es_cancel_edit(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)# (–¥–∞–ª–µ–µ –≤–∞—à–∏ ES_WAITER / ES_TASKS / ES_NO_TASKS / ES_SAVE_TASKS, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∑–∞–¥–∞—á–∏ –∏ —Ç. –¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π@admin.callback_query(AdminProtect(), F.data.startswith("ES_WAITER|"))async def es_select_waiter(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="ES_TASKS")],        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="ES_NO_TASKS")],    ])    date = (await state.get_data())['edit_date']    await state.set_state(EditSchedStates.ChooseTaskAction)    await query.message.edit_text(f"{date} ‚Äî {get_waiter_by_tg(int(tg))[1]}", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data == "ES_NO_TASKS")async def es_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    add_shift(get_waiter_by_tg(data['selected_tg'])[0], data['edit_date'])    await query.message.edit_text("–ó–∞–¥–∞—á –Ω–µ—Ç. –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.")    await state.clear()@admin.callback_query(AdminProtect(), F.data == "ES_TASKS")async def es_enter_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(EditSchedStates.InputPersonalTasks)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —Å–º–µ–Ω—ã:")@admin.message(AdminProtect(), F.state == EditSchedStates.InputPersonalTasks)async def es_save_tasks(message: Message, state: FSMContext):    data = await state.get_data()    wid = get_waiter_by_tg(data['selected_tg'])[0]    add_shift(wid, data['edit_date'])    set_shift_tasks(wid, data['edit_date'], message.text.strip())    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")]    ])    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb)    await state.clear()@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def es_back(query: CallbackQuery, state: FSMContext):    await admin_menu(query.message, state)@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    total = 0.0    text = "<b>–†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    for name, date, hrs, _ in get_all_shifts():        pay = hrs * rate        total += pay        text += f"{name} {date}: {hrs} —á √ó {rate} = {pay:.2f}\n"    text += f"\n<b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {total:.2f}</b>"    await query.message.edit_text(text, parse_mode="HTML")@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify(query: CallbackQuery):    await query.message.edit_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def export_schedule(query: CallbackQuery):    wb = Workbook()    ws = wb.active    ws.append(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–î–∞—Ç–∞", "–ß–∞—Å—ã", "–ó–∞–¥–∞—á–∏"])    for name, date, hrs, tasks in get_all_shifts():        ws.append([name, date, hrs, tasks])    buf = BytesIO()    wb.save(buf)    buf.seek(0)    await query.message.edit_document(FSInputFile(buf, filename="schedule.xlsx"))# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞, –∑–∞–¥–∞—á–∏ –∏ —Ç. –¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π@admin.callback_query(AdminProtect(), F.data.startswith("ES_WAITER|"))async def es_select_waiter(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|", 1)    await state.update_data(selected_tg=int(tg))    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="ES_TASKS")],        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="ES_NO_TASKS")],    ])    date = (await state.get_data())['edit_date']    await state.set_state(EditSchedStates.ChooseTaskAction)    await query.message.edit_text(f"{date} ‚Äî {get_waiter_by_tg(int(tg))[1]}", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data == "ES_NO_TASKS")async def es_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    add_shift(get_waiter_by_tg(data['selected_tg'])[0], data['edit_date'])    await query.message.edit_text("–ó–∞–¥–∞—á –Ω–µ—Ç. –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω.")    await state.clear()@admin.callback_query(AdminProtect(), F.data == "ES_TASKS")async def es_enter_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(EditSchedStates.InputPersonalTasks)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —Å–º–µ–Ω—ã:")@admin.message(AdminProtect(), F.state == EditSchedStates.InputPersonalTasks)async def es_save_tasks(message: Message, state: FSMContext):    data = await state.get_data()    wid = get_waiter_by_tg(data['selected_tg'])[0]    add_shift(wid, data['edit_date'])    set_shift_tasks(wid, data['edit_date'], message.text.strip())    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")]    ])    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb)    await state.clear()@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def es_back(query: CallbackQuery, state: FSMContext):    await admin_menu(query.message, state)@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    total = 0.0    text = "<b>–†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    for name, date, hrs, _ in get_all_shifts():        pay = hrs * rate        total += pay        text += f"{name} {date}: {hrs} —á √ó {rate} = {pay:.2f}\n"    text += f"\n<b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {total:.2f}</b>"    await query.message.edit_text(text, parse_mode="HTML")@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify(query: CallbackQuery):    await query.message.edit_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def export_schedule(query: CallbackQuery):    wb = Workbook()    ws = wb.active    ws.append(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–î–∞—Ç–∞", "–ß–∞—Å—ã", "–ó–∞–¥–∞—á–∏"])    for name, date, hrs, tasks in get_all_shifts():        ws.append([name, date, hrs, tasks])    buf = BytesIO()    wb.save(buf)    buf.seek(0)    await query.message.edit_document(FSInputFile(buf, filename="schedule.xlsx"))