# admin.pyfrom datetime import datetimefrom io import BytesIOfrom aiogram import Router, Ffrom aiogram.filters import Command, Filterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message,    CallbackQuery,    FSInputFile,    InlineKeyboardMarkup,    InlineKeyboardButton,)from openpyxl import Workbookfrom app.database.sqlite_db import (    get_all_waiters,    get_waiter_by_tg,    get_waiter_id_by_tg,    add_shift,    set_shift_tasks,    get_all_shifts,)from app.utils.calendar import make_calendaradmin = Router()# --- Admin IDs and filter ---ADMIN_ID = {2015462319, 1773695867}def is_admin(tg_id: int) -> bool:    return tg_id in ADMIN_IDclass AdminProtect(Filter):    async def __call__(self, query: CallbackQuery | Message) -> bool:        return is_admin(query.from_user.id)# --- FSM states ---class AdminStates(StatesGroup):    SET_GLOBAL_HOURS = State()    WAIT_GLOBAL_INPUT = State()    EDIT_DATE = State()    SELECT_WORKER = State()    ENTER_TASKS = State()    WAIT_TASKS_INPUT = State()# --- Main admin menu ---@admin.message(Command("admin_menu"), AdminProtect())async def cmd_admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã –≤—Å–µ–º", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton(text="üóì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì¢ –û–ø–æ–≤–µ—Å—Ç–∏—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- Set hours for all staff ---@admin.callback_query(AdminProtect(), F.data == "AM_SET_HOURS")async def start_global_hours(query: CallbackQuery, state: FSMContext):    year, month = datetime.today().year, datetime.today().month    cal = make_calendar(year, month, set())    cal.inline_keyboard.append([        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")    ])    await state.set_state(AdminStates.SET_GLOBAL_HOURS)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=cal)@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"), F.state(AdminStates.SET_GLOBAL_HOURS))async def global_hours_date(query: CallbackQuery, state: FSMContext):    _, date = query.data.split("|",1)    await state.update_data(date=date)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")]    ])    await state.set_state(AdminStates.WAIT_GLOBAL_INPUT)    await query.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –≤—Å–µ—Ö –Ω–∞ {date}:", reply_markup=kb)@admin.message(AdminProtect(), F.state(AdminStates.WAIT_GLOBAL_INPUT))async def global_hours_input(message: Message, state: FSMContext):    data = await state.get_data()    date = data.get("date")    try:        hours = float(message.text.replace(",","."))    except ValueError:        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")    for tg in get_all_waiters():        wid = get_waiter_id_by_tg(tg)        add_shift(wid, date)        set_shift_tasks(wid, date, "")    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="AM_BACK_MENU")]    ])    await message.answer(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {hours} —á. –≤—Å–µ–º –Ω–∞ {date}.", reply_markup=kb)    await state.clear()# --- Edit personal schedule ---@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def edit_schedule_start(query: CallbackQuery, state: FSMContext):    year, month = datetime.today().year, datetime.today().month    cal = make_calendar(year, month, set())    cal.inline_keyboard.append([        InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")    ])    await state.set_state(AdminStates.EDIT_DATE)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=cal)@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"), F.state(AdminStates.EDIT_DATE))async def edit_select_date(query: CallbackQuery, state: FSMContext):    _, date = query.data.split("|",1)    await state.update_data(date=date)    buttons = [[InlineKeyboardButton(text=(get_waiter_by_tg(tg)[1] or f"ID:{tg}"), callback_data=f"AM_SEL_W|{tg}")]               for tg in get_all_waiters()]    buttons.append([InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–µ", callback_data="AM_EDIT_SCHEDULE")])    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(AdminStates.SELECT_WORKER)    await query.message.edit_text(f"–î–∞—Ç–∞: {date}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("AM_SEL_W|"), F.state(AdminStates.SELECT_WORKER))async def edit_select_worker(query: CallbackQuery, state: FSMContext):    _, tg = query.data.split("|",1)    await state.update_data(tg=int(tg))    data = await state.get_data()    date = data.get("date")    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="AM_ENTER_TASKS")],        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="AM_NO_TASKS")],        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É", callback_data=f"CAL_DAY|{date}")],    ])    await state.set_state(AdminStates.ENTER_TASKS)    await query.message.edit_text(f"{date}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ {tg}. –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏?", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data == "AM_ENTER_TASKS", F.state(AdminStates.ENTER_TASKS))async def enter_tasks_start(query: CallbackQuery, state: FSMContext):    await state.set_state(AdminStates.WAIT_TASKS_INPUT)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:")@admin.message(AdminProtect(), F.state(AdminStates.WAIT_TASKS_INPUT))async def tasks_input(message: Message, state: FSMContext):    data = await state.get_data()    tg = data.get("tg")    date = data.get("date")    tasks = message.text.strip()    wid = get_waiter_id_by_tg(tg)    add_shift(wid, date)    set_shift_tasks(wid, date, tasks)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="AM_BACK_MENU")]    ])    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb)    await state.clear()@admin.callback_query(AdminProtect(), F.data == "AM_NO_TASKS", F.state(AdminStates.ENTER_TASKS))async def no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    tg = data.get("tg")    date = data.get("date")    wid = get_waiter_id_by_tg(tg)    add_shift(wid, date)    set_shift_tasks(wid, date, "")    await back_menu(query, state)@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def back_menu(query: CallbackQuery, state: FSMContext):    await state.clear()    await cmd_admin_menu(query.message, state)# --- Notify waiters ---@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def on_notify(query: CallbackQuery, state: FSMContext):    # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞—Å—Å—ã–ª–∫–∞)    # –ó–¥–µ—Å—å –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É    await query.message.edit_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º.")# --- Export schedule to Excel ---@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT")async def on_export(query: CallbackQuery, state: FSMContext):    rows = get_all_shifts()    wb = Workbook()    ws = wb.active    ws.append(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "–î–∞—Ç–∞", "–ß–∞—Å—ã", "–ó–∞–¥–∞—á–∏"])    for name, date, hrs, tasks in rows:        ws.append([name, date, hrs, tasks])    buf = BytesIO()    wb.save(buf)    buf.seek(0)    await query.message.edit_document(FSInputFile(buf, filename="schedule.xlsx"))