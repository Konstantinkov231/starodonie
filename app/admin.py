"""Admin-side handlers for ¬´–°—Ç–∞—Ä–æ–¥–æ–Ω—å–µ¬ª-–±–æ—Ç–∞."""from __future__ import annotationsimport calendarimport osimport tempfilefrom datetime import datetime, timedeltafrom typing import Optional, Set, Tuplefrom aiogram import Router, Ffrom aiogram.exceptions import TelegramBadRequestfrom aiogram.filters import Command, StateFilter, BaseFilterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    CallbackQuery,    InlineKeyboardButton,    InlineKeyboardMarkup,    Message,    FSInputFile,)from openpyxl import Workbookfrom openpyxl.styles import Alignment, Font, Border, Side, PatternFillfrom openpyxl.utils import get_column_letter# Ensure the import path matches your project structuretry:    from app.database import sqlite_dbexcept ImportError as e:    raise ImportError("Could not import sqlite_db. Check if app/database/sqlite_db.py exists.") from e# Database helpersfrom app.database.sqlite_db import (    get_cursor,    add_shift,    get_all_shifts,    get_employees_with_shifts,    get_all_waiters,    set_shift_tasks,    get_all_work_hours_dates,    add_employee,    get_all_employees,    get_work_hours,    get_shifts_for,    set_shift_hours,    set_work_hours)# Global cursor helperdef get_cursor():    """Returns a working SQLite cursor, initializing the database if needed."""    if not sqlite_db.base:        sqlite_db.sql_start()    return sqlite_db.base.cursor()async def _safe_delete_message(bot, chat_id: int, msg_id: Optional[int]):    """Safely deletes a message if it exists."""    if msg_id:        try:            await bot.delete_message(chat_id, msg_id)        except Exception:            passdef _format_payline(*args) -> Tuple[str, float]:    """Formats a payline string and calculates pay based on hours and rate."""    if len(args) == 3:        date, hrs, rate = args        if hrs is None or hrs <= 0:            return f"‚Ä¢ {date}: ‚Äî", 0.0        pay = hrs * rate        return f"‚Ä¢ {date}: {hrs:.2f} —á √ó {rate} = {pay:.2f}", pay    elif len(args) == 4:        name, date, hrs, rate = args        if hrs is None or hrs <= 0:            return f"{name} {date}: ‚Äî", 0.0        pay = hrs * rate        return f"{name} {date}: {hrs:.2f} —á √ó {rate} = {pay:.2f}", pay    raise ValueError("_format_payline expects 3 or 4 args")# Router and Guardadmin = Router()ADMIN_IDS = [2015462319, 1773695867]def export_hours_schedule(start_date: datetime, employees: list[dict], get_hours_fn, output_path: str):    wb = Workbook()    ws = wb.active    ws.title = f"–ß–∞—Å–æ–≤–∫–∞ {start_date:%d%m%Y}"    dates = [start_date + timedelta(days=i) for i in range(15)]    headers = ["–§–ò–û"] + [d.strftime("%d.%m") for d in dates] + ["–ò—Ç–æ–≥–æ"]    ws.append(headers)    bold = Font(bold=True)    center = Alignment(horizontal="center", vertical="center")    thin = Side(style="thin")    for col in range(1, len(headers) + 1):        c = ws.cell(row=1, column=col)        c.font = bold        c.alignment = center        c.border = Border(left=thin, right=thin, top=thin, bottom=thin)    row = 2    for role in sorted({e["role"] for e in employees}):        # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã        ws.merge_cells(start_row=row, start_column=1, end_row=row, end_column=len(headers))        grp = ws.cell(row=row, column=1)        grp.value = role        grp.font = Font(bold=True, size=12)        grp.alignment = center        row += 1        # —Å—Ç—Ä–æ–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤        for e in filter(lambda x: x["role"] == role, employees):            name = f"{e['last_name']} {e['first_name']}"            ws.cell(row=row, column=1, value=name).alignment = center            for idx, d in enumerate(dates, start=2):                hrs = get_hours_fn(e["id"], d.strftime("%Y-%m-%d")) or 0                ws.cell(row=row, column=idx, value=hrs).alignment = center            first_col = ws.cell(row=row, column=2).column_letter            last_col = ws.cell(row=row, column=1 + len(dates)).column_letter            ws.cell(row=row, column=2 + len(dates),                    value=f"=SUM({first_col}{row}:{last_col}{row})").alignment = center            row += 1    wb.save(output_path)class AdminProtect(BaseFilter):    async def __call__(self, event) -> bool:        user = getattr(event, "from_user", None)        return bool(user and user.id in ADMIN_IDS)# FSM Statesclass AddEmployeeStates(StatesGroup):    ChooseRole = State()    InputLastName = State()    InputFirstName = State()    InputRate = State()class SetHoursStates(StatesGroup):    ChooseWaiter = State()    ChooseDate = State()    InputStartTime = State()    InputEndTime = State()class EditSchedStates(StatesGroup):    ChooseDate = State()    ChooseWaiter = State()    ChooseTaskAction = State()    InputPersonalTasks = State()class ExportScheduleStates(StatesGroup):    ChooseStartDate = State()# UI HelpersKB_BACK_MENU = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")]])def make_calendar(year: int, month: int, marked: Set[str]) -> InlineKeyboardMarkup:    kb = [        [            InlineKeyboardButton(text="‚Äπ", callback_data=f"CAL_PREV|{year}|{month}"),            InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="IGNORE"),            InlineKeyboardButton(text="‚Ä∫", callback_data=f"CAL_NEXT|{year}|{month}"),        ],        [InlineKeyboardButton(text=d, callback_data="IGNORE") for d in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]],    ]    for week in calendar.Calendar(firstweekday=0).monthdayscalendar(year, month):        row = []        for day in week:            if day == 0:                row.append(InlineKeyboardButton(text=" ", callback_data="IGNORE"))            else:                ds = f"{year:04d}-{month:02d}-{day:02d}"                mark = "‚úì" if ds in marked else ""                row.append(InlineKeyboardButton(text=f"{day}{mark}", callback_data=f"CAL_DAY|{ds}"))        kb.append(row)    kb.extend([        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")],        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")],    ])    return InlineKeyboardMarkup(inline_keyboard=kb)# Handlers@admin.message(Command("admin_menu"), AdminProtect())async def admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ (—Å–º–µ–Ω—ã)", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üïí –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å–æ–≤–∫—É", callback_data="AM_EDIT_HOURS")],        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="AM_ADD_EMPLOYEE")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="AM_EXPORT_ALL")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- ADD EMPLOYEE ---@admin.callback_query(AdminProtect(), F.data == "AM_ADD_EMPLOYEE")async def add_employee_start(query: CallbackQuery, state: FSMContext):    await state.clear()    await state.set_state(AddEmployeeStates.ChooseRole)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û–§–ò–¶–ò–ê–ù–¢–´, –ü–û–ú–û–©–ù–ò–ö–ò):")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.ChooseRole))async def add_employee_role(message: Message, state: FSMContext):    await state.update_data(role=message.text.strip())    await state.set_state(AddEmployeeStates.InputLastName)    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.InputLastName))async def add_employee_last_name(message: Message, state: FSMContext):    await state.update_data(last_name=message.text.strip())    await state.set_state(AddEmployeeStates.InputFirstName)    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.InputFirstName))async def add_employee_first_name(message: Message, state: FSMContext):    await state.update_data(first_name=message.text.strip())    await state.set_state(AddEmployeeStates.InputRate)    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ä—É–±/—á–∞—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, 140):")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.InputRate))async def add_employee_rate(message: Message, state: FSMContext):    emp_id = add_employee(...)  # –≤–µ—Ä–Ω—ë–º id    cur = get_cursor()    cur.execute("UPDATE waiters SET employee_id=? WHERE id=?", (emp_id, waiter_id))    sqlite_db.base.commit()    data = await state.get_data()    try:        rate = float(message.text.strip())        if rate <= 0:            raise ValueError("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")    except ValueError:        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 140).")        return    add_employee(data["last_name"], data["first_name"], data["role"], rate)    await message.answer(        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {data['last_name']} {data['first_name']} ({data['role']}) —Å —Å—Ç–∞–≤–∫–æ–π {rate} —Ä—É–±/—á–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω.",        reply_markup=KB_BACK_MENU    )    await state.clear()# --- SET HOURS ---@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_HOURS")async def sh_start(q: CallbackQuery, state: FSMContext):    await state.clear()    await state.set_state(SetHoursStates.ChooseWaiter)    items = get_employees_with_shifts()  # [('W1','–ê–Ω—Ç–æ–Ω'),('E3','–ú–∞—Ä–∏—è'),...]    keyboard = [        [InlineKeyboardButton(text=name, callback_data=f"EH_EMP|{uid}")]        for uid, name in items    ]    keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")])    kb = InlineKeyboardMarkup(inline_keyboard=keyboard)    await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —á–∞—Å–æ–≤–∫–∏:", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseWaiter), F.data.startswith("EH_EMP|"))async def sh_choose_waiter(q: CallbackQuery, state: FSMContext):    uid = q.data.split("|",1)[1]   # e.g. 'W4' –∏–ª–∏ 'E9'    await state.update_data(chosen_uid=uid)    today = datetime.today()    marked = set(get_all_work_hours_dates())    kb = make_calendar(today.year, today.month, marked)    await state.set_state(SetHoursStates.ChooseDate)    await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ–Ω—ã:", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def sh_choose_date(q: CallbackQuery, state: FSMContext):    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É    ds = q.data.split("|")[1]    await state.update_data(shift_date=ds)    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞    await state.set_state(SetHoursStates.InputStartTime)    m = await q.message.edit_text(f"–î–∞—Ç–∞: {ds}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (HH:MM):")    await state.update_data(prompt_id=m.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputStartTime))async def sh_input_start(msg: Message, state: FSMContext):    data = await state.get_data()    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-¬´—à–∞–±–ª–æ–Ω¬ª    await _safe_delete_message(msg.bot, msg.chat.id, data.get("prompt_id"))    try:        start_t = datetime.strptime(msg.text.strip(), "%H:%M").time()    except ValueError:        return await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞    await state.update_data(start_time=start_t)    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è    await state.set_state(SetHoursStates.InputEndTime)    m = await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã (HH:MM):")    await state.update_data(prompt_id=m.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputEndTime))async def sh_input_end(msg: Message, state: FSMContext):    data = await state.get_data()    await _safe_delete_message(msg.bot, msg.chat.id, data.get("prompt_id"))    # –ø–∞—Ä—Å–∏–º –∫–æ–Ω–µ—Ü    try:        end_t = datetime.strptime(msg.text.strip(), "%H:%M").time()    except ValueError:        return await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")    # —Å—á–∏—Ç–∞–µ–º —á–∞—Å—ã    dt0 = datetime.combine(datetime.today(), data["start_time"])    dt1 = datetime.combine(datetime.today(), end_t)    if dt1 < dt0:        dt1 += timedelta(days=1)    hrs = (dt1 - dt0).total_seconds() / 3600    uid  = data["chosen_uid"]     # 'W23' –∏–ª–∏ 'E7'    date = data["shift_date"]    # –≤–µ—Ç–≤–∏–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å–∏–º–≤–æ–ª—É –ø—Ä–µ—Ñ–∏–∫—Å–∞    kind, raw = uid[0], uid[1:]    idx = int(raw)    if kind == "W":        # –æ—Ñ–∏—Ü–∏–∞–Ω—Ç ‚Üí shifts        add_shift(idx, date)        set_shift_hours(idx, date, hrs)    else:  # kind == "E"        # —á–∏—Å—Ç—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ ‚Üí work_hours        set_work_hours(idx, date, hrs)    await msg.answer(f"–°–º–µ–Ω–∞ {date}: {hrs:.2f} —á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=KB_BACK_MENU)    await state.clear()# --- EDIT SCHEDULE ---@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def es_start(query: CallbackQuery, state: FSMContext):    today = datetime.today()    marked = {row[2] for row in get_all_shifts()}  # Using date from get_all_shifts()    kb = make_calendar(today.year, today.month, marked)    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")])    await state.set_state(EditSchedStates.ChooseDate)    await state.update_data(edit_year=today.year, edit_month=today.month)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_PREV|"))async def es_prev_month(query: CallbackQuery, state: FSMContext):    y, m = map(int, query.data.split("|")[1:])    m -= 1    if m == 0:        y, m = y - 1, 12    marked = {row[2] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")])    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_NEXT|"))async def es_next_month(query: CallbackQuery, state: FSMContext):    y, m = map(int, query.data.split("|")[1:])    m += 1    if m == 13:        y, m = y + 1, 1    marked = {row[2] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")])    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data == "AM_CLEAR_SCHEDULE")async def es_clear_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    cur = get_cursor()    cur.execute("DELETE FROM shifts WHERE date LIKE ?", (f"{data['edit_year']}-{data['edit_month']:02d}-%",))    sqlite_db.base.commit()    await query.answer(f"–ì—Ä–∞—Ñ–∏–∫ –∑–∞ {data['edit_year']}-{data['edit_month']:02d} –æ—á–∏—â–µ–Ω", show_alert=True)    kb = make_calendar(data['edit_year'], data['edit_month'], set())    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")])    try:        await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)    except TelegramBadRequest:        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ç–∞–∫ —É–∂–µ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–æ–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É        pass@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def es_choose_date(query: CallbackQuery, state: FSMContext):    date_str = query.data.split("|")[1]    await state.update_data(edit_date=date_str)    current = [name for _, name, d, _, _ in get_all_shifts() if d == date_str]    assigned_block = "–£–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã:\n‚Ä¢ " + "\n‚Ä¢ ".join(current) if current else "<i>—Å–º–µ–Ω–∞ –ø—É—Å—Ç–∞</i>"    waiters = get_employees_with_shifts()    buttons = [        [InlineKeyboardButton(text=name or "–ë–µ–∑ –∏–º–µ–Ω–∏", callback_data=f"ES_WAITER|{waiter_id}")]        for waiter_id, name in waiters    ]    if not buttons:        await query.message.edit_text(            "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—ã waiters –∏ employees.",            reply_markup=KB_BACK_MENU        )        return    buttons.append([InlineKeyboardButton(text="‚è™ –û—Ç–º–µ–Ω–∞", callback_data="AM_EDIT_SCHEDULE")])    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(EditSchedStates.ChooseWaiter)    # –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ try/except, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å ‚Äúmessage is not modified‚Äù    try:        await query.message.edit_text(            f"<b>–î–∞—Ç–∞:</b> {date_str}\n\n{assigned_block}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b>",            parse_mode="HTML",            reply_markup=kb,        )    except TelegramBadRequest:        # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º        pass@admin.callback_query(AdminProtect(), F.data.startswith("ES_WAITER|"))async def es_select_waiter(query: CallbackQuery, state: FSMContext):    """    –†–∞–Ω—å—à–µ –∑–¥–µ—Å—å –±—ã–ª–æ:        waiter_id = int(query.data.split("|")[1])    –ù–æ callback_data —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ 'ES_WAITER|W8' –∏–ª–∏ 'ES_WAITER|E3'.    –ù—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–¥–µ–ª–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å, –∞ –ø–æ—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ int.    """    full = query.data.split("|", maxsplit=1)[1]  # –ø–æ–ª—É—á–∞–µ–º 'W8' –∏–ª–∏ 'E3'    kind, raw = full[0], full[1:]              # kind='W'/'E', raw='8'/'3'    idx = int(raw)                             # —Ç–µ–ø–µ—Ä—å —á–∏—Å—Ç—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞    await state.update_data(waiter_id=idx)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="ES_TASKS")],        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∑–∞–¥–∞—á",   callback_data="ES_NO_TASKS")],    ])    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="AM_EDIT_SCHEDULE")])    data = await state.get_data()    date = data["edit_date"]    cur = get_cursor()    cur.execute(        "SELECT COALESCE(e.first_name || ' ' || e.last_name, w.name) AS name "        "FROM waiters w LEFT JOIN employees e ON w.employee_id = e.id "        "WHERE w.id = ?",        (idx,)    )    row = cur.fetchone()    name = row["name"] if row else "–ë–µ–∑ –∏–º–µ–Ω–∏"    await state.set_state(EditSchedStates.ChooseTaskAction)    await query.message.edit_text(f"{date} ‚Äî {name}", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data == "ES_NO_TASKS")async def es_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    add_shift(data["waiter_id"], data["edit_date"])    await query.message.edit_text("–ó–∞–¥–∞—á –Ω–µ—Ç. –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=KB_BACK_MENU)    await state.clear()@admin.message(AdminProtect(), StateFilter(EditSchedStates.InputPersonalTasks))async def es_save_tasks(message: Message, state: FSMContext):    data = await state.get_data()    add_shift(data["waiter_id"], data["edit_date"])    set_shift_tasks(data["waiter_id"], data["edit_date"], message.text.strip())    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=KB_BACK_MENU)    await state.clear()@admin.callback_query(AdminProtect(), F.data == "ES_TASKS")async def es_enter_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(EditSchedStates.InputPersonalTasks)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")# --- SALARY ---@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(q: CallbackQuery):    # 1) –ü–µ—Ä–∏–æ–¥ ‚Äî –≤–µ—Å—å —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü    today = datetime.today()    start = today.replace(day=1)    next_month = (start + timedelta(days=31)).replace(day=1)    end = next_month - timedelta(days=1)    dates = [start + timedelta(days=i) for i in range((end - start).days + 1)]    total_all = 0.0    text = f"<b>–ß–∞—Å–æ–≤–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ {start:%Y-%m-%d} ‚Äî {end:%Y-%m-%d}</b>\n\n"    # 2) –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–∑ employees    for emp_id, ln, fn, role in get_all_employees():        fio = f"{fn} {ln}".strip()        # —Å—Ç–∞–≤–∫–∞ –∏–∑ employees.rate –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç 140        cur = get_cursor()        cur.execute("SELECT rate FROM employees WHERE id = ?", (emp_id,))        rate = (cur.fetchone()["rate"] or 140.0)        text += f"<u>{fio}</u> ({role}):\n"        subtotal = 0.0        for d in dates:            ds = d.strftime("%Y-%m-%d")            hrs = get_work_hours(emp_id, ds) or 0.0            if hrs > 0:                pay = hrs * rate                subtotal += pay                text += f"‚Ä¢ {d:%d.%m}: {hrs:.2f} —á √ó {rate:.0f} ‚ÇΩ = {pay:.2f} ‚ÇΩ\n"        text += f"  ‚ûî <b>–ò—Ç–æ–≥–æ –∑–∞ {fio}: {subtotal:.2f} ‚ÇΩ</b>\n\n"        total_all += subtotal    # 3) –û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ employees    cur = get_cursor()    cur.execute("SELECT id, tg_id, name FROM waiters WHERE employee_id IS NULL")    for waiter_id, tg_id, name in cur.fetchall():        fio = name or "–ë–µ–∑ –∏–º–µ–Ω–∏"        rate = 180.0 if tg_id == 2015462319 else 140.0        text += f"<u>{fio}</u> (–û—Ñ–∏—Ü–∏–∞–Ω—Ç):\n"        subtotal = 0.0        shifts = get_shifts_for(waiter_id)  # {date:{'hours', 'tasks'}}        for d in dates:            ds = d.strftime("%Y-%m-%d")            hrs = shifts.get(ds, {}).get("hours", 0.0) or 0.0            if hrs > 0:                pay = hrs * rate                subtotal += pay                text += f"‚Ä¢ {d:%d.%m}: {hrs:.2f} —á √ó {rate:.0f} ‚ÇΩ = {pay:.2f} ‚ÇΩ\n"        text += f"  ‚ûî <b>–ò—Ç–æ–≥–æ –∑–∞ {fio}: {subtotal:.2f} ‚ÇΩ</b>\n\n"        total_all += subtotal    text += f"‚û°Ô∏è <b>–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ –≤—Å–µ–º: {total_all:.2f} ‚ÇΩ</b>"    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üßπ –û–±–Ω—É–ª–∏—Ç—å —á–∞—Å—ã –∑–∞ –º–µ—Å—è—Ü", callback_data=f"AM_CLEAR_PAY|{start.year}|{start.month:02d}")],        [InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞",    callback_data="AM_BACK_MENU")],    ])    await q.message.edit_text(text, parse_mode="HTML", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("AM_CLEAR_PAY|"))async def clear_pay(query: CallbackQuery, state: FSMContext):    y, m = map(int, query.data.split("|")[1:])    pattern = f"{y}-{m:02d}-%"    cur = get_cursor()    # –æ–±–Ω—É–ª—è–µ–º —Å–º–µ–Ω—ã    cur.execute("UPDATE shifts SET hours = NULL WHERE date LIKE ?", (pattern,))    # —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ work_hours    cur.execute("DELETE FROM work_hours WHERE date LIKE ?", (pattern,))    sqlite_db.base.commit()    await query.answer("–ß–∞—Å—ã –∑–∞ –º–µ—Å—è—Ü –æ–±–Ω—É–ª–µ–Ω—ã!", show_alert=True)    await admin_menu(query.message, state)# --- NOTIFY ---@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify(query: CallbackQuery, state: FSMContext):    await state.clear()    await query.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π‚Ä¶")    for tg_id in get_all_waiters():        try:            await query.bot.send_message(tg_id, "‚ÑπÔ∏è –ì—Ä–∞—Ñ–∏–∫ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /menu.")        except Exception:            continue    await query.message.edit_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚úÖ", reply_markup=KB_BACK_MENU)# --- EXPORT ALL ---def export_colored_schedule(start_date: datetime, staff: list[dict], get_hours_fn, path: str):    """    staff = [        {"fio": "–ò–≤–∞–Ω–æ–≤ –ü.", "role": "–ü–æ–≤–∞—Ä–∞",       "rate": 180, "id": 3},        {"fio": "–ü–µ—Ç—Ä–æ–≤ –ê.", "role": "–û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã",   "rate": 140, "id": 7},        ‚Ä¶    ]    """    wb = Workbook()    ws = wb.active    ws.title = f"–ß–∞—Å–æ–≤–∫–∞ {start_date:%d%m%Y}"    # 1) –ó–∞–≥–æ–ª–æ–≤–∫–∏    dates   = [start_date + timedelta(days=i) for i in range(15)]    headers = ["–§–ò–û"] + [d.strftime("%d.%m") for d in dates] + ["–°—Ç–∞–≤–∫–∞", "–ó/–ü"]    ws.append(headers)    # –°—Ç–∏–ª–∏    bold       = Font(bold=True)    center     = Alignment(horizontal="center", vertical="center")    thin_border= Border(left=Side("thin"), right=Side("thin"), top=Side("thin"), bottom=Side("thin"))    hdr_fill   = PatternFill("solid", fgColor="BDD7EE")    role_fill  = PatternFill("solid", fgColor="FDE9D9")    total_fill = PatternFill("solid", fgColor="C6EFCE")    # –û—Ñ–æ—Ä–º–ª—è–µ–º —à–∞–ø–∫—É    for col in range(1, len(headers)+1):        c = ws.cell(row=1, column=col)        c.font      = bold        c.alignment = center        c.border    = thin_border        c.fill      = hdr_fill    # –≤—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ ¬´–ó/–ü¬ª    pay_col        = len(headers)    pay_col_letter = get_column_letter(pay_col)    row = 2    # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º    for role in sorted({s["role"] for s in staff}):        # –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–æ–ª–∏        ws.merge_cells(start_row=row, start_column=1, end_row=row, end_column=pay_col)        rc = ws.cell(row=row, column=1)        rc.value     = role        rc.font      = Font(bold=True, size=12)        rc.alignment = center        rc.fill      = role_fill        row += 1        start_of_group = row        # —Å—Ç—Ä–æ–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤        for s in filter(lambda x: x["role"] == role, staff):            # –§–ò–û            c0 = ws.cell(row=row, column=1, value=s["fio"])            c0.alignment = center            c0.border    = thin_border            # —á–∞—Å—ã –ø–æ –¥–Ω—è–º            for idx, d in enumerate(dates, start=2):                hrs = get_hours_fn(s["id"], d.strftime("%Y-%m-%d")) or 0                c = ws.cell(row=row, column=idx, value=hrs)                c.alignment = center                c.border    = thin_border            # —Å—Ç–∞–≤–∫–∞            rate = s["rate"]            cr = ws.cell(row=row, column=2+len(dates), value=rate)            cr.alignment = center            cr.border    = thin_border            # –ó/–ü –∑–∞ —Å—Ç—Ä–æ–∫—É: =SUM(—á–∞—Å–æ–≤)*—Å—Ç–∞–≤–∫–∞            first_col = get_column_letter(2)            last_col  = get_column_letter(1 + len(dates))            formula   = f"=SUM({first_col}{row}:{last_col}{row})*{rate}"            cp = ws.cell(row=row, column=pay_col, value=formula)            cp.alignment = center            cp.border    = thin_border            row += 1        # –∏—Ç–æ–≥ –ø–æ —Ä–æ–ª–∏        ws.cell(row=row, column=1, value="–ò—Ç–æ–≥–æ:").font = bold        for col_idx in range(2, 2 + len(dates)):            col_letter = get_column_letter(col_idx)            c = ws.cell(                row=row,                column=col_idx,                value=f"=SUM({col_letter}{start_of_group}:{col_letter}{row-1})"            )            c.alignment = center            c.fill      = total_fill        # –ø—É—Å—Ç–∞—è —Å—Ç–∞–≤–∫–∞        ws.cell(row=row, column=2+len(dates), value="").fill = total_fill        # –∏—Ç–æ–≥ –ó/–ü –ø–æ —Ä–æ–ª–∏        total_pay = ws.cell(            row=row,            column=pay_col,            value=f"=SUM({pay_col_letter}{start_of_group}:{pay_col_letter}{row-1})"        )        total_pay.alignment = center        total_pay.fill     = total_fill        total_pay.font     = bold        row += 1    # –æ–±—â–∏–π –∏—Ç–æ–≥ –ø–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—é    grand_row = row + 1    gl = ws.cell(row=grand_row, column=1, value="–ò—Ç–æ–≥–æ –ø–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—é:")    gl.font      = Font(bold=True, size=12)    gl.alignment = center    gp = ws.cell(        row=grand_row,        column=pay_col,        value=f"=SUM({pay_col_letter}2:{pay_col_letter}{row-1})"    )    gp.font      = Font(bold=True, size=12)    gp.alignment = center    wb.save(path)@admin.callback_query(AdminProtect(), F.data=="AM_EXPORT_ALL")async def export_all_start(q: CallbackQuery, state: FSMContext):    await state.clear()    today = datetime.today()    await state.set_state(ExportScheduleStates.ChooseStartDate)    await q.message.edit_text(        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (15 –¥–Ω–µ–π):",        reply_markup=make_calendar(today.year, today.month, set())    )@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data.startswith("CAL_DAY|"))async def export_all(q: CallbackQuery, state: FSMContext):    start = datetime.strptime(q.data.split("|")[1], "%Y-%m-%d")    cur   = get_cursor()    # 1) —á–∏—Å—Ç—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –∏–∑ employees    staff: list[dict] = []    for eid, ln, fn, role in get_all_employees():        # –¥–æ—Å—Ç–∞—ë–º —Å—Ç–∞–≤–∫—É        cur.execute("SELECT rate FROM employees WHERE id=?", (eid,))        rate = cur.fetchone()["rate"] or float(os.getenv("HOURLY_RATE", "140"))        staff.append({"id": eid,                      "fio": f"{fn} {ln}".strip(),                      "role": role,                      "rate": rate})    # 2) –æ—Ñ–∏—Ü–∏–∞–Ω—Ç—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ employees    cur.execute("SELECT id, tg_id, name FROM waiters WHERE employee_id IS NULL")    for wid, tg, name in cur.fetchall():        rate = 180.0 if tg == 2015462319 else 140.0        staff.append({            "id":   wid,            "fio":  name or "–ë–µ–∑ –∏–º–µ–Ω–∏",            "role": "–û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã",            "rate": rate        })    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:        export_colored_schedule(start, staff, get_work_hours, tmp.name)        await q.message.answer_document(            FSInputFile(tmp.name, filename=f"schedule_{start:%d%m%Y}.xlsx"),            reply_markup=KB_BACK_MENU        )    os.remove(tmp.name)    await state.clear()@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data.startswith("CAL_PREV|"))async def export_prev(q: CallbackQuery, state: FSMContext):    y,m = map(int, q.data.split("|")[1:])    m -=1    if m==0: y,m = y-1,12    await q.message.edit_text(        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (15 –¥–Ω–µ–π):",        reply_markup=make_calendar(y,m,set())    )@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data.startswith("CAL_NEXT|"))async def export_next(q: CallbackQuery, state: FSMContext):    y,m = map(int, q.data.split("|")[1:])    m +=1    if m==13: y,m = y+1,1    await q.message.edit_text(        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (15 –¥–Ω–µ–π):",        reply_markup=make_calendar(y,m,set())    )@admin.callback_query(AdminProtect(), F.data=="AM_BACK_MENU")async def back_to_menu(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)    await _safe_delete_message(query.bot, query.message.chat.id, query.message.message_id)