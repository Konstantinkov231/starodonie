"""Admin-side handlers for ¬´–°—Ç–∞—Ä–æ–¥–æ–Ω—å–µ¬ª-–±–æ—Ç–∞."""from __future__ import annotationsimport calendarimport osimport tempfilefrom datetime import datetime, timedeltafrom typing import Optional, Set, Tuplefrom aiogram import Router, Ffrom aiogram.filters import Command, StateFilterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    CallbackQuery,    InlineKeyboardButton,    InlineKeyboardMarkup,    Message,    FSInputFile,)from openpyxl import Workbookfrom openpyxl.styles import Alignment, Font, Border, Side# Ensure the import path matches your project structuretry:    from app.database import sqlite_dbexcept ImportError as e:    raise ImportError("Could not import sqlite_db. Check if app/database/sqlite_db.py exists.") from e# Database helpersfrom app.database.sqlite_db import (    add_shift,    get_all_shifts,    get_employees_with_shifts,    get_all_waiters,    get_waiter_by_tg,    set_shift_hours,    set_shift_tasks,    get_all_employees,    get_work_hours,    get_all_work_hours_dates,    add_employee,    get_employee_by_id,)# Global cursor helperdef get_cursor():    """Returns a working SQLite cursor, initializing the database if needed."""    if not sqlite_db.base:        sqlite_db.sql_start()    return sqlite_db.base.cursor()async def _safe_delete_message(bot, chat_id: int, msg_id: Optional[int]):    """Safely deletes a message if it exists."""    if msg_id:        try:            await bot.delete_message(chat_id, msg_id)        except Exception:            passdef _format_payline(*args) -> Tuple[str, float]:    """Formats a payline string and calculates pay based on hours and rate."""    if len(args) == 3:        date, hrs, rate = args        if hrs is None or hrs <= 0:            return f"‚Ä¢ {date}: ‚Äî", 0.0        pay = hrs * rate        return f"‚Ä¢ {date}: {hrs:.2f} —á √ó {rate} = {pay:.2f}", pay    elif len(args) == 4:        name, date, hrs, rate = args        if hrs is None or hrs <= 0:            return f"{name} {date}: ‚Äî", 0.0        pay = hrs * rate        return f"{name} {date}: {hrs:.2f} —á √ó {rate} = {pay:.2f}", pay    raise ValueError("_format_payline expects 3 or 4 args")# Router and Guardadmin = Router()ADMIN_IDS = [2015462319, 1773695867]def export_hours_schedule(start_date: datetime, employees: list[dict], get_hours_fn, output_path: str):    """Generates an Excel file with hours schedule for 15 days."""    wb = Workbook()    ws = wb.active    ws.title = f"–ß–∞—Å–æ–≤–∫–∞ {start_date.strftime('%d%m%Y')}"    date_range = [start_date + timedelta(days=i) for i in range(15)]    col_widths = [15, 15] + [5] * (len(date_range) + 1)    for i, w in enumerate(col_widths, 1):        ws.column_dimensions[ws.cell(row=1, column=i).column_letter].width = w    bold = Font(bold=True)    center = Alignment(horizontal="center", vertical="center")    thin_border = Border(        left=Side(style='thin'), right=Side(style='thin'),        top=Side(style='thin'), bottom=Side(style='thin')    )    headers = ["–§–∞–º–∏–ª–∏—è", "–ò–º—è"] + [d.strftime("%d.%m") for d in date_range] + ["–ò—Ç–æ–≥–æ"]    ws.append(headers)    for col in range(1, len(headers) + 1):        cell = ws.cell(row=1, column=col)        cell.font = bold        cell.alignment = center        cell.border = thin_border    roles = sorted(set(emp['role'] for emp in employees))    row_idx = 2    for role in roles:        ws.merge_cells(start_row=row_idx, start_column=1, end_row=row_idx, end_column=len(headers))        cell = ws.cell(row=row_idx, column=1)        cell.value = role        cell.font = Font(bold=True, size=12)        cell.alignment = center        row_idx += 1        for emp in [e for e in employees if e['role'] == role]:            row_values = [emp['last_name'], emp['first_name']]            for d in date_range:                date_str = d.strftime("%Y-%m-%d")                hrs = get_hours_fn(emp['id'], date_str) or 0                row_values.append(hrs)            row_values.append(f"=SUM(C{row_idx}:{ws.cell(row=row_idx, column=2+len(date_range)).column_letter}{row_idx})")            for col, val in enumerate(row_values, 1):                cell = ws.cell(row=row_idx, column=col)                cell.value = val                cell.alignment = center                cell.border = thin_border            row_idx += 1    wb.save(output_path)class AdminProtect:    async def __call__(self, event) -> bool:        user = getattr(event, "from_user", None)        return bool(user and user.id in ADMIN_IDS)# FSM Statesclass AddEmployeeStates(StatesGroup):    ChooseRole = State()    InputLastName = State()    InputFirstName = State()    InputRate = State()class SetHoursStates(StatesGroup):    ChooseWaiter = State()    ChooseDate = State()    InputStartTime = State()    InputEndTime = State()class EditSchedStates(StatesGroup):    ChooseDate = State()    ChooseWaiter = State()    ChooseTaskAction = State()    InputPersonalTasks = State()class ExportScheduleStates(StatesGroup):    ChooseStartDate = State()# UI HelpersKB_BACK_MENU = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")]])def make_calendar(year: int, month: int, marked: Set[str]) -> InlineKeyboardMarkup:    kb = [        [            InlineKeyboardButton(text="‚Äπ", callback_data=f"CAL_PREV|{year}|{month}"),            InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="IGNORE"),            InlineKeyboardButton(text="‚Ä∫", callback_data=f"CAL_NEXT|{year}|{month}"),        ],        [InlineKeyboardButton(text=d, callback_data="IGNORE") for d in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]],    ]    for week in calendar.Calendar(firstweekday=0).monthdayscalendar(year, month):        row = []        for day in week:            if day == 0:                row.append(InlineKeyboardButton(text=" ", callback_data="IGNORE"))            else:                ds = f"{year:04d}-{month:02d}-{day:02d}"                mark = "‚úì" if ds in marked else ""                row.append(InlineKeyboardButton(text=f"{day}{mark}", callback_data=f"CAL_DAY|{ds}"))        kb.append(row)    kb.extend([        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")],        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—è—Ü", callback_data="AM_CLEAR_SCHEDULE")],    ])    return InlineKeyboardMarkup(inline_keyboard=kb)# Handlers@admin.message(Command("admin_menu"), AdminProtect())async def admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ (—Å–º–µ–Ω—ã)", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üïí –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å–æ–≤–∫—É", callback_data="AM_EDIT_HOURS")],        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", callback_data="AM_ADD_EMPLOYEE")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="AM_EXPORT_ALL")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- ADD EMPLOYEE ---@admin.callback_query(AdminProtect(), F.data == "AM_ADD_EMPLOYEE")async def add_employee_start(query: CallbackQuery, state: FSMContext):    await state.clear()    await state.set_state(AddEmployeeStates.ChooseRole)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –û–§–ò–¶–ò–ê–ù–¢–´, –ü–û–ú–û–©–ù–ò–ö–ò):")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.ChooseRole))async def add_employee_role(message: Message, state: FSMContext):    await state.update_data(role=message.text.strip())    await state.set_state(AddEmployeeStates.InputLastName)    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.InputLastName))async def add_employee_last_name(message: Message, state: FSMContext):    await state.update_data(last_name=message.text.strip())    await state.set_state(AddEmployeeStates.InputFirstName)    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.InputFirstName))async def add_employee_first_name(message: Message, state: FSMContext):    await state.update_data(first_name=message.text.strip())    await state.set_state(AddEmployeeStates.InputRate)    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞–≤–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ä—É–±/—á–∞—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä, 140):")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.InputRate))async def add_employee_rate(message: Message, state: FSMContext):    data = await state.get_data()    try:        rate = float(message.text.strip())        if rate <= 0:            raise ValueError("–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")    except ValueError:        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 140).")        return    add_employee(data["last_name"], data["first_name"], data["role"], rate)    await message.answer(        f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {data['last_name']} {data['first_name']} ({data['role']}) —Å —Å—Ç–∞–≤–∫–æ–π {rate} —Ä—É–±/—á–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω.",        reply_markup=KB_BACK_MENU    )    await state.clear()# --- SET HOURS ---@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_HOURS")async def sh_start(query: CallbackQuery, state: FSMContext):    await state.clear()    await state.set_state(SetHoursStates.ChooseWaiter)    waiters = get_employees_with_shifts()    buttons = [        [InlineKeyboardButton(text=name or "–ë–µ–∑ –∏–º–µ–Ω–∏", callback_data=f"EH_EMP|{waiter_id}")]        for waiter_id, name in waiters    ]    if not buttons:        await query.message.edit_text(            "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É waiters.",            reply_markup=KB_BACK_MENU        )        return    buttons.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")])    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤:", reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseWaiter), F.data.startswith("EH_EMP|"))async def sh_choose_waiter(query: CallbackQuery, state: FSMContext):    waiter_id = int(query.data.split("|")[1])    await state.update_data(waiter_id=waiter_id)    today = datetime.today()    marked = set(get_all_work_hours_dates())    kb = make_calendar(today.year, today.month, marked)    await state.set_state(SetHoursStates.ChooseDate)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ–Ω—ã:", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def sh_choose_date(query: CallbackQuery, state: FSMContext):    date_str = query.data.split("|")[1]    await state.update_data(shift_date=date_str)    await state.set_state(SetHoursStates.InputStartTime)    m = await query.message.edit_text(f"–î–∞—Ç–∞: {date_str}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (HH:MM):")    await state.update_data(prompt_id=m.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputStartTime))async def sh_input_start(message: Message, state: FSMContext):    data = await state.get_data()    await _safe_delete_message(message.bot, message.chat.id, data.get("prompt_id"))    try:        start_t = datetime.strptime(message.text.strip(), "%H:%M").time()    except ValueError:        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")        return    await state.update_data(start_time=start_t, user_msg_id=message.message_id)    await state.set_state(SetHoursStates.InputEndTime)    m = await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã (HH:MM):")    await state.update_data(prompt_id=m.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputEndTime))async def sh_input_end(message: Message, state: FSMContext):    data = await state.get_data()    for mid in (data.get("prompt_id"), data.get("user_msg_id")):        await _safe_delete_message(message.bot, message.chat.id, mid)    try:        end_t = datetime.strptime(message.text.strip(), "%H:%M").time()    except ValueError:        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")        return    dt0 = datetime.combine(datetime.today(), data["start_time"])    dt1 = datetime.combine(datetime.today(), end_t)    if dt1 < dt0:        dt1 += timedelta(days=1)    hrs = (dt1 - dt0).total_seconds() / 3600    add_shift(data["waiter_id"], data["shift_date"])    set_shift_hours(data["waiter_id"], data["shift_date"], hrs)    await message.answer(f"–°–º–µ–Ω–∞ {data['shift_date']}: {hrs:.2f} —á —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=KB_BACK_MENU)    await state.clear()# --- EDIT SCHEDULE ---@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def es_start(query: CallbackQuery, state: FSMContext):    today = datetime.today()    marked = {row[2] for row in get_all_shifts()}  # Using date from get_all_shifts()    kb = make_calendar(today.year, today.month, marked)    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")])    await state.set_state(EditSchedStates.ChooseDate)    await state.update_data(edit_year=today.year, edit_month=today.month)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_PREV|"))async def es_prev_month(query: CallbackQuery, state: FSMContext):    y, m = map(int, query.data.split("|")[1:])    m -= 1    if m == 0:        y, m = y - 1, 12    marked = {row[2] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")])    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_NEXT|"))async def es_next_month(query: CallbackQuery, state: FSMContext):    y, m = map(int, query.data.split("|")[1:])    m += 1    if m == 13:        y, m = y + 1, 1    marked = {row[2] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")])    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data == "AM_CLEAR_SCHEDULE")async def es_clear_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    cur = get_cursor()    cur.execute("DELETE FROM shifts WHERE date LIKE ?", (f"{data['edit_year']}-{data['edit_month']:02d}-%",))    sqlite_db.base.commit()    await query.answer(f"–ì—Ä–∞—Ñ–∏–∫ –∑–∞ {data['edit_year']}-{data['edit_month']:02d} –æ—á–∏—â–µ–Ω", show_alert=True)    kb = make_calendar(data['edit_year'], data['edit_month'], set())    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")])    await query.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def es_choose_date(query: CallbackQuery, state: FSMContext):    date_str = query.data.split("|")[1]    await state.update_data(edit_date=date_str)    current = [name for _, name, d, _, _ in get_all_shifts() if d == date_str]    assigned_block = "–£–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã:\n‚Ä¢ " + "\n‚Ä¢ ".join(current) if current else "<i>—Å–º–µ–Ω–∞ –ø—É—Å—Ç–∞</i>"    waiters = get_employees_with_shifts()    buttons = [        [InlineKeyboardButton(text=name or "–ë–µ–∑ –∏–º–µ–Ω–∏", callback_data=f"ES_WAITER|{waiter_id}")]        for waiter_id, name in waiters    ]    if not buttons:        await query.message.edit_text(            "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—É waiters.",            reply_markup=KB_BACK_MENU        )        return    buttons.append([InlineKeyboardButton(text="‚è™ –û—Ç–º–µ–Ω–∞", callback_data="AM_EDIT_SCHEDULE")])    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    await state.set_state(EditSchedStates.ChooseWaiter)    await query.message.edit_text(        f"<b>–î–∞—Ç–∞:</b> {date_str}\n\n{assigned_block}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</b>",        parse_mode="HTML",        reply_markup=kb,    )@admin.callback_query(AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data == "CAL_CANCEL")async def es_cancel_edit(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)@admin.callback_query(AdminProtect(), F.data.startswith("ES_WAITER|"))async def es_select_waiter(query: CallbackQuery, state: FSMContext):    waiter_id = int(query.data.split("|")[1])    await state.update_data(waiter_id=waiter_id)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üìù –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="ES_TASKS")],        [InlineKeyboardButton(text="‚ùå –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="ES_NO_TASKS")],    ])    kb.inline_keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="AM_EDIT_SCHEDULE")])    date = (await state.get_data())["edit_date"]    cur = get_cursor()    cur.execute("SELECT COALESCE(e.first_name || ' ' || e.last_name, w.name) AS name FROM waiters w LEFT JOIN employees e ON w.employee_id = e.id WHERE w.id = ?", (waiter_id,))    name = cur.fetchone()[0] or "–ë–µ–∑ –∏–º–µ–Ω–∏"    await state.set_state(EditSchedStates.ChooseTaskAction)    await query.message.edit_text(f"{date} ‚Äî {name}", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data == "ES_NO_TASKS")async def es_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    add_shift(data["waiter_id"], data["edit_date"])    await query.message.edit_text("–ó–∞–¥–∞—á –Ω–µ—Ç. –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=KB_BACK_MENU)    await state.clear()@admin.message(AdminProtect(), StateFilter(EditSchedStates.InputPersonalTasks))async def es_save_tasks(message: Message, state: FSMContext):    data = await state.get_data()    add_shift(data["waiter_id"], data["edit_date"])    set_shift_tasks(data["waiter_id"], data["edit_date"], message.text.strip())    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=KB_BACK_MENU)    await state.clear()@admin.callback_query(AdminProtect(), F.data == "ES_TASKS")async def es_enter_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(EditSchedStates.InputPersonalTasks)    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")# --- SALARY ---@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(query: CallbackQuery):    default_rate = float(os.getenv("HOURLY_RATE", "140"))    vip_tg_id = 2015462319    vip_name = get_waiter_by_tg(vip_tg_id)[1] if get_waiter_by_tg(vip_tg_id) else None    total_all = 0.0    text = "<b>–†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n\n"    shifts_by_employee = {}    for waiter_id, name, date, hrs, _ in get_all_shifts():        if hrs and hrs > 0:            shifts_by_employee.setdefault((waiter_id, name), []).append((date, hrs))    for (waiter_id, name), shifts in shifts_by_employee.items():        employee = get_employee_by_id(waiter_id) if waiter_id else None        rate = employee[4] if employee and employee[4] else default_rate        if vip_name and name == vip_name:            rate = 180        subtotal = 0.0        text += f"<u>{name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}</u>\n"        for date, hrs in shifts:            line, pay = _format_payline(date, hrs, rate)            text += line + "\n"            subtotal += pay        text += f"‚û°Ô∏è <b>–ò—Ç–æ–≥–æ: {subtotal:.2f}</b>\n\n"        total_all += subtotal    text += f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ: {total_all:.2f}</b>"    today = datetime.today()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü", callback_data=f"AM_CLEAR_PAY|{today.year}|{today.month:02d}")],        [InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")],    ])    await query.message.edit_text(text, parse_mode="HTML", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("AM_CLEAR_PAY|"))async def clear_pay(query: CallbackQuery, state: FSMContext):    y, m = map(int, query.data.split("|")[1:])    cur = get_cursor()    cur.execute("UPDATE shifts SET hours = NULL WHERE date LIKE ?", (f"{y}-{m}-%",))    sqlite_db.base.commit()    await query.answer("–ß–∞—Å—ã –∑–∞ –º–µ—Å—è—Ü –æ–±–Ω—É–ª–µ–Ω—ã!", show_alert=True)    await admin_menu(query.message, state)# --- NOTIFY ---@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify(query: CallbackQuery, state: FSMContext):    await state.clear()    await query.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π‚Ä¶")    for tg_id in get_all_waiters():        try:            await query.bot.send_message(tg_id, "‚ÑπÔ∏è –ì—Ä–∞—Ñ–∏–∫ –±—ã–ª –∏–∑–º–µ–Ω—ë–Ω! –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–º–µ–Ω—É –∫–æ–º–∞–Ω–¥–æ–π /menu.")        except Exception:            continue    await query.message.edit_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ‚úÖ", reply_markup=KB_BACK_MENU)# --- EXPORT ALL ---@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT_ALL")async def export_all_start(query: CallbackQuery, state: FSMContext):    await state.clear()    today = datetime.today()    kb = make_calendar(today.year, today.month, set())    await state.set_state(ExportScheduleStates.ChooseStartDate)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–±—É–¥–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ 15 –¥–Ω–µ–π):", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data.startswith("CAL_DAY|"))async def export_all_choose_date(query: CallbackQuery, state: FSMContext):    date_str = query.data.split("|")[1]    start_date = datetime.strptime(date_str, "%Y-%m-%d")    employees = [{"id": eid, "last_name": ln, "first_name": fn, "role": role} for eid, ln, fn, role in get_all_employees()]    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:        export_hours_schedule(start_date, employees, get_work_hours, tmp.name)        await query.message.answer_document(            FSInputFile(tmp.name, filename=f"schedule_{start_date.strftime('%d%m%Y')}.xlsx"),            reply_markup=KB_BACK_MENU        )    os.remove(tmp.name)    await state.clear()@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data == "CAL_CANCEL")async def export_all_cancel(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data.startswith("CAL_PREV|"))async def export_all_prev_month(query: CallbackQuery, state: FSMContext):    y, m = map(int, query.data.split("|")[1:])    m -= 1    if m == 0:        y, m = y - 1, 12    kb = make_calendar(y, m, set())    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–±—É–¥–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ 15 –¥–Ω–µ–π):", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data.startswith("CAL_NEXT|"))async def export_all_next_month(query: CallbackQuery, state: FSMContext):    y, m = map(int, query.data.split("|")[1:])    m += 1    if m == 13:        y, m = y + 1, 1    kb = make_calendar(y, m, set())    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ (–±—É–¥–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ 15 –¥–Ω–µ–π):", reply_markup=kb)# --- IGNORE ---@admin.callback_query(F.data == "IGNORE")async def ignore(query: CallbackQuery):    await query.answer()# --- BACK MENU ---@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def back_to_menu(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)    await _safe_delete_message(query.bot, query.message.chat.id, query.message.message_id)