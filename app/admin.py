# app/admin.pyimport osfrom datetime import datetime, timedeltafrom io import BytesIOfrom aiogram import Router, Ffrom aiogram.filters import Command, Filterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message, CallbackQuery,    InlineKeyboardButton, InlineKeyboardMarkup,    FSInputFile,)from openpyxl import Workbookfrom app.database.sqlite_db import (    get_all_waiters, get_waiter_by_tg,    add_shift, set_shift_hours, set_shift_tasks,    get_all_shifts, )from app.utils.calendar import make_calendaradmin = Router()# === –ê–¥–º–∏–Ω-—Ñ–∏–ª—å—Ç—Ä ===ADMIN_IDS = [2015462319, 1773695867]class AdminProtect(Filter):    async def __call__(self, msg: Message) -> bool:        return msg.from_user.id in ADMIN_IDS# === FSM –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Å–æ–≤ ===class SetHoursStates(StatesGroup):    ChooseWaiter   = State()    ChooseDate     = State()    InputStartTime = State()    InputEndTime   = State()# === FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ===class EditSchedStates(StatesGroup):    ChooseDate        = State()    ChooseWaiter      = State()    ChooseTaskAction  = State()    InputPersonalTasks= State()# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===@admin.message(Command("admin_menu"), AdminProtect())async def admin_menu(msg: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton("üïí –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–∞—Å—ã", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton("üóì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton("üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton("üì¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await msg.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# === –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤ (–Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü) ===@admin.callback_query(AdminProtect(), F.data=="AM_SET_HOURS")async def start_set_hours(q: CallbackQuery, state: FSMContext):    await state.clear()    # 1) –í—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞    buttons = [        InlineKeyboardButton(            text=get_waiter_by_tg(tg)[1] or str(tg),            callback_data=f"SH_WAITER|{tg}"        ) for tg in get_all_waiters()    ]    kb = InlineKeyboardMarkup(inline_keyboard=[[b] for b in buttons])    await state.set_state(SetHoursStates.ChooseWaiter)    await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("SH_WAITER|"), F.state==SetHoursStates.ChooseWaiter)async def sh_choose_waiter(q: CallbackQuery, state: FSMContext):    _, tg = q.data.split("|",1)    await state.update_data(selected_tg=int(tg))    # 2) –ü—Ä—è–º–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å    today = datetime.today()    kb = make_calendar(today.year, today.month, set())    await state.set_state(SetHoursStates.ChooseDate)    await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–º–µ–Ω—ã:", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"), F.state==SetHoursStates.ChooseDate)async def sh_choose_date(q: CallbackQuery, state: FSMContext):    _, date_str = q.data.split("|",1)    await state.update_data(shift_date=date_str)    await state.set_state(SetHoursStates.InputStartTime)    await q.message.edit_text(f"–î–∞—Ç–∞: {date_str}\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (HH:MM):")@admin.message(AdminProtect(), F.state==SetHoursStates.InputStartTime)async def sh_input_start(msg: Message, state: FSMContext):    text = msg.text.strip()    try:        t0 = datetime.strptime(text, "%H:%M").time()    except:        return await msg.reply("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM, –Ω–∞–ø—Ä–∏–º–µ—Ä 09:30")    await state.update_data(start_time=t0)    await state.set_state(SetHoursStates.InputEndTime)    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (HH:MM):")@admin.message(AdminProtect(), F.state==SetHoursStates.InputEndTime)async def sh_input_end(msg: Message, state: FSMContext):    text = msg.text.strip()    data = await state.get_data()    try:        t1 = datetime.strptime(text, "%H:%M").time()    except:        return await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∫–∞–∫ 18:45")    # –≤—ã—á–∏—Å–ª—è–µ–º —á–∞—Å—ã    t0 = data['start_time']    dt0 = datetime.combine(datetime.today(), t0)    dt1 = datetime.combine(datetime.today(), t1)    if dt1 < dt0: dt1 += timedelta(days=1)    hrs = (dt1 - dt0).total_seconds()/3600    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º    waiter_tg = data['selected_tg']    wid = get_waiter_by_tg(waiter_tg)[0]    add_shift(wid, data['shift_date'])    set_shift_hours(wid, data['shift_date'], hrs)    await msg.answer(        f"–°–º–µ–Ω–∞ {data['shift_date']} –¥–ª—è {waiter_tg}: "        f"{t0.strftime('%H:%M')}‚Äì{t1.strftime('%H:%M')} ({hrs:.2f}—á) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."    )    await state.clear()# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –ø–æ—Ç–æ–º –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ===@admin.callback_query(AdminProtect(), F.data=="AM_EDIT_SCHEDULE")async def es_start(q: CallbackQuery, state: FSMContext):    await state.clear()    today = datetime.today()    # –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞—Ç—ã, –≥–¥–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–º–µ–Ω–∞    all_dates = {row[1] for row in get_all_shifts()}  # [(name,date,hrs,tasks),...]    kb = make_calendar(today.year, today.month, all_dates)    await state.set_state(EditSchedStates.ChooseDate)    await q.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"), F.state==EditSchedStates.ChooseDate)async def es_choose_date(q: CallbackQuery, state: FSMContext):    _, date_str = q.data.split("|",1)    await state.update_data(edit_date=date_str)    # –∑–∞—Ç–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤    buttons = [        InlineKeyboardButton(            text=get_waiter_by_tg(tg)[1] or str(tg),            callback_data=f"ES_WAITER|{tg}"        )        for tg in get_all_waiters()    ]    kb = InlineKeyboardMarkup(inline_keyboard=[[b] for b in buttons])    await state.set_state(EditSchedStates.ChooseWaiter)    await q.message.edit_text(f"–î–∞—Ç–∞: {date_str}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("ES_WAITER|"), F.state==EditSchedStates.ChooseWaiter)async def es_select_waiter(q: CallbackQuery, state: FSMContext):    _, tg = q.data.split("|",1)    await state.update_data(selected_tg=int(tg))    # –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton("üìù –ü—Ä–æ–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á–∏", callback_data="ES_TASKS")],        [InlineKeyboardButton("‚ùå –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="ES_NO_TASKS")],    ])    await state.set_state(EditSchedStates.ChooseTaskAction)    await q.message.edit_text(f"{(await state.get_data())['edit_date']} ‚Äî "                              f"{get_waiter_by_tg(int(tg))[1]}", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data=="ES_NO_TASKS", F.state==EditSchedStates.ChooseTaskAction)async def es_no_tasks(q: CallbackQuery, state: FSMContext):    data = await state.get_data()    wid = get_waiter_by_tg(data['selected_tg'])[0]    add_shift(wid, data['edit_date'])    await q.message.edit_text("–ó–∞–¥–∞—á –Ω–µ—Ç. –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")    await state.clear()@admin.callback_query(AdminProtect(), F.data=="ES_TASKS", F.state==EditSchedStates.ChooseTaskAction)async def es_enter_tasks(q: CallbackQuery, state: FSMContext):    await state.set_state(EditSchedStates.InputPersonalTasks)    await q.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:")@admin.message(AdminProtect(), F.state==EditSchedStates.InputPersonalTasks)async def es_save_tasks(msg: Message, state: FSMContext):    data = await state.get_data()    wid = get_waiter_by_tg(data['selected_tg'])[0]    add_shift(wid, data['edit_date'])    set_shift_tasks(wid, data['edit_date'], msg.text.strip())    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton("‚è™ –í –º–µ–Ω—é –∞–¥–º–∏–Ω–∞", callback_data="AM_BACK_MENU")]    ])    await msg.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=kb)    await state.clear()@admin.callback_query(AdminProtect(), F.data=="AM_BACK_MENU")async def es_back(q: CallbackQuery, state: FSMContext):    await admin_menu(q.message, state)# === –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–Ω—é: —Ä–∞—Å—á—ë—Ç, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —ç–∫—Å–ø–æ—Ä—Ç ===@admin.callback_query(AdminProtect(), F.data=="AM_CALC_SALARY")async def calc_salary(q: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE","0"))    total = 0    text = "<b>–†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    for name, date, hrs, _ in get_all_shifts():        pay = hrs*rate        total += pay        text += f"{name} {date}: {hrs}√ó{rate} = {pay:.2f}\n"    text+=f"\n<b>–í—Å–µ–≥–æ: {total:.2f}</b>"    await q.message.edit_text(text, parse_mode="HTML")@admin.callback_query(AdminProtect(), F.data=="AM_NOTIFY")async def notify(q: CallbackQuery):    await q.message.edit_text("–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")@admin.callback_query(AdminProtect(), F.data=="AM_EXPORT")async def export_sched(q: CallbackQuery):    wb=Workbook(); ws=wb.active    ws.append(["–°–æ—Ç—Ä—É–¥–Ω–∏–∫","–î–∞—Ç–∞","–ß–∞—Å—ã","–ó–∞–¥–∞—á–∏"])    for name,date,hrs,tasks in get_all_shifts():        ws.append([name,date,hrs,tasks])    buf=BytesIO(); wb.save(buf); buf.seek(0)    await q.message.edit_document(FSInputFile(buf,"schedule.xlsx"))