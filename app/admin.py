"""Admin-side handlers for «Стародонье»-бота."""from __future__ import annotationsimport calendarimport osimport tempfilefrom datetime import datetime, timedeltafrom typing import Optional, Set, Tuplefrom aiogram import Router, Ffrom aiogram.filters import Command, Filter, StateFilterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    CallbackQuery,    InlineKeyboardButton,    InlineKeyboardMarkup,    Message,    FSInputFile)from openpyxl import Workbookfrom openpyxl.styles import Alignment, Font, Border, Sidefrom app.database import sqlite_db# ────────────────────────────# DB helpers# ────────────────────────────from app.database.sqlite_db import (    add_shift,    get_all_shifts,    get_employees_with_shifts,  # Added import    get_all_waiters,    get_waiter_by_tg,    set_shift_hours,    set_shift_tasks,    get_all_employees,    get_work_hours,    get_all_work_hours_dates,)cur = Nonedef get_cursor():    """    Возвращает рабочий cursor SQLite.    * Если соединение ещё не создано (sqlite_db.base is None),      автоматически вызываем sql_start().    * Каждый вызов берёт cursor() заново — так избегаем проблем      с закрытыми курсорами.    """    if sqlite_db.base is None:        sqlite_db.sql_start()          # инициализация БД «на лету»    return sqlite_db.base.cursor()async def _safe_delete_message(bot, chat_id: int, msg_id: Optional[int]):    if msg_id:        try:            await bot.delete_message(chat_id, msg_id)        except Exception:            passdef _format_payline(*args) -> Tuple[str, float]:    """Формирует строку расчёта: (date, hrs, rate) или (name, date, hrs, rate)."""    if len(args) == 3:        date, hrs, rate = args        if hrs is None:            return f"• {date}: —", 0.0        pay = hrs * rate        return f"• {date}: {hrs:.2f} ч × {rate} = {pay:.2f}", pay    elif len(args) == 4:        name, date, hrs, rate = args        if hrs is None:            return f"{name} {date}: —", 0.0        pay = hrs * rate        return f"{name} {date}: {hrs:.2f} ч × {rate} = {pay:.2f}", pay    raise TypeError("_format_payline expects 3 or 4 args")# ────────────────────────────# Router & guard# ────────────────────────────admin = Router()ADMIN_IDS = [2015462319, 1773695867]def export_hours_schedule(start_date: datetime, employees: list[dict], get_hours_fn, output_path: str):    """    Генерирует Excel-файл с часовкой за 15 дней, начиная с указанной даты:    - start_date: начальная дата (datetime)    - employees: список словарей с ключами 'last_name', 'first_name', 'role', 'id'    - get_hours_fn(id, date_str) -> float (возвращает часы для сотрудника на дату 'YYYY-MM-DD')    """    # Настройка книги и листа    wb = Workbook()    ws = wb.active    ws.title = f"Часовка {start_date.strftime('%d%m%Y')}"    # Определяем 15-дневный диапазон    date_range = [start_date + timedelta(days=i) for i in range(15)]    # Ширина столбцов    col_widths = [15, 15] + [5] * (len(date_range) + 1)  # Фамилия, Имя, 15 дней, Итого    for i, w in enumerate(col_widths, start=1):        ws.column_dimensions[ws.cell(row=1, column=i).column_letter].width = w    # Стили    bold = Font(bold=True)    center = Alignment(horizontal="center", vertical="center")    thin_border = Border(        left=Side(style='thin'), right=Side(style='thin'),        top=Side(style='thin'), bottom=Side(style='thin')    )    # Заголовок    headers = ["Фамилия", "Имя"]    headers += [d.strftime("%d.%m") for d in date_range]  # Даты в формате DD.MM    headers.append("Итого")    ws.append(headers)    for col in range(1, len(headers) + 1):        cell = ws.cell(row=1, column=col)        cell.font = bold        cell.alignment = center        cell.border = thin_border    # Группируем по ролям    roles = sorted(set(emp['role'] for emp in employees))    row_idx = 2    for role in roles:        # Заголовок секции: объединяем все колонки        ws.merge_cells(start_row=row_idx, start_column=1, end_row=row_idx, end_column=len(headers))        cell = ws.cell(row=row_idx, column=1)        cell.value = role        cell.font = Font(bold=True, size=12)        cell.alignment = center        row_idx += 1        # Сотрудники данной роли        for emp in [e for e in employees if e['role'] == role]:            row_values = [emp['last_name'], emp['first_name']]            # Часы за 15 дней            for d in date_range:                date_str = d.strftime("%Y-%m-%d")                hrs = get_hours_fn(emp['id'], date_str) or 0                row_values.append(hrs)            # Формула итог            col_start = 3            col_end = 3 + len(date_range) - 1            row_values.append(f"=SUM(C{row_idx}:" + ws.cell(row=row_idx, column=col_end).column_letter + f"{row_idx})")            # Записываем строку            for col, val in enumerate(row_values, start=1):                cell = ws.cell(row=row_idx, column=col)                cell.value = val                cell.alignment = center                cell.border = thin_border            row_idx += 1    # Сохраняем файл    wb.save(output_path)class AdminProtect(Filter):    async def __call__(self, event) -> bool:        user = getattr(event, "from_user", None)        return bool(user and user.id in ADMIN_IDS)# ────────────────────────────# FSM для добавления сотрудников# ────────────────────────────class AddEmployeeStates(StatesGroup):    ChooseRole     = State()    InputLastName  = State()    InputFirstName = State()    InputRate      = State()# ────────────────────────────# FSM для редактирования часов# ────────────────────────────class EditHoursStates(StatesGroup):    ChooseEmployee = State()    ChooseDate     = State()    InputStartTime = State()    InputEndTime   = State()# ────────────────────────────# FSM для экспорта таблицы# ────────────────────────────class ExportScheduleStates(StatesGroup):    ChooseStartDate = State()# ────────────────────────────# UI helpers# ────────────────────────────KB_BACK_MENU = InlineKeyboardMarkup(    inline_keyboard=[[InlineKeyboardButton(text="⏪ В меню админа", callback_data="AM_BACK_MENU")]])def make_calendar(year: int, month: int, marked: Set[str]) -> InlineKeyboardMarkup:    kb: list[list[InlineKeyboardButton]] = []    kb.append([        InlineKeyboardButton(text="‹", callback_data=f"CAL_PREV|{year}|{month}"),        InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="IGNORE"),        InlineKeyboardButton(text="›", callback_data=f"CAL_NEXT|{year}|{month}"),    ])    kb.append([        InlineKeyboardButton(text=d, callback_data="IGNORE")        for d in ["Пн","Вт","Ср","Чт","Пт","Сб","Вс"]    ])    for week in calendar.Calendar(firstweekday=0).monthdayscalendar(year, month):        row = []        for day in week:            if day == 0:                row.append(InlineKeyboardButton(text=" ", callback_data="IGNORE"))            else:                ds = f"{year:04d}-{month:02d}-{day:02d}"                mark = "✓" if ds in marked else ""                row.append(InlineKeyboardButton(text=f"{day}{mark}", callback_data=f"CAL_DAY|{ds}"))        kb.append(row)    kb.append([InlineKeyboardButton(text="❌ Отмена", callback_data="CAL_CANCEL")])    kb.append([InlineKeyboardButton(text="🧹 Очистить месяц", callback_data="AM_CLEAR_SCHEDULE")])    return InlineKeyboardMarkup(inline_keyboard=kb)# ────────────────────────────# FSM states# ────────────────────────────class EditSchedStates(StatesGroup):    ChooseDate = State()    ChooseWaiter = State()    ChooseTaskAction = State()    InputPersonalTasks = State()class SetHoursStates(StatesGroup):    ChooseWaiter = State()    ChooseDate = State()    InputStartTime = State()    InputEndTime = State()# ────────────────────────────# IGNORE# ────────────────────────────@admin.callback_query(F.data == "IGNORE")async def _ignore(query: CallbackQuery): await query.answer()# ────────────────────────────# MAIN MENU# ────────────────────────────@admin.message(Command("admin_menu"), AdminProtect())async def admin_menu(message: Message, state: FSMContext):    await state.clear()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="🗓 Изменить график (смены)", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="🕒 Редактировать часовку", callback_data="AM_EDIT_HOURS")],        [InlineKeyboardButton(text="➕ Добавить сотрудника", callback_data="AM_ADD_EMPLOYEE")],        [InlineKeyboardButton(text="💰 Рассчитать зарплату", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="📥 Экспортировать таблицу", callback_data="AM_EXPORT_ALL")],    ])    await message.answer("<b>Меню администратора</b>", parse_mode="HTML", reply_markup=kb)# ─────────────────────────────────────────────# ADD EMPLOYEE# ─────────────────────────────────────────────@admin.callback_query(AdminProtect(), F.data == "AM_ADD_EMPLOYEE")async def add_employee_start(query: CallbackQuery, state: FSMContext):    await state.clear()    await state.set_state(AddEmployeeStates.ChooseRole)    await query.message.edit_text(        "Введите роль сотрудника (например, ОФИЦИАНТЫ, ПОМОЩНИКИ):"    )@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.ChooseRole))async def add_employee_role(message: Message, state: FSMContext):    role = message.text.strip()    await state.update_data(role=role)    await state.set_state(AddEmployeeStates.InputLastName)    await message.answer("Введите фамилию сотрудника:")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.InputLastName))async def add_employee_last_name(message: Message, state: FSMContext):    last_name = message.text.strip()    await state.update_data(last_name=last_name)    await state.set_state(AddEmployeeStates.InputFirstName)    await message.answer("Введите имя сотрудника:")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.InputFirstName))async def add_employee_first_name(message: Message, state: FSMContext):    first_name = message.text.strip()    await state.update_data(first_name=first_name)    await state.set_state(AddEmployeeStates.InputRate)    await message.answer("Введите ставку сотрудника (руб/час, например, 140):")@admin.message(AdminProtect(), StateFilter(AddEmployeeStates.InputRate))async def add_employee_rate(message: Message, state: FSMContext):    data = await state.get_data()    try:        rate = float(message.text.strip())        if rate <= 0:            raise ValueError("Ставка должна быть положительным числом")    except ValueError:        await message.answer("Пожалуйста, введите корректное число (например, 140).")        return    role = data["role"]    last_name = data["last_name"]    first_name = data["first_name"]    # Сохраняем сотрудника в базу данных, включая ставку    sqlite_db.add_employee(last_name, first_name, role, rate)    await message.answer(        f"Сотрудник {last_name} {first_name} ({role}) с ставкой {rate} руб/час добавлен.",        reply_markup=KB_BACK_MENU    )    await state.clear()# ─────────────────────────────────────────────# SET HOURS block (complete)# ─────────────────────────────────────────────@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_HOURS")async def sh_start(query: CallbackQuery, state: FSMContext):    await state.clear()    await state.set_state(SetHoursStates.ChooseWaiter)    # Fetch employees linked to waiters or standalone waiters    employees_shifts = get_employees_with_shifts()    if not employees_shifts:        await query.message.edit_text(            "Нет сотрудников для редактирования часов.",            reply_markup=InlineKeyboardMarkup(inline_keyboard=[                [InlineKeyboardButton(text="⏪ В меню админа", callback_data="AM_BACK_MENU")]            ])        )        return    # Create a list of unique waiters by waiter_id    seen = set()    unique_waiters = [        (waiter_id, name)        for waiter_id, name, _, _, _ in employees_shifts        if not (waiter_id in seen or seen.add(waiter_id))    ]    if not unique_waiters:        await query.message.edit_text(            "Нет сотрудников для редактирования часов.",            reply_markup=InlineKeyboardMarkup(inline_keyboard=[                [InlineKeyboardButton(text="⏪ В меню админа", callback_data="AM_BACK_MENU")]            ])        )        return    buttons = [        [InlineKeyboardButton(text=f"{name}", callback_data=f"EH_EMP|{waiter_id}")]        for waiter_id, name in unique_waiters    ]    buttons.append([InlineKeyboardButton(text="⏪ В меню админа", callback_data="AM_BACK_MENU")])    await query.message.edit_text(        "Выберите сотрудника для установки часов:",        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons),    )@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseWaiter), F.data.startswith("EH_EMP|"))async def sh_choose_waiter(query: CallbackQuery, state: FSMContext):    _, waiter_id = query.data.split("|", 1)    waiter_id = int(waiter_id)    await state.update_data(waiter_id=waiter_id)  # Store waiter_id instead of emp_id    today = datetime.today()    marked = set(get_all_work_hours_dates())    kb = make_calendar(today.year, today.month, marked)    await state.set_state(SetHoursStates.ChooseDate)    await query.message.edit_text("Выберите дату смены:", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(SetHoursStates.ChooseDate), F.data.startswith("CAL_DAY|"))async def sh_choose_date(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    await state.update_data(shift_date=date_str)    await state.set_state(SetHoursStates.InputStartTime)    m = await query.message.edit_text(f"Дата: {date_str}\nВведите время начала смены (HH:MM):")    await state.update_data(prompt_id=m.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputStartTime))async def sh_input_start(message: Message, state: FSMContext):    data = await state.get_data()    await _safe_delete_message(message.bot, message.chat.id, data.get("prompt_id"))    try:        start_t = datetime.strptime(message.text.strip(), "%H:%M").time()    except ValueError:        await message.reply("Неверный формат, используйте ЧЧ:ММ")        return    await state.update_data(start_time=start_t, user_msg_id=message.message_id)    await state.set_state(SetHoursStates.InputEndTime)    m = await message.answer("Введите время окончания смены (HH:MM):")    await state.update_data(prompt_id=m.message_id)@admin.message(AdminProtect(), StateFilter(SetHoursStates.InputEndTime))async def sh_input_end(message: Message, state: FSMContext):    data = await state.get_data()    for mid in (data.get("prompt_id"), data.get("user_msg_id")):        await _safe_delete_message(message.bot, message.chat.id, mid)    try:        end_t = datetime.strptime(message.text.strip(), "%H:%M").time()    except ValueError:        await message.reply("Неверный формат, используйте ЧЧ:ММ")        return    dt0 = datetime.combine(datetime.today(), data["start_time"])    dt1 = datetime.combine(datetime.today(), end_t)    if dt1 < dt0:        dt1 += timedelta(days=1)    hrs = (dt1 - dt0).total_seconds() / 3600    waiter_id = data["waiter_id"]  # Use waiter_id    add_shift(waiter_id, data["shift_date"])    set_shift_hours(waiter_id, data["shift_date"], hrs)    await message.answer(        f"Смена {data['shift_date']}: {hrs:.2f} ч сохранена.", reply_markup=KB_BACK_MENU    )    await state.clear()# ─────────────────────────────────────────────# EDIT SCHEDULE block (complete)# ─────────────────────────────────────────────@admin.callback_query(AdminProtect(), F.data == "AM_EDIT_SCHEDULE")async def es_start(query: CallbackQuery, state: FSMContext):    """Старт: показать календарь текущего месяца с отмеченными сменами."""    today = datetime.today()    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(today.year, today.month, marked)    kb.inline_keyboard.append(        [InlineKeyboardButton(text="⏪ В меню админа", callback_data="AM_BACK_MENU")]    )    await state.set_state(EditSchedStates.ChooseDate)    await state.update_data(edit_year=today.year, edit_month=today.month)    await query.message.edit_text(        "Изменить график: выберите дату",        reply_markup=kb,    )# ───── навигация по месяцам ─────@admin.callback_query(    AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_PREV|"))async def es_prev_month(query: CallbackQuery, state: FSMContext):    _, y, m = query.data.split("|")    y, m = int(y), int(m) - 1    if m == 0:        y, m = y - 1, 12    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    kb.inline_keyboard.append(        [InlineKeyboardButton(text="⏪ В меню админа", callback_data="AM_BACK_MENU")]    )    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("Изменить график: выберите дату", reply_markup=kb)@admin.callback_query(    AdminProtect(), StateFilter(EditSchedStates.ChooseDate), F.data.startswith("CAL_NEXT|"))async def es_next_month(query: CallbackQuery, state: FSMContext):    _, y, m = query.data.split("|")    y, m = int(y), int(m) + 1    if m == 13:        y, m = y + 1, 1    marked = {row[1] for row in get_all_shifts()}    kb = make_calendar(y, m, marked)    kb.inline_keyboard.append(        [InlineKeyboardButton(text="⏪ В меню админа", callback_data="AM_BACK_MENU")]    )    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("Изменить график: выберите дату", reply_markup=kb)# ───── очистить месяц ─────@admin.callback_query(    AdminProtect(),    StateFilter(EditSchedStates.ChooseDate),    F.data == "AM_CLEAR_SCHEDULE",)async def es_clear_month(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    y, m = data["edit_year"], data["edit_month"]    cur = get_cursor()    cur.execute("DELETE FROM shifts WHERE date LIKE ?", (f"{y:04d}-{m:02d}-%",))    sqlite_db.base.commit()    await query.answer(f"График за {y}-{m:02d} очищен", show_alert=True)    kb = make_calendar(y, m, set())    kb.inline_keyboard.append(        [InlineKeyboardButton(text="⏪ В меню админа", callback_data="AM_BACK_MENU")]    )    await query.message.edit_text("Изменить график: выберите дату", reply_markup=kb)# ───── дата выбрана ─────@admin.callback_query(    AdminProtect(),    StateFilter(EditSchedStates.ChooseDate),    F.data.startswith("CAL_DAY|"),)async def es_choose_date(query: CallbackQuery, state: FSMContext):    _, selected = query.data.split("|", 1)    await state.update_data(edit_date=selected)    # --- уже назначенные на эту дату ---    current = [        name for waiter_id, name, date, hours, _ in get_all_shifts()        if date == selected    ]    if current:        assigned_block = "Уже назначены:\n• " + "\n• ".join(current)    else:        assigned_block = "<i>смена пуста</i>"    # --- список всех официантов для выбора ---    employees_shifts = get_employees_with_shifts()    if not employees_shifts:        await query.message.edit_text(            "Нет сотрудников для редактирования графика.",            reply_markup=InlineKeyboardMarkup(inline_keyboard=[                [InlineKeyboardButton(text="⏪ Отмена", callback_data="AM_EDIT_SCHEDULE")]            ])        )        return    # Remove duplicates by waiter_id while preserving order    seen = set()    unique_waiters = [        (waiter_id, name)        for waiter_id, name, _, _, _ in employees_shifts        if not (waiter_id in seen or seen.add(waiter_id))    ]    if not unique_waiters:        await query.message.edit_text(            "Нет сотрудников для редактирования графика.",            reply_markup=InlineKeyboardMarkup(inline_keyboard=[                [InlineKeyboardButton(text="⏪ Отмена", callback_data="AM_EDIT_SCHEDULE")]            ])        )        return    buttons = [        [            InlineKeyboardButton(                text=name,                callback_data=f"ES_WAITER|{waiter_id}",            )        ]        for waiter_id, name in unique_waiters    ]    kb = InlineKeyboardMarkup(inline_keyboard=buttons)    kb.inline_keyboard.append(        [InlineKeyboardButton(text="⏪ Отмена", callback_data="AM_EDIT_SCHEDULE")]    )    await state.set_state(EditSchedStates.ChooseWaiter)    await query.message.edit_text(        f"<b>Дата:</b> {selected}\n\n{assigned_block}\n\n<b>Выберите сотрудника:</b>",        parse_mode="HTML",        reply_markup=kb,    )# ───── отмена из календаря ─────@admin.callback_query(    AdminProtect(),    StateFilter(EditSchedStates.ChooseDate),    F.data == "CAL_CANCEL",)async def es_cancel_edit(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)# ───── официант выбран ─────@admin.callback_query(AdminProtect(), F.data.startswith("ES_WAITER|"))async def es_select_waiter(query: CallbackQuery, state: FSMContext):    _, waiter_id = query.data.split("|", 1)    await state.update_data(waiter_id=int(waiter_id))    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="📝 Прописать задачи", callback_data="ES_TASKS")],        [InlineKeyboardButton(text="❌ Без задач",      callback_data="ES_NO_TASKS")],    ])    kb.inline_keyboard.append(        [InlineKeyboardButton(text="⬅️ Назад", callback_data="AM_EDIT_SCHEDULE")]    )    date = (await state.get_data())["edit_date"]    # Fetch name for display    cur = get_cursor()    cur.execute("""        SELECT COALESCE(e.first_name || ' ' || e.last_name, w.name) AS name        FROM waiters w        LEFT JOIN employees e ON w.employee_id = e.id        WHERE w.id = ?    """, (int(waiter_id),))    name = cur.fetchone()[0] or "Без имени"    await state.set_state(EditSchedStates.ChooseTaskAction)    await query.message.edit_text(        f"{date} — {name}",        reply_markup=kb,    )# ───── «без задач» ─────@admin.callback_query(AdminProtect(), F.data == "ES_NO_TASKS")async def es_no_tasks(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    waiter_id = data["waiter_id"]    add_shift(waiter_id, data["edit_date"])    await query.message.edit_text("Задач нет. График обновлён.", reply_markup=KB_BACK_MENU)    await state.clear()@admin.message(AdminProtect(), StateFilter(EditSchedStates.InputPersonalTasks))async def es_save_tasks(message: Message, state: FSMContext):    data = await state.get_data()    waiter_id = data["waiter_id"]    add_shift(waiter_id, data["edit_date"])    set_shift_tasks(waiter_id, data["edit_date"], message.text.strip())    await message.answer("Задачи сохранены.", reply_markup=KB_BACK_MENU)    await state.clear()# ───── ввод списка задач ─────@admin.callback_query(AdminProtect(), F.data == "ES_TASKS")async def es_enter_tasks(query: CallbackQuery, state: FSMContext):    await state.set_state(EditSchedStates.InputPersonalTasks)    await query.message.edit_text("Введите список задач (каждый пункт с новой строки):")@admin.message(AdminProtect(), StateFilter(EditSchedStates.InputPersonalTasks))async def es_save_tasks(message: Message, state: FSMContext):    data = await state.get_data()    wid = get_waiter_by_tg(data["selected_tg"])[0]    add_shift(wid, data["edit_date"])    set_shift_tasks(wid, data["edit_date"], message.text.strip())    await message.answer("Задачи сохранены.", reply_markup=KB_BACK_MENU)    await state.clear()# ----- back menu button -----@admin.callback_query(AdminProtect(), F.data == "AM_BACK_MENU")async def es_back(query: CallbackQuery, state: FSMContext):    await admin_menu(query.message, state)    await _safe_delete_message(query.bot, query.message.chat.id, query.message.message_id)# ─────────────────────────────────────────────# SALARY# ─────────────────────────────────────────────@admin.callback_query(AdminProtect(), F.data == "AM_CALC_SALARY")async def calc_salary(query: CallbackQuery):    """    Считает зарплату.    * Использует ставку сотрудника из таблицы employees    * tg_id 2015462319 → 180 руб/час (переопределяет ставку из базы)    * остальные        → HOURLY_RATE (default 140) если ставка не указана    """    default_rate = float(os.getenv("HOURLY_RATE", "140"))    vip_tg_id    = 2015462319    # узнаём имя официанта с этим tg_id    vip_row = sqlite_db.get_waiter_by_tg(vip_tg_id)    vip_name = vip_row[1] if vip_row else None    total_all = 0.0    text = "<b>Расчёт зарплаты</b>\n\n"    # группируем смены по сотруднику, исключаем смены без часов    shifts_by_employee: dict[tuple[int, str], list[tuple[str, float]]] = {}    for emp_id, name, date, hrs, _ in get_all_shifts():        if hrs is None or hrs <= 0:  # Пропускаем смены без часов            continue        shifts_by_employee.setdefault((emp_id, name), []).append((date, hrs))    for (emp_id, name), person_shifts in shifts_by_employee.items():        # Получаем ставку сотрудника из базы данных        employee = sqlite_db.get_employee_by_id(emp_id)        rate = employee[4] if employee and employee[4] is not None else default_rate        # Переопределяем ставку для VIP-пользователя        if vip_name and name == vip_name:            rate = 180        subtotal = 0.0        text += f"<u>{name or 'Без имени'}</u>\n"        for date, hrs in person_shifts:            line, pay = _format_payline(date, hrs, rate)            text += line + "\n"            subtotal += pay        text += f"➡️ <b>Итого: {subtotal:.2f}</b>\n\n"        total_all += subtotal    text += f"<b>Общая сумма к выплате: {total_all:.2f}</b>"    today = datetime.today()    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(            text="🧹 Очистить выплаты за месяц",            callback_data=f"AM_CLEAR_PAY|{today.year}|{today.month:02d}"        )],        [InlineKeyboardButton(text="⏪ В меню админа", callback_data="AM_BACK_MENU")],    ])    await query.message.edit_text(text, parse_mode="HTML", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("AM_CLEAR_PAY|"))async def clear_pay(query: CallbackQuery, state: FSMContext):    _, y, m = query.data.split("|", 2)    cur_local = get_cursor()    cur_local.execute("UPDATE shifts SET hours=NULL WHERE date LIKE ?", (f"{y}-{m}-%",))    sqlite_db.base.commit()    await query.answer("Часы за месяц обнулены!", show_alert=True)    await admin_menu(query.message, state)# ─────────────────────────────────────────────# NOTIFY & EXPORT# ─────────────────────────────────────────────@admin.callback_query(AdminProtect(), F.data == "AM_NOTIFY")async def notify(query: CallbackQuery, state: FSMContext):    # Сбрасываем состояние FSM, если что-то там осталось    await state.clear()    # Немного обратной связи администратору, что мы начали рассылку    await query.answer("Начинаю рассылку уведомлений…")    # Предполагаем, что get_all_waiters() возвращает список TG-ID    for tg in get_all_waiters():        try:            await query.bot.send_message(                tg,                "ℹ️ График был изменён! Посмотрите новую смену командой /menu."            )        except Exception:            # Например, пользователь не начинал диалог с ботом — пропускаем            continue    # Редактируем исходное сообщение, сообщая об окончании рассылки    await query.message.edit_text(        "Уведомления отправлены ✅",        reply_markup=KB_BACK_MENU    )# ─────────────────────────────────────────────# EXPORT ALL (Updated for 15 Days with Date Selection)# ─────────────────────────────────────────────@admin.callback_query(AdminProtect(), F.data == "AM_EXPORT_ALL")async def export_all_start(query: CallbackQuery, state: FSMContext):    await state.clear()    today = datetime.today()    marked = set()  # Не отмечаем даты, так как это выбор начальной даты    kb = make_calendar(today.year, today.month, marked)    await state.set_state(ExportScheduleStates.ChooseStartDate)    await query.message.edit_text("Выберите начальную дату для экспорта (будет экспортировано 15 дней):", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data.startswith("CAL_DAY|"))async def export_all_choose_date(query: CallbackQuery, state: FSMContext):    _, date_str = query.data.split("|", 1)    start_date = datetime.strptime(date_str, "%Y-%m-%d")    # Получаем всех сотрудников    emps = [{"id": eid, "last_name": ln, "first_name": fn, "role": role}            for eid, ln, fn, role in get_all_employees()]    # Функция для получения часов    def get_h(eid, date): return get_work_hours(eid, date)    # Экспортируем таблицу за 15 дней    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:        export_hours_schedule(start_date, emps, get_h, tmp.name)        await query.message.answer_document(            FSInputFile(tmp.name, filename=f"schedule_{start_date.strftime('%d%m%Y')}.xlsx"),            reply_markup=KB_BACK_MENU        )    os.remove(tmp.name)    await state.clear()@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data == "CAL_CANCEL")async def export_all_cancel(query: CallbackQuery, state: FSMContext):    await state.clear()    await admin_menu(query.message, state)@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data.startswith("CAL_PREV|"))async def export_all_prev_month(query: CallbackQuery, state: FSMContext):    _, y, m = query.data.split("|")    y, m = int(y), int(m) - 1    if m == 0:        y, m = y - 1, 12    kb = make_calendar(y, m, set())    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("Выберите начальную дату для экспорта (будет экспортировано 15 дней):", reply_markup=kb)@admin.callback_query(AdminProtect(), StateFilter(ExportScheduleStates.ChooseStartDate), F.data.startswith("CAL_NEXT|"))async def export_all_next_month(query: CallbackQuery, state: FSMContext):    _, y, m = query.data.split("|")    y, m = int(y), int(m) + 1    if m == 13:        y, m = y + 1, 1    kb = make_calendar(y, m, set())    await state.update_data(edit_year=y, edit_month=m)    await query.message.edit_text("Выберите начальную дату для экспорта (будет экспортировано 15 дней):", reply_markup=kb)