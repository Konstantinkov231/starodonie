import osfrom datetime import datetimefrom io import BytesIOfrom aiogram import Router, Ffrom aiogram.filters import Command, CommandObject, Filterfrom aiogram.fsm.context import FSMContextfrom aiogram.fsm.state import StatesGroup, Statefrom aiogram.types import (    Message,    CallbackQuery,    FSInputFile,    InlineKeyboardMarkup,    InlineKeyboardButton,)from openpyxl import Workbookfrom app.database.sqlite_db import (    get_all_guest_cards,    get_all_waiters,    get_all_starts,    add_shift,    set_shift_tasks,    get_all_shifts,    clear_test_results,    get_all_test_results_with_username,)from app.utils.calendar import make_calendarfrom app.video_converter import convert_to_videonoteadmin = Router()# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã ---ADMIN_ID = [2015462319, 1773695867]def user_is_admin(user_id: int) -> bool:    return user_id in ADMIN_IDclass AdminProtect(Filter):    async def __call__(self, message: Message) -> bool:        return user_is_admin(message.from_user.id)# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---class TestNoteStates(StatesGroup):    waiting_for_video = State()class ShiftAdminStates(StatesGroup):    waiting_hours = State()class AssignTaskStates(StatesGroup):    waiting_tasks = State()# --- –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ –≤–∏–¥–µ–æ ---def detect_content(message: Message, command: CommandObject):    caption = command.args or ""    if message.photo:        return "photo", message.photo[-1].file_id, caption    if message.video:        return "video", message.video.file_id, caption    if message.document:        return "document", message.document.file_id, caption    if message.audio:        return "audio", message.audio.file_id, caption    if message.voice:        return "voice", message.voice.file_id, caption    return "text", None, caption# --- –ì–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é ---@admin.message(Command("admin_menu"), AdminProtect())async def cmd_admin_menu(message: Message):    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üïí –ù–∞–∑–Ω–∞—á–∏—Ç—å —á–∞—Å—ã", callback_data="AM_SET_HOURS")],        [InlineKeyboardButton(text="üóìÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", callback_data="AM_EDIT_SCHEDULE")],        [InlineKeyboardButton(text="üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—É", callback_data="AM_CALC_SALARY")],        [InlineKeyboardButton(text="üì¢ –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å", callback_data="AM_NOTIFY")],        [InlineKeyboardButton(text="üì• –°–∫–∞—á–∞—Ç—å Excel", callback_data="AM_EXPORT")],    ])    await message.answer("<b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>", parse_mode="HTML", reply_markup=kb)# --- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∏–¥–µ–æ /test_note ---@admin.message(Command("test_note"), AdminProtect())async def cmd_test_note(message: Message, state: FSMContext):    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.")    await state.set_state(TestNoteStates.waiting_for_video)@admin.message(TestNoteStates.waiting_for_video, F.content_type == "video", AdminProtect())async def process_video(message: Message, state: FSMContext):    file_id = message.video.file_id    file_info = await message.bot.get_file(file_id)    input_path = "user_video.mp4"    await message.bot.download_file(file_info.file_path, destination=input_path)    output_path = "video_note.mp4"    try:        convert_to_videonote(input_path, output_path)    except Exception as e:        await message.answer(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")        await state.clear()        return    if os.path.exists(output_path):        await message.answer_video_note(video_note=FSInputFile(output_path))    else:        await message.answer("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")    await state.clear()    for p in (input_path, output_path):        try:            os.remove(p)        except OSError:            pass# --- –†–∞—Å—Å—ã–ª–∫–∏ ---@admin.message(AdminProtect(), Command("send_guest"))async def send_guest(message: Message, command: CommandObject):    typ, fid, cap = detect_content(message, command)    guests = get_all_guest_cards()    count = 0    for _, tg_id, *_ in guests:        try:            if typ == "text": await message.bot.send_message(tg_id, cap)            elif typ == "photo": await message.bot.send_photo(tg_id, fid, cap)            elif typ == "video": await message.bot.send_video(tg_id, fid, cap)            elif typ == "document": await message.bot.send_document(tg_id, fid, cap)            elif typ == "audio": await message.bot.send_audio(tg_id, fid, cap)            elif typ == "voice": await message.bot.send_voice(tg_id, fid, cap)            count += 1        except:            pass    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –≥–æ—Å—Ç—è–º.")@admin.message(AdminProtect(), Command("send_waiters"))async def send_waiters(message: Message, command: CommandObject):    typ, fid, cap = detect_content(message, command)    waiters = get_all_waiters()    count = 0    for tg_id in waiters:        try:            if typ == "text": await message.bot.send_message(tg_id, cap)            elif typ == "photo": await message.bot.send_photo(tg_id, fid, cap)            elif typ == "video": await message.bot.send_video(tg_id, fid, cap)            elif typ == "document": await message.bot.send_document(tg_id, fid, cap)            elif typ == "audio": await message.bot.send_audio(tg_id, fid, cap)            elif typ == "voice": await message.bot.send_voice(tg_id, fid, cap)            count += 1        except:            pass    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞–º.")@admin.message(AdminProtect(), Command("broadcast"))async def broadcast(message: Message, command: CommandObject):    typ, fid, cap = detect_content(message, command)    users = get_all_starts()    count = 0    for _, tg_id, *_ in users:        try:            if typ == "text": await message.bot.send_message(tg_id, cap)            elif typ == "photo": await message.bot.send_photo(tg_id, fid, cap)            elif typ == "video": await message.bot.send_video(tg_id, fid, cap)            elif typ == "document": await message.bot.send_document(tg_id, fid, cap)            elif typ == "audio": await message.bot.send_audio(tg_id, fid, cap)            elif typ == "voice": await message.bot.send_voice(tg_id, fid, cap)            count += 1        except:            pass    await message.answer(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")# --- –¢–µ—Å—Ç—ã ---@admin.message(AdminProtect(), Command("get_test_results"))async def get_test_results(message: Message):    results = get_all_test_results_with_username()    if not results:        return await message.answer("–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤.")    text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:\n"    for rid, tg, user, score, total, ts in results:        text += f"ID:{rid}, {user}({tg}): {score}/{total} ({ts})\n"    await message.answer(text)@admin.message(AdminProtect(), Command("clear_test_results"))async def clear_tests(message: Message):    deleted = clear_test_results()    await message.answer(f"–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted}")# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–º–µ–Ω–∞–º–∏ –∏ —á–∞—Å—ã ---@admin.callback_query(AdminProtect(), F.data=="AM_SET_HOURS")async def admin_set_hours(query: CallbackQuery):    kb = make_calendar(datetime.today().year, datetime.today().month, set())    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–∞—Å–æ–≤:", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data=="AM_EDIT_SCHEDULE")async def admin_edit_sched(query: CallbackQuery):    kb = make_calendar(datetime.today().year, datetime.today().month, set())    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("CAL_DAY|"))async def admin_on_day(query: CallbackQuery, state: FSMContext):    date_str = query.data.split("|",1)[1]    prev = query.message.text    mode = "set_hours" if "–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —á–∞—Å–æ–≤" in prev else "edit_sched"    await state.update_data(admin_mode=mode, date=date_str)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", callback_data="A_DAY_ASSIGN")],        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")],    ])    await query.message.edit_text(f"<b>{date_str}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="HTML", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data=="A_DAY_ASSIGN")async def admin_day_assign(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    date_str = data["date"]    buttons = [InlineKeyboardButton(text=name or str(wid), callback_data=f"A_ASSIGN|{wid}")               for wid, name in get_all_waiters()]    kb = InlineKeyboardMarkup(row_width=2, inline_keyboard=[buttons, [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_DAY")]])    await query.message.edit_text(f"–î–∞—Ç–∞: {date_str}\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:", reply_markup=kb)@admin.callback_query(AdminProtect(), F.data.startswith("A_ASSIGN|"))async def admin_input_tasks(query: CallbackQuery, state: FSMContext):    wid = int(query.data.split("|",1)[1])    await state.update_data(assigned_waiter=wid)    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="‚úîÔ∏è –ë–µ–∑ –∑–∞–¥–∞—á", callback_data="A_TASKS_EMPTY")],        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_ASSIGN")],    ])    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±–µ–∑ –∑–∞–¥–∞—á):", reply_markup=kb)    await state.set_state(AssignTaskStates.waiting_tasks)@admin.message(AssignTaskStates.waiting_tasks, AdminProtect())async def admin_receive_tasks(message: Message, state: FSMContext):    text = message.text.strip()    data = await state.get_data()    wid = data["assigned_waiter"]    date_str = data["date"]    add_shift(wid, date_str)    set_shift_tasks(wid, date_str, text)    await message.answer("–ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")    await state.clear()@admin.callback_query(AdminProtect(), F.data=="A_TASKS_EMPTY")async def admin_tasks_empty(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    wid = data["assigned_waiter"]    date_str = data["date"]    add_shift(wid, date_str)    set_shift_tasks(wid, date_str, "")    await query.message.edit_text("–°–º–µ–Ω–∞ –±–µ–∑ –∑–∞–¥–∞—á –Ω–∞–∑–Ω–∞—á–µ–Ω–∞.")    await state.clear()# --- –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é ---@admin.callback_query(AdminProtect(), F.data=="AM_BACK_MENU")async def back_to_main(query: CallbackQuery):    await cmd_admin_menu(query.message)@admin.callback_query(AdminProtect(), F.data=="AM_BACK_DAY")async def back_to_day(query: CallbackQuery, state: FSMContext):    data = await state.get_data()    date = data.get("date")    kb = InlineKeyboardMarkup(inline_keyboard=[        [InlineKeyboardButton(text="üë• –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", callback_data="A_DAY_ASSIGN")],        [InlineKeyboardButton(text="‚è™ –ù–∞–∑–∞–¥", callback_data="AM_BACK_MENU")],    ])    await query.message.edit_text(f"<b>{date}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", parse_mode="HTML", reply_markup=kb)# --- –†–∞—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã ---@admin.callback_query(AdminProtect(), F.data=="AM_CALC_SALARY")async def admin_calc_salary(query: CallbackQuery):    rate = float(os.getenv("HOURLY_RATE", "0"))    rows = get_all_shifts()  # [(name, date, hours)]    text = "<b>–†–∞—Å—Å—á—ë—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã</b>\n"    total_all = 0    for name, date_str, hrs in rows:        pay = hrs * rate        total_all += pay        text += f"{name} {date_str}: {hrs}—á √ó {rate} = {pay:.2f}\n"    text += f"\n<b>–í—Å–µ–≥–æ –≤—ã–ø–ª–∞—Ç–∏—Ç—å: {total_all:.2f}</b>"    await query.message.edit_text(text, parse_mode="HTML")# --- –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ ---@admin.callback_query(AdminProtect(), F.data=="AM_NOTIFY")async def admin_notify(query: CallbackQuery):    await query.message.edit_text("–†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π‚Ä¶")    # reuse send_waiters logic    await send_waiters(query.message, CommandObject(command="send_waiters",args=""))    await query.message.answer("–û—Ñ–∏—Ü–∏–∞–Ω—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")# --- –≠–∫—Å–ø–æ—Ä—Ç Excel ---@admin.callback_query(AdminProtect(), F.data=="AM_EXPORT")async def admin_export(query: CallbackQuery):    rows = get_all_shifts()    wb = Workbook()    ws = wb.active    ws.append(["–û—Ñ–∏—Ü–∏–∞–Ω—Ç","–î–∞—Ç–∞","–ß–∞—Å—ã"])    for name, date_str, hrs in rows:        ws.append([name, date_str, hrs])    bio = BytesIO()    wb.save(bio)    bio.seek(0)    await query.message.edit_document(FSInputFile(bio, filename="schedule.xlsx"))