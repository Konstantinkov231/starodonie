from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.markdown import hbold, hitalic
from app.database import sqlite_db

import app.keyboards as kb  # здесь могут находиться общие клавиатуры и, например, словарь video_note_messages

waiter = Router()

# ============================================================================
# Тексты уроков на основе материалов документов
# ============================================================================
LESSON1_TEXT = (
    "<b>Урок 1: Внешний вид официанта</b>\n\n"
    "Стандарты внешнего вида работника зала:\n"
    "• Футболка/толстовка согласованного цвета, без рисунков, страз, надписей. Выглаженные.\n"
    "• Шорты свободного кроя бежевого/серого/джинсового оттенков, неспортивные, длина ниже колена.\n"
    "• Джинсы свободного кроя без дыр и потертостей.\n"
    "• Обувь удобная, с закрытым носом, неярких цветов (рекомендуются CROCS).\n"
    "• Волосы у мальчиков: чистые, аккуратные, уложенные (если длинные – собраны); борода допускается только в ухоженном виде.\n"
    "• Волосы у девочек: собраны в пучки, заплетены или заколоты без страз и камней.\n"
    "• Ногти аккуратно подстрижены; у девочек допускается лак пастельных тонов.\n"
    "• Соблюдение гигиены: мытьё рук после посещения туалета/мест для курения (без фартука).\n"
    "• Фирменный фартук должен быть чистым и выглаженным, значки и нашивки – только по согласованию.\n"
    "• Духи/туалетная вода – легких оттенков, без резких запахов.\n"
    "• И, самое главное, улыбайся – твое настроение читается окружающими!\n"
    "\n"
    "Если ты всё понял, то скорее жмякни эту манящую кнопочку"
)

LESSON2_TEXT = (
    "<b>Урок 2: Здесь мы разберём с вами 4 главных аспекта работы, наши ценности:\n\n "
    "Ответственность</b>\n\n"
    "• Мы работаем честно.\n"
    "• Осознаем свою и общую ответственность перед собой, коллегами и гостями.\n"
    "• Честно говорим о допущенных ошибках и несем за них ответственность.\n"
    "• Выполняем вовремя все взятые на себя обязательства.\n\n"
    "<b>Забота</b>\n"
    "• Мы любим наших гостей и заботимся о них, как о самых дорогих членах нашей семьи.\n"
    "• Создаем особую атмосферу, дарим гостям впечатления и эмоции.\n"
    "• Бережем и поддерживаем семейные традиции.\n\n"
    "<b>Развитие</b>\n"
    "• Проявляем творческий подход в поиске решений.\n"
    "• Постоянно развиваемся и ищем возможности для реализации новых идей.\n\n"
    "<b>Команда</b>\n\n"
    "• Ценим вклад каждого сотрудника.\n"
    "• Помогаем друг другу, работая сообща.\n"
    "• Создаем единую команду, где каждый важен.\n"
)

LESSON3_TEXT = (
    "<b>Урок 3: Правила работы официанта</b>\n\n"
    "<b>Правило 1: Пунктуальность</b>\n"
    "• Всегда приходите на работу вовремя. При задержке – предупредите менеджера.\n\n"
    "<b>Правило 2: Поведение в зале</b>\n"
    "• Не пользуйтесь мобильными телефонами, не жуйте резинку, не принимайте пищу и напитки во время работы.\n\n"
    "<b>Правило 3: Трудовая дисциплина</b>\n"
    "• Качественно выполняйте порученную работу, уважайте коллег и руководство.\n\n"
    "<b>Правило 4: Общение и помощь коллегам</b>\n"
    "• Работайте в команде, помогайте друг другу и просите о помощи, когда необходимо.\n\n"
    "Дополнительно:\n"
    "• Следите за чистотой зала: проводите утреннюю уборку, проверяйте станцию официанта.\n"
    "• Соблюдайте технику сервировки столов и подаче блюд и напитков.\n"
)

LESSON4_TEXT = (
    '<d>Работа с подносом</d>\n'
    'Основные правила работы с подносом:\n'
    '• Поднос необходимо носить на одной руке: легкий на пальцах, тяжелый на ладони.\n'
    '• Поднос держат не выше плеча и не ниже локтя.\n'
    '• Пустой поднос носят, опустив вниз перпендикулярно полу.\n'
    '• Все барное стекло (графины, бокалы, чайники, пиалы) разрешается носить только на подносе.\n\n'
    'ЗАПРЕЩЕНО!!!\n'
    '• Носить поднос «Под мышкой»\n'
    '• Носить двумя руками перед собой, т.е. как «таз».\n'
    '• Подбрасывать, крутить поднос на пальце.\n'
    '• При подаче блюд держать поднос над столом.\n'
    '• Ставить поднос на стол, стулья, диваны!\n'
    '• Одновременно на одном подносе носить блюда и грязную посуду.\n'
)

LESSON5_TEXT = (
    '<d>Здесь мы с тобой разберём шаги обслуживания:</d>\n'
    '<d>ШАГ 1. ВСТРЕЧА И ПРИВЕТСТВИЕ ГОСТЕЙ</d>\n'
    '• Поприветствуйте Гостя, входящего в кафе;\n'
    '• Узнайте, был ли зарезервирован столик;\n'
    '• Узнайте предпочтения Гостя в выборе зала (зал или терраса)\n'
    '• Проводите Гостя к столу;\n'
    '• Подайте меню;\n'
    '• Пожелайте приятного отдыха.\n\n'
    '<d>ШАГ 2. ЗНАКОМСТВО, ПРИНЯТИЕ ЗАКАЗА НА АПЕРИТИВ И ЕГО ПОДАЧА</d>\n'
    '• Подойдите к столу в течение 3 минут, после посадки Гостя;\n'
    '• Поприветствуйте Гостя и представьтесь;\n'
    '• Предложите и порекомендуйте Гостю аперитивы;\n'
    '• Проинформируйте гостя о скидках, акциях действующих в данный момент времени;\n'
    '• Внимательно и грамотно запишите заказ, учитывая пожелания каждого Гостя;\n'
    '• Повторите заказ Гостя со всеми его пожеланиями;\n'
    '• Пробейте заказ в кассе, передайте на кухню;\n'
    '• Получите заказанные аперитивы в баре;\n'
    '• Подайте аперитивы. При подаче напитка, обязательно назовите его.\n\n'
    '<d>ШАГ 3. ПРИНЯТИЕ И ВЫПОЛНЕНИЕ ОСНОВНОГО ЗАКАЗА</d>\n'
    '• Порекомендуйте Гостю закуски, супы, основные блюда;\n'
    '• Предупредить о времени приготовления блюд\n'
    '• Предложите дополнительные блюда, напитки, гарниры, лепешку, десерты, соусы;\n'
    '• Повторите заказ;\n'
    '• Уточните последовательность подачи блюд;\n'
    '• Время приготовления: Салат 15-25 минут после заказа, горячие блюда – в течение 15 – 30 мин, десерт в течение 10-15 мин.\n'
    '• Заберите меню.\n'
    '• Введите заказ в кассу, учитывая пожелания Гостей (например: без лука, без чеснока, одновременно, позже)\n'
    '• Засервируйте стол в соответствии с заказом;\n'
    '• Подайте Гостю блюда;\n'
    '• Поинтересуйтесь, понадобятся ли дополнительные соуса и специи;\n'
    '• Предложите дополнительные напитки;\n\n'
    '<d>ШАГ 4. КОНТРОЛЬ КАЧЕСТВА БЛЮД CHECK BACK.</d>\n'
    '• Узнайте мнение Гостя о блюде. Выбирайте удобный момент. Это можно сделать:\n'
    '• сразу после того, как Гость попробовал блюдо или напиток;\n'
    '• во время уборки посуды;\n'
    '• при негативной реакции Гостя (отодвинул тарелку, попробовал - не довольноелицо).\n\n'
    '<d>ШАГ 5. ПРЕДЛОЖЕНИЕ ДЕСЕРТОВ, ГОРЯЧИХ НАПИТКОВ И ДИЖЕСТИВОВ.</d>\n'
    '• Вовремя уберите со стола грязную посуду и приборы;\n'
    '• Предложите Гостю горячие напитки, дижестивы, десерты;\n\n'
    '<d>ШАГ 6. РАСЧЕТ И ПРОЩАНИЕ С ГОСТЕМ.</d>\n'
    '• По первой просьбе Гостя принесите предчек в корзине, не более 3-х минут\n'
    '• Рассчитайте Гостя;\n'
    '• Принесите сдачу в течение 4-х минут\n'
    '• Попрощайтесь с Гостем и пригласите его прийти снова;\n'
    '• Пересервируйте стол, приведите в порядок диван, подушки и пол вокруг стола.'
)

LESSON6_TEXT = (
    '<d>Cервировка стола во время обслуживания:</d>\n\n'
    '. Сервировка стола столовыми приборами.\n'
    'Oсновные правила:\n'
    '• Лезвие ножа всегда «смотрит» влево.\n'
    '• Вилки кладут выпуклой частью на стол\n'
    '• Приборы всегда подаются до начала трапезы или одновременно с блюдом. НО сначала приборы, а затем блюдо.\n'
    '• Приборы устанавливаются с правой стороны от Гостя.\n'
    '• «Убирать посуду и приборы, на которых осталась еда (напитки), можно только с разрешения Гостя, спросив: «С Вашего разрешения я заберу тарелку», «...бокал», «Позвольте....». Во всех остальных случаях грязная посуда убирается молча и, по возможности, незаметно».\n'
    '<d>Подача бокалов, стаканов</d>\n\n'
    'ВНИМАНИЕ!\n'
    'Всю стеклянную посуду разрешается носить ТОЛЬКО на подносе!!!\n'
    '• Подают и убирают бокалы (стаканы) держа за ножку или донную часть.\n'
    '• Ни в коем случае нельзя дотрагиваться до верхней части бокалов из гигиенических соображений, тем более, если они уже находились в употреблении.\n'
)


# ============================================================================
# Состояния для теста
# ============================================================================
class TestStates(StatesGroup):
    q1 = State()
    q2 = State()

# ============================================================================
# Сохранённые ранее обработчики (если нужны для альтернативной логики)
# ============================================================================
@waiter.callback_query(F.data == "ofik")
async def per_block(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    user_id = callback_query.from_user.id

    # Добавляем Telegram ID официанта в таблицу waiters
    sqlite_db.add_waiter(user_id)

    # Если ранее отправлялось видео-сообщение, удаляем его
    if user_id in kb.video_note_messages:
        try:
            await callback_query.bot.delete_message(chat_id=chat_id, message_id=kb.video_note_messages[user_id])
        except Exception as e:
            print(f"Ошибка при удалении видео-заметки: {e}")
        finally:
            kb.video_note_messages.pop(user_id, None)

    # Подтверждаем callback-запрос без текста (чтобы не показывалось всплывающее окно)
    await callback_query.answer()
#'/Users/kostakovacev/PycharmProjects/STARODONIE/imge/startof.mp4'
    # Отправляем видеосообщение startof.mp4 с нужной клавиатурой
    video_note = FSInputFile('/root/bot/imge/startof.mp4')
    sent_message = await callback_query.bot.send_video_note(
        chat_id=chat_id,
        video_note=video_note,
        reply_markup=kb.ofik_skip
    )

    # Сохраняем id отправленного сообщения, если понадобится его удалить в будущем
    kb.video_note_messages[user_id] = sent_message.message_id


@waiter.callback_query(F.data == "skip1")
async def start_training(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    # Начинаем с урока 1: Внешний вид официанта
    await callback_query.message.answer(LESSON1_TEXT, parse_mode="HTML", reply_markup=kb.lesson1_kb)
    await state.clear()

@waiter.callback_query(F.data == "lesson1_next")
async def lesson1_next(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    # Урок 2: Ответственность
    await callback_query.message.answer(LESSON2_TEXT, parse_mode="HTML", reply_markup=kb.lesson2_kb)

@waiter.callback_query(F.data == "lesson2_next")
async def lesson2_next(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    # Урок 3: Забота
    await callback_query.message.answer(LESSON3_TEXT, parse_mode="HTML", reply_markup=kb.lesson3_kb)

@waiter.callback_query(F.data == "lesson3_next")
async def lesson3_next(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    # Урок 4: Развитие
    await callback_query.message.answer(LESSON4_TEXT, parse_mode="HTML", reply_markup=kb.lesson4_kb)

@waiter.callback_query(F.data == "lesson4_next")
async def lesson4_next(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    # Урок 5: Команда
    await callback_query.message.answer(LESSON5_TEXT, parse_mode="HTML", reply_markup=kb.lesson5_kb)

@waiter.callback_query(F.data == "lesson5_next")
async def lesson5_next(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    # Урок 6: Правила работы официанта
    await callback_query.message.answer(LESSON6_TEXT, parse_mode="HTML", reply_markup=kb.lesson6_kb)

# ============================================================================
# Обработчики теста
# ============================================================================
@waiter.callback_query(F.data == "start_test")
async def start_test(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    question1 = "<b>Вопрос 1:</b> Какое требование является обязательным для формы официанта?"
    await callback_query.message.answer(question1, parse_mode="HTML", reply_markup=kb.test_q1_kb)
    await state.set_state(TestStates.q1)

@waiter.callback_query(F.data.in_(["q1_right", "q1_wrong"]))
async def answer_q1(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    if answer == "q1_right":
        feedback = "Правильно! Форма должна быть чистой и выглаженной."
    else:
        feedback = "Неверно. Правильный ответ: чистота и выглаженность формы."
    await callback_query.message.answer(feedback)
    question2 = "<b>Вопрос 2:</b> Какое правило обязательно для поведения официанта в зале?"
    await callback_query.message.answer(question2, parse_mode="HTML", reply_markup=kb.test_q2_kb)
    await state.set_state(TestStates.q2)

@waiter.callback_query(F.data.in_(["q2_right", "q2_wrong"]))
async def answer_q2(callback_query: CallbackQuery, state: FSMContext):
    answer = callback_query.data
    if answer == "q2_right":
        feedback = "Правильно! Мыть руки перед выходом в зал – обязательное правило."
    else:
        feedback = "Неверно. Правильный ответ: мыть руки перед выходом в зал."
    await callback_query.message.answer(feedback + "\n\nПоздравляем, вы прошли тест!")
    await state.clear()




