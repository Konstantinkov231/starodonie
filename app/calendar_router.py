from datetime import datetime

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from app.database.sqlite_db import (
    add_waiter,
    get_waiter_by_tg,
    get_waiter_id_by_tg,
    get_shifts_for,
    # –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–Ω—ã
)
from app.utils.calendar import make_calendar

calendar_router = Router()

# –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤, —á—Ç–æ–±—ã –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ admin.py –∏ –Ω–µ –ø–æ—Ä–æ–∂–¥–∞—Ç—å —Ü–∏–∫–ª
ADMIN_IDS = [2015462319, 1773695867]
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
class FillName(StatesGroup):
    waiting_for_name = State()

@calendar_router.message(Command("calendar"))
async def cmd_calendar(message: Message, state: FSMContext):
    """
    /calendar ‚Üí —Å–æ–∑–¥–∞—ë–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –±–µ–∑ –∏–º–µ–Ω–∏ –∏–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
    –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –µ–≥–æ —Å–º–µ–Ω–∞–º–∏.
    """
    waiter = get_waiter_by_tg(message.from_user.id)
    if not waiter:
        add_waiter(message.from_user.id)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        await state.set_state(FillName.waiting_for_name)
        return

    waiter_id, name = waiter
    if not name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        await state.set_state(FillName.waiting_for_name)
        return

    # –í—Å—ë –µ—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await _show_calendar(message, waiter_id)

@calendar_router.message(FillName.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """
    –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    """
    name = message.text.strip()
    tg_id = message.from_user.id

    # –Ω–∞–ø—Ä—è–º—É—é –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –ë–î
    from app.database.sqlite_db import cur, base
    cur.execute("UPDATE waiters SET name = ? WHERE tg_id = ?", (name, tg_id))
    base.commit()

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –í–æ—Ç –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:")
    waiter_id = get_waiter_id_by_tg(tg_id)
    await state.clear()
    await _show_calendar(message, waiter_id)

async def _show_calendar(event_source, waiter_id: int, year: int = None, month: int = None):
    """
    –û–±—â–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞.
    –ù–∞–≤–∏–≥–∞—Ü–∏—è, –æ—Ç–º–µ—Ç–∫–∏ —Å–º–µ–Ω –∏ –û—Ç–º–µ–Ω–∞.
    """
    today = datetime.today()
    year = year or today.year
    month = month or today.month

    shifts = get_shifts_for(waiter_id)  # { "YYYY-MM-DD": {...}, ... }
    kb = make_calendar(year, month, set(shifts.keys()))

    await event_source.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

# –õ–∏—Å—Ç–∞–Ω–∏–µ –∏ –≤—ã–±–æ—Ä –¥–Ω—è ‚Äî –¢–û–õ–¨–ö–û –¥–ª—è –ù–ï-–∞–¥–º–∏–Ω–æ–≤
@calendar_router.callback_query(
    lambda q: (not is_admin(q.from_user.id)) and q.data.startswith("CAL_PREV|")
)
async def prev_month(query: CallbackQuery):
    _, y, m = query.data.split("|")
    y, m = int(y), int(m) - 1
    if m == 0:
        y -= 1; m = 12
    waiter_id = get_waiter_id_by_tg(query.from_user.id)
    shifts = get_shifts_for(waiter_id)
    kb = make_calendar(y, m, set(shifts.keys()))
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@calendar_router.callback_query(
    lambda q: (not is_admin(q.from_user.id)) and q.data.startswith("CAL_NEXT|")
)
async def next_month(query: CallbackQuery):
    _, y, m = query.data.split("|")
    y, m = int(y), int(m) + 1
    if m == 13:
        y += 1; m = 1
    waiter_id = get_waiter_id_by_tg(query.from_user.id)
    shifts = get_shifts_for(waiter_id)
    kb = make_calendar(y, m, set(shifts.keys()))
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=kb)

@calendar_router.callback_query(
    lambda q: (not is_admin(q.from_user.id)) and q.data == "CAL_CANCEL"
)
async def cancel_calendar(query: CallbackQuery):
    await query.message.delete()

@calendar_router.callback_query(
    lambda q: (not is_admin(q.from_user.id)) and q.data.startswith("CAL_DAY|")
)
async def show_shift_info(query: CallbackQuery):
    """
    –û—Ñ–∏—Ü–∏–∞–Ω—Ç –∫–ª–∏–∫–Ω—É–ª –Ω–∞ –¥–∞—Ç—É ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ —Å–º–µ–Ω—É –∏ –∑–∞–¥–∞—á–∏.
    """
    _, date_str = query.data.split("|", 1)
    waiter_id = get_waiter_id_by_tg(query.from_user.id)
    shifts = get_shifts_for(waiter_id)
    info = shifts.get(date_str)
    if info:
        hours = info.get("hours", 0)
        tasks = info.get("tasks", "")
        text = (
            f"üìÖ –°–º–µ–Ω–∞ –Ω–∞ {date_str}\n"
            f"‚è±Ô∏è –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours} —á.\n"
            f"üìã –ó–∞–¥–∞—á–∏:\n{tasks or '‚Äî –Ω–µ—Ç –∑–∞–¥–∞—á'}"
        )
    else:
        text = "–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–º–µ–Ω –∏ –∑–∞–¥–∞—á."
    await query.message.delete()
    await query.message.answer(text)
