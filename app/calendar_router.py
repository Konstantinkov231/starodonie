from datetime import datetime

from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from app.admin import user_is_admin
from app.database.sqlite_db import (
    get_waiter_by_tg,
    get_waiter_id_by_tg,
    add_waiter,
    get_shifts_for
)
from app.utils.calendar import make_calendar

calendar_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
class FillName(StatesGroup):
    waiting_for_name = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç /calendar
@calendar_router.message(Command("calendar"))
async def cmd_calendar(message: Message, state: FSMContext):
    """
    –ó–∞–ø—É—Å–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞.
    –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è.
    """
    waiter = get_waiter_by_tg(message.from_user.id)
    if not waiter:
        add_waiter(message.from_user.id)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        await state.set_state(FillName.waiting_for_name)
        return

    waiter_id, name = waiter
    if not name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        await state.set_state(FillName.waiting_for_name)
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
    await _show_calendar(message, waiter_id)

@calendar_router.message(FillName.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    tg_id = message.from_user.id
    from app.database.sqlite_db import cur, base
    cur.execute("UPDATE waiters SET name = ? WHERE tg_id = ?", (name, tg_id))
    base.commit()
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –í–æ—Ç –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:")
    waiter_id = get_waiter_id_by_tg(tg_id)
    await state.clear()
    await _show_calendar(message, waiter_id)

async def _show_calendar(event_source, waiter_id: int, year: int = None, month: int = None):
    today = datetime.today()
    year = year or today.year
    month = month or today.month
    shifts = get_shifts_for(waiter_id)
    kb = make_calendar(year, month, set(shifts.keys()))
    await event_source.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:", reply_markup=kb)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–¥–∞—Å—Ç—Ä–∞ ---
@calendar_router.callback_query(lambda q: not user_is_admin(q.from_user.id) and q.data.startswith("CAL_"))
async def calendar_handler(query: CallbackQuery, state: FSMContext):
    parts = query.data.split("|")
    action = parts[0]
    waiter_id = get_waiter_id_by_tg(query.from_user.id)

    # –û—Ç–º–µ–Ω–∞
    if action == "CAL_CANCEL":
        await query.message.delete()
        return

    # –ü–µ—Ä–µ—Ö–æ–¥ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏
    if action in ("CAL_PREV", "CAL_NEXT"):
        year, month = map(int, parts[1:])
        if action == "CAL_PREV":
            month -= 1
            if month == 0:
                month, year = 12, year - 1
        else:
            month += 1
            if month == 13:
                month, year = 1, year + 1
        shifts = get_shifts_for(waiter_id)
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",
            reply_markup=make_calendar(year, month, set(shifts.keys()))
        )
        return

    # –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–º–µ–Ω—ã
    if action == "CAL_DAY":
        date_str = parts[1]
        shifts = get_shifts_for(waiter_id)
        info = shifts.get(date_str)
        if info:
            hours = info.get("hours", 0)
            tasks = info.get("tasks", "")
            text = (
                f"–°–º–µ–Ω–∞ –Ω–∞ {date_str}:\n"
                f"‚è± –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours} —á.\n"
                f"üìã –ó–∞–¥–∞—á–∏:\n{tasks or '–Ω–µ—Ç –∑–∞–¥–∞—á'}"
            )
        else:
            text = "–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–º–µ–Ω –∏ –∑–∞–¥–∞—á."
        await query.message.delete()
        await query.message.answer(text)
