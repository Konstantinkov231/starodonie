"""
Waiter-side calendar, forecast & tips for ¬´–°—Ç–∞—Ä–æ–¥–æ–Ω—å–µ¬ª.
"""

from __future__ import annotations

import calendar
import os
from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from app.database.sqlite_db import (
    add_waiter,
    get_waiter_by_tg,
    get_waiter_id_by_tg,
    get_shifts_for,
    add_tip,
    get_month_tips,
    clear_month_tips,
)

router = Router()

calendar_router = router
ADMIN_IDS = [2015462319, 1773695867]

def is_admin(uid: int) -> bool: return uid in ADMIN_IDS

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –º–µ–Ω—é –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
WAITER_MENU = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üìÜ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", callback_data="W_CALENDAR")],
    [InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã", callback_data="FORECAST_START")],
    [InlineKeyboardButton(text="üíµ –ü–æ–¥—Å—á—ë—Ç —á–∞–µ–≤—ã—Ö", callback_data="TIPS_START")],
])

@router.message(Command("menu"))
async def waiter_menu(msg: Message): await msg.answer("–ú–µ–Ω—é –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:", reply_markup=WAITER_MENU)

@router.callback_query(F.data == "W_MENU")
async def waiter_menu_cb(q: CallbackQuery): await q.message.edit_text("–ú–µ–Ω—é –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞:", reply_markup=WAITER_MENU)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def make_calendar(year: int, month: int, marked: set[str]) -> InlineKeyboardMarkup:
    kb = [
        [
            InlineKeyboardButton(text="‚Äπ", callback_data=f"CAL_PREV|{year}|{month}"),
            InlineKeyboardButton(text=f"{calendar.month_name[month]} {year}", callback_data="IGNORE"),
            InlineKeyboardButton(text="‚Ä∫", callback_data=f"CAL_NEXT|{year}|{month}"),
        ],
        [InlineKeyboardButton(text=d, callback_data="IGNORE") for d in ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]],
    ]
    for week in calendar.Calendar(firstweekday=0).monthdayscalendar(year, month):
        row=[]
        for day in week:
            if day==0:
                row.append(InlineKeyboardButton(text=" ", callback_data="IGNORE"))
            else:
                ds=f"{year:04d}-{month:02d}-{day:02d}"
                mark="‚úì" if ds in marked else ""
                row.append(InlineKeyboardButton(text=f"{day}{mark}", callback_data=f"CAL_DAY|{ds}"))
        kb.append(row)
    kb.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="CAL_CANCEL")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

async def _send_calendar(m, uid: int, edit=False):
    wid = get_waiter_id_by_tg(uid)
    shifts = get_shifts_for(wid)
    kb = make_calendar(datetime.today().year, datetime.today().month, set(shifts.keys()))
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é", callback_data="W_MENU")])
    if edit: await m.edit_text("–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=kb)
    else:    await m.answer("–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=kb)

@router.callback_query(F.data == "W_CALENDAR")
async def waiter_calendar(q: CallbackQuery): await _send_calendar(q.message, q.from_user.id, True)

@router.callback_query(F.data == "IGNORE")
async def _ignore(q: CallbackQuery): await q.answer()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ /calendar (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class FillName(StatesGroup):
    waiting = State()

@router.message(Command("calendar"))
async def cmd_calendar(msg: Message, state: FSMContext):
    waiter = get_waiter_by_tg(msg.from_user.id)
    if not waiter or not waiter[1]:
        if not waiter: add_waiter(msg.from_user.id)
        await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        await state.set_state(FillName.waiting)
        return
    await _send_calendar(msg, msg.from_user.id)

@router.message(FillName.waiting)
async def save_name(msg: Message, state: FSMContext):
    name = msg.text.strip()
    from app.database.sqlite_db import cur, base
    cur.execute("UPDATE waiters SET name=? WHERE tg_id=?", (name, msg.from_user.id))
    base.commit()
    await msg.answer(f"–°–ø–∞—Å–∏–±–æ, {name}!")
    await _send_calendar(msg, msg.from_user.id)
    await state.clear()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –º–µ—Å. –≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(lambda q: not is_admin(q.from_user.id) and q.data.startswith("CAL_PREV|"))
async def prev_month(q: CallbackQuery):
    _, y, m = q.data.split("|"); y, m = int(y), int(m)-1
    if m==0: y,m=y-1,12
    wid=get_waiter_id_by_tg(q.from_user.id)
    kb=make_calendar(y,m,set(get_shifts_for(wid).keys()))
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é", callback_data="W_MENU")])
    await q.message.edit_text("–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=kb)

@router.callback_query(lambda q: not is_admin(q.from_user.id) and q.data.startswith("CAL_NEXT|"))
async def next_month(q: CallbackQuery):
    _,y,m=q.data.split("|"); y,m=int(y),int(m)+1
    if m==13:y,m=y+1,1
    wid=get_waiter_id_by_tg(q.from_user.id)
    kb=make_calendar(y,m,set(get_shifts_for(wid).keys()))
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é", callback_data="W_MENU")])
    await q.message.edit_text("–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=kb)

@router.callback_query(lambda q: not is_admin(q.from_user.id) and q.data == "CAL_CANCEL")
async def cancel_cal(q: CallbackQuery): await q.message.delete()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–∫–∞–∑–∞—Ç—å —Å–º–µ–Ω—É ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(lambda q: not is_admin(q.from_user.id) and q.data.startswith("CAL_DAY|"))
async def show_shift(q: CallbackQuery):
    _,ds=q.data.split("|",1)
    info=get_shifts_for(get_waiter_id_by_tg(q.from_user.id)).get(ds)
    text=f"üìÖ {ds}\n‚è±Ô∏è {info['hours']} —á\nüìã {info['tasks'] or '‚Äî'}" if info else "–ù–µ—Ç —Å–º–µ–Ω."
    kb=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é", callback_data="W_MENU")]])
    await q.message.delete()
    await q.message.answer(text, reply_markup=kb)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FORECAST (—Å–º–æ–≥—É/–Ω–µ —Å–º–æ–≥—É) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Forecast(StatesGroup):
    choose_date = State()
    confirm     = State()

@router.callback_query(F.data == "FORECAST_START")
async def forecast_start(q: CallbackQuery, state:FSMContext):
    kb=make_calendar(datetime.today().year, datetime.today().month,set())
    kb.inline_keyboard.append([InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é", callback_data="W_MENU")])
    await state.set_state(Forecast.choose_date)
    await q.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=kb)

@router.callback_query(F.data.startswith("CAL_DAY|"), Forecast.choose_date)
async def forecast_choose(q: CallbackQuery, state:FSMContext):
    _,ds=q.data.split("|",1)
    await state.update_data(date=ds)
    kb=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–º–æ–≥—É", callback_data="FORECAST_YES")],
        [InlineKeyboardButton(text="‚ùå –ù–µ —Å–º–æ–≥—É", callback_data="FORECAST_NO")],
    ])
    await state.set_state(Forecast.confirm)
    await q.message.edit_text(f"–î–∞—Ç–∞: {ds}\n–°–º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏?", reply_markup=kb)

@router.callback_query(F.data.in_(["FORECAST_YES","FORECAST_NO"]), Forecast.confirm)
async def forecast_send(q: CallbackQuery, state:FSMContext):
    ds=(await state.get_data())["date"]
    ok=q.data=="FORECAST_YES"
    admin_chat=os.getenv("CHAT_ID")
    txt=f"üì£ –ü—Ä–æ–≥–Ω–æ–∑:\n–û—Ñ–∏—Ü–∏–∞–Ω—Ç: {q.from_user.full_name} (@{q.from_user.username})\n–î–∞—Ç–∞: {ds}\n{'‚úÖ –°–º–æ–≥—É' if ok else '‚ùå –ù–µ —Å–º–æ–≥—É'}"
    await q.bot.send_message(admin_chat,txt)
    await q.message.answer("–°–ø–∞—Å–∏–±–æ! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.", reply_markup=WAITER_MENU)
    await state.clear()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ TIPS ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class TipsState(StatesGroup):
    input = State()

@router.callback_query(F.data == "TIPS_START")
async def tips_start(q:CallbackQuery,state:FSMContext):
    today=datetime.today().strftime("%Y-%m-%d")
    wid=get_waiter_id_by_tg(q.from_user.id)
    await state.update_data(wid=wid,date=today)
    await state.set_state(TipsState.input)
    await q.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∞–µ–≤—ã—Ö –∑–∞ {today} (—Ä—É–±):")

@router.message(TipsState.input)
async def tips_save(msg:Message,state:FSMContext):
    data=await state.get_data()
    try:
        amount=float(msg.text.replace(",",".")); assert amount>=0
    except Exception:
        return await msg.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä 1234.50")
    add_tip(data["wid"],data["date"],amount)
    ym=data["date"][:7]; total=get_month_tips(data["wid"],ym)
    kb=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßπ –û–±–Ω—É–ª–∏—Ç—å —á–∞–µ–≤—ã–µ –∑–∞ –º–µ—Å—è—Ü", callback_data=f"TIPS_CLEAR|{ym}")],
        [InlineKeyboardButton(text="‚è™ –í –º–µ–Ω—é", callback_data="W_MENU")],
    ])
    await msg.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ {amount:.2f} ‚ÇΩ.\n–í—Å–µ–≥–æ –∑–∞ {ym}: {total:.2f} ‚ÇΩ", reply_markup=kb)
    await state.clear()

@router.callback_query(F.data.startswith("TIPS_CLEAR|"))
async def tips_clear(q:CallbackQuery):
    _,ym=q.data.split("|",1)
    clear_month_tips(get_waiter_id_by_tg(q.from_user.id),ym)
    await q.answer("–ß–∞–µ–≤—ã–µ –∑–∞ –º–µ—Å—è—Ü –æ–±–Ω—É–ª–µ–Ω—ã!", show_alert=True)
    await q.message.edit_text("–ß–∞–µ–≤—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã.", reply_markup=WAITER_MENU)
