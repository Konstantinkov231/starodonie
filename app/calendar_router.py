from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from app.admin import user_is_admin
from app.database.sqlite_db import (
    get_waiter_by_tg,
    get_waiter_id_by_tg,
    add_waiter,
    get_shifts_for,
    add_shift,
    set_shift_hours
)
from app.utils.calendar import make_calendar

calendar_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
class FillName(StatesGroup):
    waiting_for_name = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ —á–∞—Å–æ–≤
class AdminStates(StatesGroup):
    waiting_hours = State()

@calendar_router.message(Command("calendar"))
async def cmd_calendar(message: Message, state: FSMContext):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç /calendar.
    –ï—Å–ª–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –Ω–µ—Ç –≤ –ë–î ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∏–º—è.
    –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    """
    waiter = get_waiter_by_tg(message.from_user.id)
    if not waiter:
        # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –±–µ–∑ –∏–º–µ–Ω–∏
        add_waiter(message.from_user.id)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        await state.set_state(FillName.waiting_for_name)
        return

    waiter_id, name = waiter
    if not name:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        await state.set_state(FillName.waiting_for_name)
        return

    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    await _show_calendar(message, waiter_id)

@calendar_router.message(FillName.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å.
    """
    name = message.text.strip()
    tg_id = message.from_user.id
    # –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
    from app.database.sqlite_db import cur, base
    cur.execute("UPDATE waiters SET name = ? WHERE tg_id = ?", (name, tg_id))
    base.commit()

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –í–æ—Ç –≤–∞—à –ª–∏—á–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:")
    waiter_id = get_waiter_id_by_tg(tg_id)
    await state.clear()
    await _show_calendar(message, waiter_id)

async def _show_calendar(event_source, waiter_id: int, year: int = None, month: int = None):
    """
    –û—Ç—Ä–∏—Å–æ–≤–∫–∞ inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –ø–æ–º–µ—Ç–∫–∞–º–∏ –¥–Ω–µ–π, –≥–¥–µ –µ—Å—Ç—å —Å–º–µ–Ω—ã.
    """
    today = datetime.today()
    year = year or today.year
    month = month or today.month
    shifts = get_shifts_for(waiter_id)  # dict: {date_str: {"hours": ..., "tasks": ...}}
    kb = make_calendar(year, month, set(shifts.keys()))
    await event_source.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:", reply_markup=kb)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–º–µ–Ω—ã –∏ –∑–∞–ø—Ä–æ—Å —á–∞—Å–æ–≤
@calendar_router.callback_query(lambda q: user_is_admin(q.from_user.id) and q.data.startswith("CAL_DAY"))
async def admin_set_shift(query: CallbackQuery, state: FSMContext):
    """
    –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É ‚Äî —Å–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—É –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —á–∞—Å—ã.
    """
    _, date_str = query.data.split("|")  # "CAL_DAY|YYYY-MM-DD"
    waiter_id = get_waiter_id_by_tg(query.from_user.id)
    # —Å–æ–∑–¥–∞—ë–º —Å–º–µ–Ω—É, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ
    add_shift(waiter_id, date_str)
    await query.message.edit_text(
        f"–°–º–µ–Ω–∞ –Ω–∞ {date_str} –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ:",
    )
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    await state.update_data(admin_shift={"waiter_id": waiter_id, "date": date_str})
    await state.set_state(AdminStates.waiting_hours)

@calendar_router.message(AdminStates.waiting_hours)
async def process_admin_hours(message: Message, state: FSMContext):
    """
    –ê–¥–º–∏–Ω –≤–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º.
    """
    text = message.text.strip().replace(",", ".")
    try:
        hours = float(text)
    except ValueError:
        await message.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    data = await state.get_data()
    ws = data.get("admin_shift", {})
    waiter_id = ws.get("waiter_id")
    date_str = ws.get("date")
    set_shift_hours(waiter_id, date_str, hours)
    await message.answer(f"–ß–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {hours} —á. –¥–ª—è —Å–º–µ–Ω—ã {date_str}.")
    await state.clear()

# –û–±—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@calendar_router.callback_query(F.data.startswith("CAL_"))
async def calendar_handler(query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É –º–µ—Å—è—Ü–∞–º–∏ –∏ –∫–ª–∏–∫–æ–≤ –ø–æ –¥–Ω—é –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞.
    """
    parts = query.data.split("|")
    action = parts[0]
    waiter_id = get_waiter_id_by_tg(query.from_user.id)

    # –æ—Ç–º–µ–Ω–∞
    if action == "CAL_CANCEL":
        await query.message.delete()
        return

    # –ª–∏—Å—Ç–∞–µ–º –º–µ—Å—è—Ü
    if action in ("CAL_PREV", "CAL_NEXT"):
        year, month = map(int, parts[1:])
        if action == "CAL_PREV":
            month -= 1
            if month == 0:
                month, year = 12, year - 1
        else:
            month += 1
            if month == 13:
                month, year = 1, year + 1
        shifts = get_shifts_for(waiter_id)
        await query.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–ø–∏—Å–∏:",
            reply_markup=make_calendar(year, month, set(shifts.keys()))
        )
        return

    # –∫–ª–∏–∫ –ø–æ –¥–Ω—é –æ–±—ã—á–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if action == "CAL_DAY":
        date_str = parts[1]
        shifts = get_shifts_for(waiter_id)
        info = shifts.get(date_str)
        if info:
            hours = info.get("hours", 0)
            tasks = info.get("tasks", "")
            text = (
                f"–°–º–µ–Ω–∞ –Ω–∞ {date_str}:\n"
                f"‚è± –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours} —á.\n"
                f"üìã –ó–∞–¥–∞—á–∏:\n{tasks or '–Ω–µ—Ç –∑–∞–¥–∞—á'}"
            )
        else:
            text = "–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–º–µ–Ω –∏ –∑–∞–¥–∞—á."
        await query.message.delete()
        await query.message.answer(text)
