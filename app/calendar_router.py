from datetime import datetime

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup

from app.database.sqlite_db import (
    add_waiter,
    get_waiter_by_tg,
    get_waiter_id_by_tg,
    get_shifts_for,
)
from app.utils.calendar import make_calendar

calendar_router = Router()

# –ê–¥–º–∏–Ω—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ (—á—Ç–æ–±—ã —Å–∫—Ä—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–º)
ADMIN_IDS = [2015462319, 1773695867]
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# FSM –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞
class FillName(StatesGroup):
    waiting_for_name = State()

# FSM –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–º–µ–Ω—ã
class Forecast(StatesGroup):
    ChoosingDate        = State()
    ConfirmAvailability = State()

@calendar_router.message(Command("calendar"))
async def cmd_calendar(message: Message, state: FSMContext):
    waiter = get_waiter_by_tg(message.from_user.id)
    # –ï—Å–ª–∏ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –Ω–æ–≤—ã–π –∏–ª–∏ –∏–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
    if not waiter or not waiter[1]:
        if not waiter:
            add_waiter(message.from_user.id)
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:")
        await state.set_state(FillName.waiting_for_name)
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–º–µ–Ω–∞–º–∏
    waiter_id, _ = waiter
    shifts = get_shifts_for(waiter_id)
    kb = make_calendar(datetime.today().year, datetime.today().month, set(shifts.keys()))

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ —Å–º–µ–Ω
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É", callback_data="FORECAST_START")
    ])
    await message.answer("–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω:", reply_markup=kb)

@calendar_router.message(FillName.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    name = message.text.strip()
    tg = message.from_user.id
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    from app.database.sqlite_db import cur, base
    cur.execute("UPDATE waiters SET name = ? WHERE tg_id = ?", (name, tg))
    base.commit()

    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –í–æ—Ç –≤–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω:")
    waiter_id = get_waiter_id_by_tg(tg)
    shifts = get_shifts_for(waiter_id)
    kb = make_calendar(datetime.today().year, datetime.today().month, set(shifts.keys()))
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É", callback_data="FORECAST_START")
    ])
    await state.clear()
    await message.answer("", reply_markup=kb)

# –û–±—ã—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é (–ø—Ä–µ–¥—ã–¥—É—â–∏–π/—Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü)
@calendar_router.callback_query(lambda q: not is_admin(q.from_user.id) and q.data.startswith("CAL_PREV|"))
async def prev_month(query: CallbackQuery):
    _, y, m = query.data.split("|")
    y, m = int(y), int(m) - 1
    if m == 0:
        y -= 1; m = 12
    waiter_id = get_waiter_id_by_tg(query.from_user.id)
    shifts = get_shifts_for(waiter_id)
    kb = make_calendar(y, m, set(shifts.keys()))
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É", callback_data="FORECAST_START")
    ])
    await query.message.edit_text("–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω:", reply_markup=kb)

@calendar_router.callback_query(lambda q: not is_admin(q.from_user.id) and q.data.startswith("CAL_NEXT|"))
async def next_month(query: CallbackQuery):
    _, y, m = query.data.split("|")
    y, m = int(y), int(m) + 1
    if m == 13:
        y += 1; m = 1
    waiter_id = get_waiter_id_by_tg(query.from_user.id)
    shifts = get_shifts_for(waiter_id)
    kb = make_calendar(y, m, set(shifts.keys()))
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å —Å–º–µ–Ω—É", callback_data="FORECAST_START")
    ])
    await query.message.edit_text("–í–∞—à –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–º–µ–Ω:", reply_markup=kb)

@calendar_router.callback_query(lambda q: not is_admin(q.from_user.id) and q.data == "CAL_CANCEL")
async def cancel_calendar(query: CallbackQuery):
    await query.message.delete()

@calendar_router.callback_query(lambda q: not is_admin(q.from_user.id) and q.data.startswith("CAL_DAY|"))
async def show_shift_info(query: CallbackQuery):
    # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–º–µ–Ω—ã
    _, date_str = query.data.split("|", 1)
    waiter_id = get_waiter_id_by_tg(query.from_user.id)
    shifts = get_shifts_for(waiter_id)
    info = shifts.get(date_str)
    if info:
        hours = info.get("hours", 0)
        tasks = info.get("tasks", "")
        text = (
            f"üìÖ –°–º–µ–Ω–∞ –Ω–∞ {date_str}\n"
            f"‚è±Ô∏è –û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: {hours} —á.\n"
            f"üìã –ó–∞–¥–∞—á–∏:\n{tasks or '‚Äî –Ω–µ—Ç –∑–∞–¥–∞—á'}"
        )
    else:
        text = "–ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–º–µ–Ω –∏ –∑–∞–¥–∞—á."
    await query.message.delete()
    await query.message.answer(text)

# --- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω—ã ---
@calendar_router.callback_query(F.data == "FORECAST_START")
async def forecast_start(query: CallbackQuery, state: FSMContext):
    # –®–∞–≥ 1: –≤—ã–±–∏—Ä–∞–µ–º –¥–∞—Ç—É
    from app.utils.calendar import make_calendar
    today = datetime.today()
    kb = make_calendar(today.year, today.month, set())
    await state.set_state(Forecast.ChoosingDate)
    await query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=kb)

@calendar_router.callback_query(F.data.startswith("CAL_DAY|"), F.state == Forecast.ChoosingDate)
async def forecast_choose_day(query: CallbackQuery, state: FSMContext):
    # –®–∞–≥ 2: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    _, date_str = query.data.split("|", 1)
    await state.update_data(forecast_date=date_str)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–º–æ–≥—É", callback_data="FORECAST_YES")],
        [InlineKeyboardButton(text="‚ùå –ù–µ —Å–º–æ–≥—É", callback_data="FORECAST_NO")],
    ])
    await state.set_state(Forecast.ConfirmAvailability)
    await query.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞ {date_str}. –í—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏?", reply_markup=kb)

@calendar_router.callback_query(F.data.in_(["FORECAST_YES", "FORECAST_NO"]), F.state == Forecast.ConfirmAvailability)
async def forecast_result(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    date_str = data['forecast
